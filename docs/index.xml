<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:distill="https://distill.pub/journal/" version="2.0">
  <channel>
    <title>Valerio Gherardi</title>
    <link>https://vgherard.github.io/</link>
    <atom:link href="https://vgherard.github.io/index.xml" rel="self" type="application/rss+xml"/>
    <description>Valerio Gherardi
</description>
    <generator>Distill</generator>
    <lastBuildDate>2023-06-07</lastBuildDate>
    <item>
      <title>Fisher's Randomization Test</title>
      <dc:creator>vgherard</dc:creator>
      <link>https://vgherard.github.io/posts/2023-06-07-fishers-randomization-test</link>
      <description>


&lt;p&gt;Let &lt;span class="math inline"&gt;\(N\in \mathbb N\)&lt;/span&gt; be fixed, and
let:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math inline"&gt;\(\mathbf Y(1),\,\mathbf Y(0)\in \mathbb R
^N\)&lt;/span&gt; be random vectors, with components &lt;span
class="math inline"&gt;\(Y_i(1),Y_i(0)\in \mathbb R\)&lt;/span&gt;,&lt;/li&gt;
&lt;li&gt;&lt;span class="math inline"&gt;\(\mathbf Z\)&lt;/span&gt; be a random vector
with components &lt;span class="math inline"&gt;\(Z_i \in \{0,1\}\)&lt;/span&gt;,
independent from &lt;span class="math inline"&gt;\(\mathbf Y(1)\)&lt;/span&gt; and
&lt;span class="math inline"&gt;\(\mathbf Y(0)\)&lt;/span&gt; above,&lt;/li&gt;
&lt;li&gt;&lt;span class="math inline"&gt;\(\mathbf Y = \mathbf Z\times \mathbf
Y(1)+(1-\mathbf Z)\times \mathbf Y(0)\)&lt;/span&gt; (multiplication is
component-wise).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Given a scalar function &lt;span class="math inline"&gt;\(t = t(\mathbf Z,
\,\mathbf Y)\in \mathbb R\)&lt;/span&gt;, define:&lt;/p&gt;
&lt;p&gt;&lt;span class="math display"&gt;\[
P(t,\mathbf Z, \mathbf Y)=\sum _{\mathbf Z &amp;#39;}\text{Pr}_\mathbf
Z(\mathbf Z&amp;#39;)\cdot I(t(\mathbf Z&amp;#39;,\mathbf Y)\geq t(\mathbf
Z,\mathbf Y)),
\]&lt;/span&gt; where &lt;span class="math inline"&gt;\(\text{Pr}_\mathbf
Z(\cdot)\)&lt;/span&gt; is the marginal distribution of treatment
assignments.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Theorem.&lt;/strong&gt; If &lt;span class="math inline"&gt;\(\mathbf Y(0)
= \mathbf Y(1)\)&lt;/span&gt; then:&lt;/p&gt;
&lt;p&gt;&lt;span class="math display"&gt;\[
\text{Pr}(P(t,\mathbf Z,\mathbf Y)\leq \alpha) \leq \alpha.
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Proof.&lt;/em&gt; Let &lt;span class="math inline"&gt;\(\mathbf
Z&amp;#39;\)&lt;/span&gt; be distributed according to &lt;span
class="math inline"&gt;\(\text{Pr}_\mathbf Z(\cdot)\)&lt;/span&gt;, and define
&lt;span class="math inline"&gt;\(\mathbf Y&amp;#39; = \mathbf Z&amp;#39;\times
\mathbf Y(1)+(1-\mathbf Z&amp;#39;)\times \mathbf Y(0)\)&lt;/span&gt;. Given &lt;span
class="math inline"&gt;\(t_0\in \mathbb R\)&lt;/span&gt;, we observe that:&lt;/p&gt;
&lt;p&gt;&lt;span class="math display"&gt;\[
\text {Pr}(t(\mathbf Z&amp;#39;,\mathbf Y&amp;#39;)\geq t_0 \,\vert\,\mathbf
Y(0),\,\mathbf Y(1)) = \sum _{\mathbf Z &amp;#39;}\text{Pr}_\mathbf
Z(\mathbf Z&amp;#39;)\cdot I(t(\mathbf Z&amp;#39;,\mathbf Y&amp;#39;)\geq t_0).
\]&lt;/span&gt; Now, if &lt;span class="math inline"&gt;\(\mathbf Y(0) = \mathbf
Y(1)\)&lt;/span&gt;, we have &lt;span class="math inline"&gt;\(t(\mathbf
Z&amp;#39;,\mathbf Y&amp;#39;) = t(\mathbf Z&amp;#39;,\mathbf Y)\)&lt;/span&gt;, so that
we may replace &lt;span class="math inline"&gt;\(\mathbf Y&amp;#39;\)&lt;/span&gt; with
&lt;span class="math inline"&gt;\(\mathbf Y\)&lt;/span&gt; in the RHS of the
previous equation. If, moreover, we choose &lt;span
class="math inline"&gt;\(t_0= t(\mathbf Z , \mathbf Y)\)&lt;/span&gt; we
obtain:&lt;/p&gt;
&lt;p&gt;&lt;span class="math display"&gt;\[
P(t, \mathbf Z, \mathbf Y) = \text {Pr}(t(\mathbf Z&amp;#39;,\mathbf
Y&amp;#39;)\geq t(\mathbf Z,\mathbf Y) \,\vert\,\mathbf Y(0),\mathbf Y(1)).
\]&lt;/span&gt; In other words, &lt;span class="math inline"&gt;\(P(t,\mathbf Z,
\mathbf Y)\)&lt;/span&gt; is a conditional &lt;span
class="math inline"&gt;\(p\)&lt;/span&gt;-value. Therefore:&lt;/p&gt;
&lt;p&gt;&lt;span class="math display"&gt;\[
\text{Pr}(P(t,\mathbf Z,\mathbf Y)\leq \alpha \,\vert\,\mathbf
Y(0),\mathbf Y(1)) \leq \alpha.
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Since this is valid for any value of &lt;span
class="math inline"&gt;\(\mathbf Y (0)\)&lt;/span&gt; and &lt;span
class="math inline"&gt;\(\mathbf Y(1)\)&lt;/span&gt;, the thesis follows.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;In the usual setting of causal inference, we interpret:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math inline"&gt;\(Z_i\)&lt;/span&gt; as the treatment assignment
for the &lt;span class="math inline"&gt;\(i\)&lt;/span&gt;-th statistical unit,
&lt;span class="math inline"&gt;\(Z_i = 0,1\)&lt;/span&gt; standing for “treatment”
and “control”, respectively.&lt;/li&gt;
&lt;li&gt;&lt;span class="math inline"&gt;\(Y_i(1)\)&lt;/span&gt; and &lt;span
class="math inline"&gt;\(Y_i(0)\)&lt;/span&gt; as the potential outcomes for the
&lt;span class="math inline"&gt;\(i\)&lt;/span&gt;-th unit under treatment and
control, respectively.&lt;/li&gt;
&lt;li&gt;&lt;span class="math inline"&gt;\(Y_i\)&lt;/span&gt; as the observed outcome for
the &lt;span class="math inline"&gt;\(i\)&lt;/span&gt;-th unit.&lt;/li&gt;
&lt;li&gt;&lt;span class="math inline"&gt;\(t(\cdot)\)&lt;/span&gt; as a test statistic
used to test the null hypothesis &lt;span class="math inline"&gt;\(\mathbf
Y(1)= \mathbf Y (0)\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;&lt;span class="math inline"&gt;\(P(t,\mathbf Z,\mathbf Y)\)&lt;/span&gt; is the
randomization &lt;span class="math inline"&gt;\(p\)&lt;/span&gt;-value of &lt;span
class="math inline"&gt;\(t(\mathbf Z, \mathbf Y)\)&lt;/span&gt; in a Fisher
Randomization Test.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Fisher’s “sharp” null hypothesis is an equality &lt;em&gt;between random
variables&lt;/em&gt;, the potential outcomes. Typical examples for the
distribution &lt;span class="math inline"&gt;\(\text{Pr}_\mathbf
Z(\cdot)\)&lt;/span&gt; are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Completely Randomized Experiment (CRE):&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class="math display"&gt;\[
\text{Pr}_\mathbf Z (\mathbf Z) = \begin{cases}
\binom N {n_1} ^{-1} &amp;amp; \sum _{i=1}^N Z_i =n_1, \\
0 &amp;amp; \text{otherwise.}
\end{cases}
\]&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bernoulli Randomized Experiment (BRE):&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class="math display"&gt;\[
\text{Pr}_\mathbf Z (\mathbf Z) = \prod _{i=1} ^N
\pi^{Z_i}(1-\pi)^{1-Z_i}.
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;An example of test statistic is the difference in means between the
treatment and control group, that can be written:&lt;/p&gt;
&lt;p&gt;&lt;span class="math display"&gt;\[
t(\mathbf Z , \mathbf Y) = \sum_i c_i Y_i,\qquad c_i=\frac{Z_i}{\sum
_iZ_i} - \frac{1-Z_i}{\sum _i(1-Z_i)}.
\]&lt;/span&gt;&lt;/p&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</description>
      <distill:md5>f0cf5613ea5c3bf68737c38dea7c09a6</distill:md5>
      <category>Statistics</category>
      <category>Frequentist Methods</category>
      <category>Causal Inference</category>
      <guid>https://vgherard.github.io/posts/2023-06-07-fishers-randomization-test</guid>
      <pubDate>2023-06-07</pubDate>
    </item>
    <item>
      <title>p-values and measure theory</title>
      <dc:creator>vgherard</dc:creator>
      <link>https://vgherard.github.io/posts/p-values-and-measure-theory</link>
      <description>


&lt;p&gt;Let &lt;span class="math inline"&gt;\((\Omega, \mathcal E,
\text{Pr})\)&lt;/span&gt; be a probability space, where &lt;span
class="math inline"&gt;\(\Omega\)&lt;/span&gt; is the space of random outcomes,
&lt;span class="math inline"&gt;\(\mathcal E\)&lt;/span&gt; the &lt;span
class="math inline"&gt;\(\sigma\)&lt;/span&gt;-algebra of measurable events, and
&lt;span class="math inline"&gt;\(P\)&lt;/span&gt; the probability measure.&lt;/p&gt;
&lt;p&gt;Given a random variable &lt;span class="math inline"&gt;\(T\colon \Omega
\to \mathbb R\)&lt;/span&gt;, define &lt;span class="math inline"&gt;\(p_T\colon
\Omega \to \left[0,1\right]\)&lt;/span&gt; as:&lt;/p&gt;
&lt;p&gt;&lt;span class="math display"&gt;\[
p_T(\omega) = \text{Pr}(\{\omega&amp;#39;\in \Omega\,\vert\,
T(\omega&amp;#39;)\geq T(\omega)\})
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Theorem.&lt;/strong&gt; &lt;span class="math inline"&gt;\(p_T\)&lt;/span&gt; is
measurable and &lt;span class="math inline"&gt;\(\text{Pr}(p_T\leq \alpha)
\leq \alpha\)&lt;/span&gt; for all &lt;span class="math inline"&gt;\(\alpha \in
\left[0,1\right]\)&lt;/span&gt;. Equality holds if and only if there exists a
sequence &lt;span class="math inline"&gt;\(\{\omega_n\}_{n\in \mathbb
N}\)&lt;/span&gt; such that &lt;span class="math inline"&gt;\(p_T(\omega_n) \leq
\alpha\)&lt;/span&gt;, and &lt;span class="math inline"&gt;\(p_T(\omega _n)\to
\alpha\)&lt;/span&gt; as &lt;span class="math inline"&gt;\(n \to
\infty\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Proof.&lt;/em&gt; Let &lt;span
class="math inline"&gt;\(\alpha\in\left[0,1\right]\)&lt;/span&gt;, and denote:
&lt;span class="math display"&gt;\[
E_T(\omega) = \{\omega&amp;#39;\in \Omega\,\vert\, T(\omega&amp;#39;)\geq
T(\omega)\},
\]&lt;/span&gt; so that &lt;span class="math inline"&gt;\(p_T(\omega) =
\text{Pr}(E_T(\omega))\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Assume first that there exists &lt;span
class="math inline"&gt;\(\omega_\alpha \in p_T^{-1}(\alpha)\)&lt;/span&gt;, that
is to say &lt;span class="math inline"&gt;\(\text{Pr}(E_T(\omega)) =
\alpha\)&lt;/span&gt;. We can show that:&lt;/p&gt;
&lt;p&gt;&lt;span class="math display"&gt;\[
N_T(\omega_\alpha) = \{\omega \vert p_T(\omega) \leq \alpha\} \backslash
E_T(\omega_\alpha)
\]&lt;/span&gt; is a measurable, zero probability set, which proves the thesis
for this particular case. As a matter of fact, for any &lt;span
class="math inline"&gt;\(\omega \in \Omega\)&lt;/span&gt;, if &lt;span
class="math inline"&gt;\(p_T(\omega)\leq \alpha\)&lt;/span&gt; and &lt;span
class="math inline"&gt;\(T(\omega) &amp;lt;T(\omega_\alpha)\)&lt;/span&gt;, then we
must have:&lt;/p&gt;
&lt;p&gt;&lt;span class="math display"&gt;\[
\text{Pr}(\{\omega&amp;#39;\in \Omega\,\vert\,
                                                                T(\omega_\alpha)&amp;gt;T(\omega&amp;#39;)\geq
T(\omega)\}
                                                                ) =
p_T(\omega) - \alpha=0.
\]&lt;/span&gt; If &lt;span class="math inline"&gt;\(t_* = \inf_{p_T(\omega)\leq
\alpha}T(\omega)\)&lt;/span&gt; and &lt;span class="math inline"&gt;\(\{a _n\}_{n
\in \mathbb N}\)&lt;/span&gt; is a sequence in &lt;span
class="math inline"&gt;\(\Omega\)&lt;/span&gt; such that &lt;span
class="math inline"&gt;\(T(a _n)\to t_*\)&lt;/span&gt; as &lt;span
class="math inline"&gt;\(n\to \infty\)&lt;/span&gt;, then:&lt;/p&gt;
&lt;p&gt;&lt;span class="math display"&gt;\[
N_T(\omega _\alpha) \subseteq \cup _n \{\omega&amp;#39;\in \Omega\,\vert\,
                                                                T(\omega_\alpha)&amp;gt;T(\omega&amp;#39;)\geq
T(a_n)\},
\]&lt;/span&gt; the right hand side being a probability zero set.&lt;/p&gt;
&lt;p&gt;If &lt;span class="math inline"&gt;\(p_T^{-1}(\alpha)\)&lt;/span&gt; is empty,
let &lt;span class="math inline"&gt;\(\alpha^* = \sup _{p_T(\omega)\leq
\alpha}p(\omega)\)&lt;/span&gt;, and let &lt;span class="math inline"&gt;\(\{b
_n\}_{n\in \mathbb N}\)&lt;/span&gt; be a sequence in &lt;span
class="math inline"&gt;\(\Omega\)&lt;/span&gt; such that &lt;span
class="math inline"&gt;\(p_T(b_n)\to \alpha^*\)&lt;/span&gt; as &lt;span
class="math inline"&gt;\(n\to \infty\)&lt;/span&gt;. Then:&lt;/p&gt;
&lt;p&gt;&lt;span class="math display"&gt;\[
\{\omega \vert p_T(\omega) \leq \alpha\}=
\{\omega \vert p_T(\omega) \leq \alpha^*\}=
\cup _n \{\omega \vert p_T(\omega) \leq p_T(b_n)\},
\]&lt;/span&gt; so that, from the particular case proved earlier, we have:&lt;/p&gt;
&lt;p&gt;&lt;span class="math display"&gt;\[
\text{Pr}(p_T \leq \alpha) = \lim _{n \to \infty} \text{Pr}(p_T \leq
p_T(b_n)) \leq \lim _{n \to \infty} p_T(b_n) = \alpha ^* \leq \alpha,
\]&lt;/span&gt; as was to be proved.&lt;/p&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</description>
      <distill:md5>59f780cb2829e8a6622ca805a037e6f3</distill:md5>
      <category>Statistics</category>
      <category>Measure Theory</category>
      <category>Frequentist Methods</category>
      <guid>https://vgherard.github.io/posts/p-values-and-measure-theory</guid>
      <pubDate>2023-06-06</pubDate>
    </item>
    <item>
      <title>Linear regression with autocorrelated noise</title>
      <dc:creator>vgherard</dc:creator>
      <link>https://vgherard.github.io/posts/2023-05-20-linear-regression-with-autocorrelated-noise</link>
      <description>Effects of noise autocorrelation on linear regression. Explicit formulae and a simple simulation.</description>
      <category>Statistics</category>
      <category>Regression</category>
      <category>Time Series</category>
      <category>Linear Models</category>
      <category>Model Misspecification</category>
      <category>R</category>
      <guid>https://vgherard.github.io/posts/2023-05-20-linear-regression-with-autocorrelated-noise</guid>
      <pubDate>2023-05-25</pubDate>
      <media:content url="https://vgherard.github.io/posts/2023-05-20-linear-regression-with-autocorrelated-noise/linear-regression-with-autocorrelated-noise_files/figure-html5/unnamed-chunk-2-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>Model Misspecification and Linear Sandwiches</title>
      <dc:creator>vgherard</dc:creator>
      <link>https://vgherard.github.io/posts/2023-05-14-model-misspecification-and-linear-sandwiches</link>
      <description>Being wrong in the right way. With R excerpts.</description>
      <category>Statistics</category>
      <category>Regression</category>
      <category>Linear Models</category>
      <category>Model Misspecification</category>
      <category>R</category>
      <guid>https://vgherard.github.io/posts/2023-05-14-model-misspecification-and-linear-sandwiches</guid>
      <pubDate>2023-05-14</pubDate>
      <media:content url="https://vgherard.github.io/posts/2023-05-14-model-misspecification-and-linear-sandwiches/misspecification-and-linear-sandwiches_files/figure-html5/unnamed-chunk-7-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>Consistency and bias of OLS estimators</title>
      <dc:creator>vgherard</dc:creator>
      <link>https://vgherard.github.io/posts/2023-05-12-consistency-and-bias-of-ols-estimators</link>
      <description>OLS estimators are consistent but generally biased - here's an example.</description>
      <category>Statistics</category>
      <category>Regression</category>
      <category>Linear Models</category>
      <category>Model Misspecification</category>
      <guid>https://vgherard.github.io/posts/2023-05-12-consistency-and-bias-of-ols-estimators</guid>
      <pubDate>2023-05-12</pubDate>
    </item>
    <item>
      <title>Bayes, Neyman and the Magic Piggy Bank</title>
      <dc:creator>vgherard</dc:creator>
      <link>https://vgherard.github.io/posts/2023-05-01-magic-piggy-bank</link>
      <description>Compares frequentist properties of credible intervals and confidence 
intervals in a gambling game involving a magic piggy bank.</description>
      <category>Statistics</category>
      <category>Confidence Intervals</category>
      <category>Frequentist Methods</category>
      <category>Bayesian Methods</category>
      <guid>https://vgherard.github.io/posts/2023-05-01-magic-piggy-bank</guid>
      <pubDate>2023-05-01</pubDate>
    </item>
    <item>
      <title>Correlation Without Causation</title>
      <dc:creator>vgherard</dc:creator>
      <link>https://vgherard.github.io/posts/2023-03-10-correlation-without-causation</link>
      <description>*Cum hoc ergo propter hoc*</description>
      <category>Statistics</category>
      <guid>https://vgherard.github.io/posts/2023-03-10-correlation-without-causation</guid>
      <pubDate>2023-03-30</pubDate>
    </item>
    <item>
      <title>How to get away with selection. Part II: Mathematical Framework</title>
      <dc:creator>vgherard</dc:creator>
      <link>https://vgherard.github.io/posts/2022-11-07-posi-2</link>
      <description>Mathematicals details on Selective Inference, model misspecification and coverage guarantees.</description>
      <category>Statistics</category>
      <category>Selective Inference</category>
      <category>Model Misspecification</category>
      <guid>https://vgherard.github.io/posts/2022-11-07-posi-2</guid>
      <pubDate>2022-11-25</pubDate>
    </item>
    <item>
      <title>How to get away with selection. Part I: Introduction</title>
      <dc:creator>vgherard</dc:creator>
      <link>https://vgherard.github.io/posts/2022-10-18-posi</link>
      <description>Introducing the problem of Selective Inference, illustrated through a simple simulation in R.</description>
      <category>Statistics</category>
      <category>Selective Inference</category>
      <category>R</category>
      <guid>https://vgherard.github.io/posts/2022-10-18-posi</guid>
      <pubDate>2022-11-14</pubDate>
      <media:content url="https://vgherard.github.io/posts/2022-10-18-posi/posi_files/figure-html5/unnamed-chunk-3-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>kgrams v0.1.2 on CRAN</title>
      <dc:creator>vgherard</dc:creator>
      <link>https://vgherard.github.io/posts/2021-11-13-kgrams-v012-released</link>
      <description>kgrams: Classical k-gram Language Models in R.</description>
      <category>Natural Language Processing</category>
      <category>R</category>
      <guid>https://vgherard.github.io/posts/2021-11-13-kgrams-v012-released</guid>
      <pubDate>2021-11-13</pubDate>
    </item>
    <item>
      <title>R Client for R-universe APIs</title>
      <dc:creator>vgherard</dc:creator>
      <link>https://vgherard.github.io/posts/2021-07-25-r-client-for-r-universe-apis</link>
      <description>Introducing W.I.P. {runiv}, an R package to interact with R-universe 
repository APIs</description>
      <category>R</category>
      <guid>https://vgherard.github.io/posts/2021-07-25-r-client-for-r-universe-apis</guid>
      <pubDate>2021-07-25</pubDate>
    </item>
    <item>
      <title>Automatic resumes of your R-developer portfolio from your R-Universe</title>
      <dc:creator>vgherard</dc:creator>
      <link>https://vgherard.github.io/posts/2021-07-21-automatically-resume-your-r-package-portfolio-using-the-r-universe-api</link>
      <description>Create automatic resumes of your R packages using the R-Universe API.</description>
      <category>R</category>
      <guid>https://vgherard.github.io/posts/2021-07-21-automatically-resume-your-r-package-portfolio-using-the-r-universe-api</guid>
      <pubDate>2021-07-21</pubDate>
    </item>
    <item>
      <title>{r2r} now on CRAN</title>
      <dc:creator>vgherard</dc:creator>
      <link>https://vgherard.github.io/posts/2021-07-06-r2r</link>
      <description>Introducing {r2r}, an R implementation of hash tables.</description>
      <category>Data Structures</category>
      <category>R</category>
      <guid>https://vgherard.github.io/posts/2021-07-06-r2r</guid>
      <pubDate>2021-07-06</pubDate>
    </item>
    <item>
      <title>Test post</title>
      <dc:creator>vgherard</dc:creator>
      <link>https://vgherard.github.io/posts/2021-07-06-test-post</link>
      <description>A short description of the post.</description>
      <category>Other</category>
      <guid>https://vgherard.github.io/posts/2021-07-06-test-post</guid>
      <pubDate>2021-07-06</pubDate>
    </item>
  </channel>
</rss>
