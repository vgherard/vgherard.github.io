[
  {
    "path": "posts/2024-02-29-on-the-first-and-second-laws-of-thermodynamics-for-open-systems/",
    "title": "On the first and second laws of thermodynamics for open systems",
    "description": "Matter transfer in open systems changes the relationship between heat and entropy, and work and volume.",
    "author": [
      {
        "name": "Valerio Gherardi",
        "url": "https://vgherard.github.io"
      }
    ],
    "date": "2024-03-04",
    "categories": [
      "Open Systems",
      "Thermodynamics",
      "Physics"
    ],
    "contents": "\r\nThe first and second laws of thermodynamics for closed systems are commonly expressed as:\r\n\\[\r\n\\text{d}U -\\delta W= \\delta Q \\leq T'\\,\\text dS \\qquad\\text{[closed system]}\\tag{1},\r\n\\]\r\nwhere \\(U\\), and \\(S\\) denote the internal energy and entropy of the system, \\(T'\\) is the temperature of the heat source, and \\(\\delta W\\) and \\(\\delta Q\\) are the amounts of energy transferred to the system in the form of heat and work, respectively. For concreteness, I will focus on volume work \\(\\delta W = -p\\,\\text d V\\) and reversible processes, so that the equal sign in Eq. (1) holds with the temperature of the source \\(T'\\) being equal to \\(T\\), the temperature of the system. Eqs. (1) then imply the single equation:\r\n\\[\r\n\\text d U = T\\,\\text d S - p \\,\\text d V\\qquad\\text{[closed system]}\\tag{2},\r\n\\]\r\nfrom which we can identify:\r\n\\[\r\n\\left(\\frac{\\partial U}{\\partial S}\\right)_{V,N} = T, \\quad \\left(\\frac{\\partial U}{\\partial V}\\right)_{S,N} = -p \\tag{3}\r\n\\]\r\nIn the previous equation, \\(N\\) represents the quantity of matter (say number of moles) in the system. The suffixes indicate that the partial derivatives are taken at constant \\(N\\), which may look trivial for closed systems. In open systems, however, \\(N\\) can vary due to matter exchanges with the surrounding, so that the internal energy \\(U = U(S,V,N)\\) is also a function of \\(N\\), and this dependence defines the chemical potential:\r\n\\[\r\n\\mu \\equiv \\left(\\frac{\\partial U}{\\partial N}\\right)_{S,V}\\tag{4}.\r\n\\]\r\nPutting this together with Eqs. (3), we obtain a generalization of Eq. (2) for an open system:\r\n\\[\r\n\\text d U = T\\text d S - p \\text d V + \\mu \\text dN.\\tag{5}\r\n\\]\r\nOne should realize that this equation represents, at the present stage, no more than a mathematical definition of the partial derivatives of \\(U\\). In order to attach some physical content to it, we should connect the various terms appearing in Eq. (5) with operatively defined quantities.\r\nTo appreciate this point, let us make a step back to the closed system case, and examine the physical content of the first two laws of thermodynamics. For a closed system we have the relations \\(\\delta W = - p\\,\\text dV\\) and \\(\\delta Q = T\\,\\text d S\\). It is important to realize that \\(\\delta W\\) and \\(\\delta Q\\) have independent operative definitions: \\(\\delta W\\) is defined as the work performed by external forces during the process considered, whereas \\(\\delta Q\\) is defined as the difference \\(\\delta Q=\\text d U - \\delta W\\). It is in light of these operative definitions that the laws of thermodynamics acquire physical content1.\r\nIn order to establish a similar physical interpretation for the open system case, let us decompose the change in internal energy as follows:\r\n\\[\r\n\\text d U = \\delta Q + \\delta W + \\delta X.\\tag{6}\r\n\\]\r\nHere the first two terms correspond to heat and work, as before, while the new term \\(\\delta X\\) accounts for energy exchange due to matter transfer. Comparing Eqs. (6) and (5), and given the expressions of \\(\\delta Q\\) and \\(\\delta W\\) in the closed system case, it is tempting to conclude that:\r\n\\[\r\n\\delta Q \\overset{?}{=} T \\text d S,\\quad \\delta W \\overset{?}{=}-p\\text d V,\\quad\r\n\\delta X \\overset{?}{=} \\mu \\text d N, \\tag{7}\r\n\\]\r\nbut these identifications are easily seen to be wrong.\r\nBefore discussing the correct version of Eqs. (7), let us comment why these identifications can be dangerously misleading. Consider a gas enclosed by rigid and thermally insulating walls, so that no energy exchange with the exterior in the form of heat is possible and, since volume is constant, also no work is possible (according to (7)). Suppose now that we have some mechanism to inject a number \\(\\delta N\\) of additional particles into the system. Due to what was said above, we would be lead to conclude that the corresponding variation of internal energy should be \\(\\text{d}U \\overset{?}{=} \\mu \\text d N\\), which is incorrect (the correct answer is discussed below).\r\nThe physical reason why Eqs. (7) are wrong is that exchanged matter also carries an amount \\(\\text{d}S^{\\text{(e)}} = s\\,\\text dN\\) of entropy and has a volume \\(\\text{d}V^{\\text{(e)}} = v\\,\\text dN\\), where \\(s\\) and \\(v\\) are the entropy and volume per particle of the external source of matter (\\(s = \\frac{S}{N}\\) and \\(v = \\frac{V}{N}\\) if the exchanged particles are in thermal equilibrium with the open system). This additional entropy and volume flows must be kept into account in the corresponding variations for opens system, that become:\r\n\\[\r\n\\text{d} S = \\frac{\\delta Q}{T}+s\\,\\text dN,\\quad -p\\text dV= \\delta W-p\\text dV^{\\text{(e)}},\\tag{8}\r\n\\]\r\nPlugging this into Eq. (5) and comparing with (6), we obtain:\r\n\\[\r\n\\delta Q =T \\text d S-Ts\\,\\text dN,\\quad \\delta W =-p\\text d V+p v\\text dN,\\quad\r\n\\delta X = u\\text d N,\\tag{9}\r\n\\]\r\nwhere \\(u \\equiv \\mu + Ts-pv\\) is the internal energy per particle (the chemical potential can be shown to be equal to the Gibbs energy per particle).\r\nThe meaning of (9) is best clarified with a few examples. Consider first a process which simply consists in bringing together two quantities \\(N\\) and \\(\\text d N\\) of gas molecules kept at the same temperature \\(T\\) and pressure \\(p\\). This amounts to a mere rescaling of the original system by a factor \\(\\lambda = (1+\\frac{\\text d N}{N})\\), so that all extensive quantities are simply scaled by this same factor:\r\n\\[\r\n\\text d S = s\\text dN=(\\lambda -1)S,\\quad \\text d V = v\\text dN= (\\lambda -1)V.\r\n\\]\r\nClearly, this process involves no energy exchange in the form of heat or work, and we see indeed from Eq. (9) that:\r\n\\[\r\n\\delta Q = \\delta W = 0,\\quad \\text d U = \\delta X = u \\text d N=(\\lambda - 1)U\r\n\\]\r\nHad we neglected the extra terms \\(-T\\text d S ^{\\text{(e)}}\\) and \\(+p\\text d V ^{\\text{(e)}}\\) in the equations for \\(\\delta Q\\) and \\(\\delta W\\), we would have concluded that the system has exchanged heat or performed work during such a null process.\r\nAs our second example, we consider a vapor-liquid phase transition. The vapor-liquid system, assumed to be in equilibrium, is enclosed in a cylinder with thermal conducting walls and surrounded by a medium at constant temperature \\(T\\). A piston on one extremity of the cylinder allows to condense vapor by compression.\r\nIf we consider either the vapor or liquid phases as open systems, in an isobaric and isothermal transformation in which a quantity \\(\\text d N\\) of vapor molecules is condensed, we have as in Eq. (9):\r\n\\[\r\n\\begin{split}\r\n\\text d U _i &= \\delta Q_i + \\delta W_i + \\delta X_i,\\\\\r\n\\delta Q_i &= T\\,\\text dS_i-T\\,s_i \\,\\text dN_i,\\\\\r\n\\delta W_i &=-p\\,\\text d V_i+p\\,v_i\\,\\text dN_i,\\\\\r\n\\delta X_i &= u_i\\,\\text dN_i,\r\n\\end{split}\r\n\\]\r\nwhere \\(i = \\text {l or v}\\) (denoting liquid or vapor), and \\(\\text dN_{\\text{l}} = -\\text dN_{\\text{v}} \\equiv \\text d N\\). But, since specific quantities at the phase transition only depend on temperature, which is held constant, the overall changes in entropy and volume are simply equal to the amounts due to matter transfer \\(\\text d S_i = s_i\\,\\text d N_i\\) and \\(\\text d V_i = v_i\\,\\text d N_i\\), which implies:\r\n\\[\r\n\\delta Q_i = \\delta W_i = 0,\\quad \\delta X_i =u_i\\,\\text dN_i.\r\n\\]\r\nThis is not unreasonable since, from the point of view of the open system, what is happening is simply that a quantity \\(\\text d N\\) of vapor or liquid (that was produced before, somehow), is getting transferred to the system. This is entirely analogous to the previous example, in which two chunks of identical substance were simply joined together.\r\nOn the other hand, the conventional approach to the same problem treats the vapor-liquid system as a closed system. For this system, we can directly relate the changes in entropy and volume to heat and work:\r\n\\[\r\n\\delta Q = T(s_\\text l-s_\\text v )\\text dN,\\quad\\delta W = -p(v_\\text l-v_\\text v )\\text dN, \\quad \\delta X=0,\r\n\\]\r\nwhich looks superficially different from the open system point of view.\r\nThere is no contradiction in the fact that \\(\\delta Q \\neq \\delta Q_1+\\delta Q _2\\) and \\(\\delta W \\neq \\delta W_1 + \\delta W_2\\), since the open and closed system points of view are describing the condensation process from a very different angle. In order to see this, let’s imagine breaking down the process as follows. Starting with our system with internal energy \\(U_0\\):\r\nWe separate an amount \\(\\text d N\\) of vapor from the rest of the system, leaving the system with energy \\(U_1 = U_0 - u_\\text{v}\\text dN\\).\r\nWe heat and compress the small portion \\(\\text{dN}\\) while keeping it at constant temperature and pressure, until it condenses completely. The energy transferred to the small mass is \\((u_\\text{l}-u_\\text{v})\\text d N\\), while the vapor-liquid system’s energy of course does not change, \\(U_2 = U_1\\).\r\nWe add the condensed liquid \\(\\text d N\\) back to the vapor-liquid system, whose energy becomes \\(U_3 = U_2 + u_\\text{l}\\text d N=U_0 + (u_\\text{l}-u_\\text{v})\\text dN\\)\r\nThe crucial observation is that the open system point of view is only describing steps 1 and 3, while the closed system only describes step 2. The fact that \\(U_3 - U_0 = (u_\\text{l}-u_\\text{v})\\text d N\\), implies that the two points of view lead to the same energy balance, as it should be. This can be easily verified:\r\n\\[\r\n\\begin{split}\r\n\\text d U &= \\delta Q + \\delta W\\\\\r\n&=[T\\text(s_\\text l-s_\\text v)-p(v_\\text l-v_\\text v)]\\text dN\\\\\r\n&=\\delta X_\\text l+ \\delta X_\\text v\\\\\r\n&= \\text dU_\\text l+ \\text d U_\\text v\r\n\\end{split}\r\n\\]\r\nwhere in the third equality we used the fact that \\(\\mu_\\text l = \\mu_\\text v\\) at the phase transition, so that \\(u_\\text l - u_\\text v = T\\text(s_\\text l-s_\\text v)-p(v_\\text l-v_\\text v)\\).\r\nAs a final note, let me mention that some references (especially from the engineering field) include the work required to transfer matter across the open system boundary in the definition of \\(\\delta X\\), which thus becomes proportional to the molar enthalpy \\(h = u + pv\\) (see e.g. (Knuiman, Barneveld, and Besseling 2012)). As a consequence, the external work performed on an open system simply reads \\(\\delta W = - p \\text d V\\), as in the closed system case. The reason why this could make sense is that if the “open system” is defined in terms of a (physical or imaginary) spatial boundary surface, which allows the flow of matter through some injection mechanism, one could be interested in the work resulting from the expansion of the boundary only - sometimes called shaft work, in contrast with the flow work \\(-p \\,\\text d V^{\\text{(e)}}\\) included in the enthalpy. In the way I see it, this leads to a cumbersome physical description in the context of the examples mentioned above.\r\n\r\n\r\n\r\nKnuiman, Jan T, Peter A Barneveld, and Nicolaas AM Besseling. 2012. “On the Relation Between the Fundamental Equation of Thermodynamics and the Energy Balance Equation in the Context of Closed and Open Systems.” Journal of Chemical Education 89 (8): 968–72.\r\n\r\n\r\nThe first law, in its essence, postulates the existence of certain experimental conditions (thermal insulation) under which the work required by any transformation of a thermodynamic system depends only on the initial and final states - allowing the definition of a state function \\(U\\), the internal energy. Similarly, the second law postulates the existence of a state function \\(S\\) that bounds the heat exchange with a source at temperature \\(T'\\) by \\(\\delta Q \\leq T' \\,\\text d S\\).↩︎\r\n",
    "preview": {},
    "last_modified": "2024-03-04T17:48:05+01:00",
    "input_file": "on-the-first-and-second-laws-of-thermodynamics-for-open-systems.knit.md"
  },
  {
    "path": "posts/2024-02-22-gravity-waves-in-an-ideal-fluid/",
    "title": "Gravity waves in an ideal fluid",
    "description": "Compares the \"parcel\" method with standard linearization of fluid dynamics equations.",
    "author": [
      {
        "name": "Valerio Gherardi",
        "url": "https://vgherard.github.io"
      }
    ],
    "date": "2024-02-22",
    "categories": [
      "Atmospheric Physics",
      "Fluid Dynamics",
      "Waves",
      "Physics"
    ],
    "contents": "\r\nIntro\r\nWe compare two derivations of the stability conditions for hydrostatic equilibrium of an ideal fluid:\r\nA “parcel” argument, that follows the motion of a small particle of fluid, ignoring the dynamics of the surroundings.\r\nStandard linearization of the ideal fluid equations.\r\nThe two derivations turn out to give the same answer, but the intermediate steps in the parcel argument contain some hidden assumptions, which are clarified in the second approach.\r\nThe parcel method\r\nWe start with a fluid at rest in a constant gravitational field \\(\\mathbf g = -g\\hat {\\mathbf z}\\), and consider a small portion of fluid initially located at height \\(z_0\\). We imagine that this parcel is now vertically displaced to height \\(z_1 = z_0 + \\delta z\\), and that no heat is transferred between the parcel and the surroundings during this process. We further assume that the pressure inside the parcel rapidly equalizes with the pressure outside of it (on a time scale much shorter than the one involved in the displacement). Finally, we assume that the whole process does not appreciably alter the pressure field \\(p\\) with respect to its equilibrium configuration, satisfying \\(\\frac{\\text d p}{\\text d z}= -\\rho g\\), where \\(\\rho\\) is the fluid’s density at rest. To anticipate, in the second derivation below, we will see that the last assumption may actually fail, giving rise to different dynamics than the one discussed in these Section.\r\nThe derivation below follows (Landau and Lifshitz 2013). The parcel’s acceleration in the vertical direction is given by Newton’s second law:\r\n\\[\r\n\\rho _\\text{p}\\ddot {\\delta z}=-\\rho _\\text{p}g-\\frac{\\text{d}p}{\\text{d}z}=-(\\rho _\\text{p}-\\rho)g,\\tag{1}\r\n\\]\r\nwhere the equilibrium assumption was used in the second equality, where \\(\\rho _\\text{p}\\) is the parcel’s density, while \\(\\rho\\) is the density of the surroundings evaluated at the parcel’s height \\(z_1=z_0 + \\delta z\\).\r\nUsing the thermodynamic state equation of the fluid, we can express densities in terms of pressure \\(p\\) and specific entropy \\(s\\). For the fluid density, this means:\r\n\\[\r\n\\rho = \\rho(p(z_1),\\,s(z_1)),\r\n\\]\r\nwhile for the parcel we have:\r\n\\[\r\n\\rho _\\text{p} = \\rho (p(z_1), s(z_0)),\r\n\\]\r\ndue to the fact that the process is adiabatic. Hence, expanding the right hand side of (1) to first order in \\(\\delta z\\), we obtain:\r\n\\[\r\n\\ddot {\\delta z} = -\\Omega  ^2 \\delta z,\\tag{2}\r\n\\]\r\nwhere:\r\n\\[\r\n\\Omega  ^2 \\equiv -\\dfrac{g}{\\rho}\\left(\\frac{\\partial \\rho }{\\partial s}\\right)_p\\frac{\\text d s}{\\text d z}=-\\dfrac{g}{\\rho}\\left(\\frac{\\partial \\rho }{\\partial s}\\right)_p\\frac{\\text d s}{\\text d z},\\tag{3}\r\n\\]\r\nis called the Brunt–Väisälä frequency, or buoyancy frequency (all quantities in this equation can be evaluated at \\(z = z_0\\) in the linear approximation we are considering). Equations (2) imply that, in order for hydrostatic equilibrium to be stable, we must have \\(\\Omega ^2 > 0\\), that is:\r\n\\[\r\n-\\left(\\frac{\\partial \\rho }{\\partial s}\\right)_p\\frac{\\text d s}{\\text d z} > 0\\tag{4}\r\n\\]\r\nThere are a few alternative ways to express (4) (Landau and Lifshitz 2013). First of all, using the Maxwell relation \\(\\left(\\frac{\\partial \\rho }{\\partial s}\\right)_p=\\frac{T}{c_p}\\left(\\frac{\\partial \\rho }{\\partial T}\\right)_p\\), we see that equilibrium requires:\r\n\\[\r\n-\\left(\\frac{\\partial \\rho }{\\partial T}\\right)_p\\frac{\\text d s}{\\text d z}>0.\\tag{5}\r\n\\]\r\nMoreover, assuming \\(\\left(\\frac{\\partial \\rho }{\\partial T}\\right)_p<0\\), this simplifies to:\r\n\\[\r\n\\frac{\\text d s}{\\text d z} >0\\tag{6}\r\n\\]\r\nConsidering \\(s\\) as a function of \\(p\\) and \\(T\\), we have:\r\n\\[\r\n\\frac{\\text d s}{\\text d z} = \\left(\\frac{\\partial s}{\\partial T}\\right)_p \\frac{\\text d T}{\\text d z}+\\left(\\frac{\\partial s}{\\partial p}\\right)_T \\frac{\\text d p}{\\text d z}=c_p \\frac{\\text d T}{\\text d z}+\\left(\\frac{\\partial V}{\\partial T}\\right)_p\\frac{\\text d p}{\\text d z}>0,\\tag{7}\r\n\\]\r\nwhere the Maxwell relation \\(\\left(\\frac{\\partial s}{\\partial p}\\right)_T=\\left(\\frac{\\partial V}{\\partial T}\\right)_p\\) and the definition of the specific heat at constant pressure \\(c_p \\equiv \\left(\\frac{\\partial s}{\\partial p}\\right)_T\\) were used. Finally, using again the equilibrium condition \\(\\frac{\\text d p}{\\text d z} = -g /V\\), we obtain\r\n\\[\r\n-\\frac{\\text d T}{\\text d z} < -\\frac{\\beta Tg}{\\rho c_p},\\tag{8}\r\n\\]\r\nwhere \\(\\beta \\equiv -\\frac{1}{\\rho}\\left(\\frac{\\partial \\rho}{\\partial T}\\right)_p\\) is the thermal expansion coefficient. For an ideal gas, the right hand side is just \\(\\frac{g}{c_p}\\).\r\nThe Brunt–Väisälä oscillation frequency (Eq. (3)) is actually correct only in a certain limit, which is best clarified in the more careful approach, that proceeds from the ideal fluid equations. Nonetheless, the equilibrium condition \\(\\Omega ^2 >0\\) turns out to be correct.\r\nLinearization of the ideal fluid equations\r\nIn fluid dynamics, our system would be described by the ideal fluid equations:\r\n\\[\r\n\\begin{split}\r\n\\frac {\\text D \\mathbf v}{\\text D t}&=-\\frac{\\nabla p}{\\rho }+\\mathbf g,\r\n\\\\\r\n\\frac{\\text D \\rho }{\\text D t} &=-\\rho (\\nabla \\cdot \\mathbf v),\r\n\\\\\r\n\\frac{\\text D s}{\\text D t}&=0,\r\n\\end{split} \\tag{9}\r\n\\]\r\nwhere \\(\\frac{\\text D}{\\text D t} = \\frac{\\partial}{\\partial t}+\\mathbf v \\cdot \\nabla\\) denotes the material derivative. The last equation can be exchanged for1:\r\n\\[\r\n\\frac{\\text{D}p}{\\text Dt}=c_s^2\\frac{\\text D \\rho}{\\text D t}\\tag{10}\r\n\\]\r\nwhere \\(c_s^2 \\equiv (\\frac{\\partial p}{\\partial \\rho})_s\\) is the speed of sound. Denoting by \\(p_0\\) and \\(\\rho_0\\) the pressure and density field of the hydrostatic solution, satisfying \\(\\nabla p _0 = \\mathbf g \\rho _0\\), we consider a perturbation of the form:\r\n\\[\r\n\\mathbf v = \\delta \\mathbf v,\\quad p=p_0+\\delta p,\\quad \\rho=\\rho_0+\\delta \\rho.\\tag{11}\r\n\\]\r\nTo linear order in the small quantities \\(\\delta \\mathbf v\\), \\(\\delta p\\) and \\(\\delta \\rho\\), the equations of motion read:\r\n\\[\r\n\\begin{split}\r\n0 &=-\\frac {\\partial  \\delta \\mathbf v}{\\partial t}-\\frac{\\nabla (\\delta p)}{\\rho _0}+\\mathbf g\\frac{\\delta \\rho }{\\rho _0},\r\n\\\\\r\n0 &=\\frac{\\partial (\\delta \\rho) }{\\partial t}+\\delta\\mathbf v \\cdot \\nabla \\rho _0+\\rho_0 (\\nabla \\cdot \\delta \\mathbf v) ,\r\n\\\\\r\n0&=\\frac{\\partial (\\delta p )}{\\partial t}+\\delta \\mathbf v \\cdot \\nabla p_0-c_s^2\\frac{\\partial (\\delta \\rho )}{\\partial t}-c_s^2\\mathbf \\delta \\mathbf v \\cdot \\nabla \\rho_0.\r\n\\end{split} \\tag{12}\r\n\\]\r\nThese equations take a rather simple form if we re-express them in terms of the mass flux density \\(\\mathbf j = \\rho \\mathbf v\\), that is \\(\\delta \\mathbf j = \\rho _0 \\delta \\mathbf v\\) to linear order. Before doing so, we notice that:\r\n\\[\r\n\\nabla \\rho_0=(\\frac {\\partial \\rho}{\\partial p})_s\\nabla p_0+(\\frac {\\partial \\rho}{\\partial s})_p\\nabla s=-(\\frac{g}{c_s^2} +\\frac{\\Omega ^2}{g}) \\rho_0 \\hat {\\mathbf z},\\tag{13}\r\n\\]\r\nwhere \\(\\Omega ^2\\) is the buoyancy frequency defined above (cf. (3)) and we assume, consistent with cylindrical\r\nsymmetry, \\(\\nabla s\\) to lie in the \\(\\hat {\\mathbf z}\\)2. Putting everything together, we obtain:\r\n\\[\r\n\\begin{split}\r\n0 &=-\\frac {\\partial (\\delta \\mathbf j)}{\\partial t}-\\nabla (\\delta p)+\\mathbf g\\delta \\rho,\r\n\\\\\r\n0 &=\\frac{\\partial (\\delta \\rho) }{\\partial t}+\\nabla \\cdot (\\delta\\mathbf j) ,\r\n\\\\\r\n0&=\\frac{\\partial (\\delta p )}{\\partial t}+c_s^2\\nabla \\cdot  (\\delta \\mathbf j)+\\frac{c_s^2\\Omega ^2}{g}(\\delta \\mathbf j) \\cdot  \\hat {\\mathbf z}.\r\n\\end{split}\\tag{14}\r\n\\]\r\nStrictly speaking, the quantities \\(c_s^2\\) and \\(\\Omega ^2\\) appearing in this equation are scalar fields with a non-trivial spatial variation. However, assuming that the spatial scale of the perturbation is much smaller than the typical scale of variation of \\(\\Omega ^2\\) and \\(c_s^2\\), we can treat these two numbers as constants. For simplicity, we will work with units such that \\(c_s = g = 1\\) (this is the same as using \\(L=c_s^2g^{-1}\\) and \\(T = c_sg^{-1}\\) as units of time and length, respectively; the dependence from \\(c_s\\) and \\(g\\) can be reintroduced in the final formulas through dimensional analysis).\r\nThe system becomes then a linear system with constant coefficients, which suggests to search for simple solutions of the form:\r\n\\[\r\n\\mathbf j = \\mathbf u e^{i(\\omega t-\\mathbf q  \\cdot \\mathbf r)},\\quad \\mathbf \\delta \\rho = \\alpha e^{i(\\omega t-\\mathbf q  \\cdot \\mathbf r)},\\quad\\delta p = \\beta e^{i(\\omega t-\\mathbf q  \\cdot \\mathbf r)}.\r\n\\]\r\nPlugging these into the linearized system, we obtain:\r\n\\[\r\n\\begin{split}\r\n0 &=-i\\omega \\mathbf u+i\\mathbf q \\beta -\\hat {\\mathbf z}\\alpha,\r\n\\\\\r\n0 &=i\\omega \\alpha-i\\mathbf q \\cdot \\mathbf u ,\r\n\\\\\r\n0&=i\\omega \\beta +\\Omega ^2\\mathbf u \\cdot \\hat{\\mathbf z}-i\\mathbf q \\cdot \\mathbf u,\r\n\\end{split}\\tag{15}\r\n\\]\r\nIn order to solve these equations, we write:\r\n\\[\r\n\\mathbf q = q_z \\hat {\\mathbf z}+q_\\perp \\hat {\\mathbf x}.\r\n\\]\r\nFrom the first equation we obtain:\r\n\\[\r\n\\mathbf u \\cdot \\hat {\\mathbf x} = \\frac{\\beta q_\\perp}{\\omega},\\quad \\mathbf u \\cdot \\hat{\\mathbf y} = 0, \\quad\r\n\\mathbf u \\cdot \\hat {\\mathbf z} = \\frac{\\beta q_z+i\\alpha }{\\omega}.\r\n\\]\r\nThe second equation then yields:\r\n\\[\r\n\\dfrac{\\alpha}{\\beta}=\\dfrac {\\mathbf q^2}{\\omega ^2 -i q_z}\r\n\\]\r\nFinally, from the third equation we obtain:\r\n\\[\r\n0 =\\omega ^4 -\\omega ^2 [i(1+\\Omega ^2) q_z+\\mathbf q^2]+q_\\perp ^2\\Omega ^2\r\n\\]\r\nWe now require \\(\\mathbf q\\) to have an imaginary part \\(\\text {Im}(\\mathbf q) = -\\frac{1+\\Omega ^2}{2}\\hat {\\mathbf z}\\), as we rigorously justify below. Under this assumption, the equation for \\(\\omega ^2\\) has two real roots:\r\n\\[\r\n\\omega ^2_\\pm = \\frac {c_s^2 (\\mathbf k ^2+\\lambda^{-2})}{2}\\left(1\\pm \\sqrt {1-\\dfrac{4\\Omega ^2k_\\perp^2}{c_s^2 (\\mathbf k ^2+\\lambda^{-2})^2}}\\right),\\tag{16}\r\n\\]\r\nwith:\r\n\\[\r\n\\mathbf k = \\text{Re}(\\mathbf q),\\qquad  \\lambda^{-1}\\equiv \\frac{1}{2}( \\frac{g}{c_s^2} +\\frac{\\Omega ^2}{g})\\tag{17}\r\n\\]\r\n(\\(g\\) and \\(c_s\\) have been reintroduced in these formulas as explained above).\r\nBefore proceeding further, we notice that the frequencies \\(\\omega _-\\) (those from the minus sign branch in Eq. (16)) are real if and only if \\(\\Omega ^2 > 0\\), which is the same as the equilibrium condition derived from the parcel argument. The actual frequencies of oscillation are not given by \\(\\Omega\\), in general.\r\nPhysical interpretation\r\nIn order to understand the two branches of Eq. (16), we start by noticing that, for the whole linearization approach to be valid, we must have (in natural units \\(g=c_s=1\\)):\r\n\\[\r\n\\dfrac{4\\Omega ^2k_\\perp^2}{(\\mathbf k ^2+\\lambda^{-2})^2} \\ll 1,\\tag{18}\r\n\\]\r\nThis must be the case for the perturbation to be localized in the \\(\\hat {\\mathbf z}\\) direction, which requires \\(k_z \\gg 1\\) (notice that \\(\\Omega, \\lambda \\sim \\mathcal O(1)\\) in natural units).\r\nAssuming (18), we can approximate the two roots in Eq. (16) as follows:\r\n\\[\r\n\\omega ^2_+ \\approx\\mathbf k ^2,\\qquad\\omega ^2_- \\approx \\frac{ k_\\perp ^2}{k_z^2+k_\\perp ^2}\\Omega ^2. \\tag{19}\r\n\\]\r\nWe also notice that the fluid velocity field satisfies (without any approximation):\r\n\\[\r\n\\frac{v_z}{v_\\perp} = \\frac{k_z}{k_\\perp}\\left(\\dfrac{1+i\\frac{k_\\perp^2}{k_z\\omega^2}-i\\frac{1+\\Omega ^2}{2k_z}}{1-i\\frac{k_z}{\\omega^2}-\\frac{1+\\Omega ^2}{2\\omega^2}}\\right)\r\n\\]\r\nLet us first consider waves associated with \\(\\omega _+\\), which are essentially sound waves and for which gravity plays very little role. These have both phase and group velocity aligned with \\(\\mathbf k\\) and close to \\(1\\) (the speed of sound), and the fluid velocity is also in the direction of \\(\\mathbf k\\) (the waves are longitudinal):\r\n\\[\r\n\\frac{v_z}{v_\\perp}\\approx \\frac{k_z}{k_\\perp },\r\n\\]\r\nIn contrast, waves associated with \\(\\omega _{-}\\), called gravity waves, have vanishing phase and group velocity in the limit \\(k_z \\to \\infty\\), in general. The material velocity is perpendicular to \\(\\mathbf k\\):\r\n\\[\r\n\\frac{v_z}{v_\\perp}\\approx -\\frac{k_\\perp}{k_z },\r\n\\]\r\nThe wave frequency depends on the angle \\(\\theta\\) between \\(k\\) and \\(\\mathbf g\\), since \\(\\omega _{-}^2 = \\sin^2 \\theta \\cdot \\Omega ^2\\). In particular, in the limit of plane waves in the \\(\\hat {\\mathbf z}\\) direction, i.e. \\(\\theta \\to 0\\), we have \\(\\omega _{-}^2 \\to 0\\), while plane waves orthogonal to gravity \\(\\theta \\to \\frac{\\pi}{2}\\) have frequency \\(\\omega _{-}^2 \\approx \\Omega ^2\\). From the physical point of view, these two limits correspond to the cases in which the horizontal spatial scale of the perturbation is much larger/smaller than the vertical scale, respectively.\r\nWe realize that the kind of perturbation analysed in the parcel argument implicitly refers to gravity waves of the second type (with small horizontal scales). From (19), we see that the oscillation frequency coincides with the buoyancy frequency (3) only if \\(k _\\perp \\gg k_z\\), that is, if the vertical spatial scale of the perturbation is much larger than its horizontal scale.\r\nMathematical details on the wave solution\r\nIn order to justify the procedure used in the derivation of the plane waves solutions, consider a localized perturbation (say with compact support) at \\(t = 0\\) and let \\(\\Psi(t=0)\\) denote the vector of quantities \\(\\delta \\rho(t=0)\\), \\(\\delta p (t=0)\\) and \\(\\delta \\mathbf j (t=0)\\). Since \\(\\Psi(t=0)\\) is localized, we can define:\r\n\\[\r\n\\widetilde \\Psi(\\mathbf k,t=0)=\\intop \\text d ^3 \\mathbf r \\,e^{i\\mathbf k \\cdot \\mathbf r} e^{z/\\lambda} \\Psi(\\mathbf r, t=0)\\tag{20}\r\n\\]\r\nand the inverse of the Fourier transform gives:\r\n\\[\r\n\\Psi(\\mathbf r, t=0) = e^{-z/\\lambda}\\intop  \\frac{\\text d ^3\\mathbf k}{(2\\pi)^3} e^{-i\\mathbf k \\cdot \\mathbf r}\\widetilde \\Psi(\\mathbf k,t=0).\\tag{21}\r\n\\]\r\nThe Fourier components \\(\\widetilde \\Psi (\\mathbf k, t)\\) for a fixed \\(\\mathbf k\\)\r\nsatisfy a linear system of ordinary differential equations, for which we already found four independent solutions (two for each frequency) in the previous Section. The fifth solution can be easily verified to correspond to a static, divergence-less velocity perturbation, with the velocity field orthogonal to the \\(\\hat {\\mathbf z}\\) axis:\r\n\\[\r\n\\widetilde {\\delta \\mathbf j}(\\mathbf k ,t) = f(\\mathbf k) \\,{\\mathbf k} \\times \\mathbf g,\\qquad \\widetilde {\\delta p}=0\\qquad\\widetilde {\\delta \\rho} = 0\\tag{22}\r\n\\]\r\nIn momentum space, in the basis provided by the four eigenvectors\r\nwith eigenvalues given by (16), plus this last (static) solution, time evolution is trivial.\r\nAs a parenthetical remark, we notice that if we drop the requirement of a localized perturbation, we can have additional solutions that are not covered by the previous remarks. A trivial example is that of an hydrostatic equations - \\(\\nabla p = \\mathbf g \\rho\\), with \\(\\delta \\mathbf j = \\mathbf 0\\), all fields being independent of time. These solutions are clearly not localized, since the pressure field changes only in the \\(\\hat {\\mathbf z }\\) direction. Another example is provided by Lamb waves, that satisfy the constraint:\r\n\\[\r\n\\delta \\mathbf j \\cdot \\hat {\\mathbf z} = 0\r\n\\]\r\nand take the general form:\r\n\\[\r\n\\Psi(\\mathbf r,t) = e^{-(\\frac{\\Omega ^2}{g}-\\frac{g}{c_s^2})z}\\intop \\frac{\\text d ^2 \\mathbf k _\\perp}{(2\\pi)^2} e^{-i\\mathbf k _\\perp \\cdot \\mathbf r}  \\left[a(\\mathbf k _\\perp)e^{i kc_st}+b(\\mathbf k _\\perp)e^{-i kc_st}\\right].\\tag{23}\r\n\\]\r\nThese waves are clearly not localized in the \\(\\hat {\\mathbf z}\\) direction.\r\nFurther problems\r\nThis is the point where I felt the algebra was getting a bit too involved and I left the problem. There are still a few things that it may be interesting to investigate. In particular, it would be nice to derive the explicit evolution of a wave packet, say:\r\n\\[\r\n\\delta \\mathbf v (\\mathbf r, 0) = \\mathbf V \\exp\\left[{-\\frac{x^2+y^2}{2\\sigma _\\perp^2}-\\frac{z^2}{2\\sigma _z^2}}\\right].\r\n\\]\r\nwith vanishing density and pressure perturbation (to simplify the algebra a little bit). One should compute the “modified” Fourier transform (20) and express the coefficients in terms of the five eigenvectors derived above. Perturbations like this will in general give rise to a combination of acoustic and longitudinal waves, depending on the direction of \\(\\mathbf V\\) and on the ratio of vertical and horizontal scales, \\(\\sigma _z\\) and \\(\\sigma _\\perp\\).\r\n\r\n\r\n\r\nLandau, Lev Davidovich, and Evgenii Mikhailovich Lifshitz. 2013. Fluid Mechanics: Landau and Lifshitz: Course of Theoretical Physics, Volume 6. Vol. 6. Elsevier.\r\n\r\n\r\nIn order to see this, we simply write \\(p = p(\\rho, s)\\) as a function of \\(\\rho\\) and \\(s\\) and take the material derivative.↩︎\r\nFrom the pure mathematical point of view, this is not a strict consequence of the Eqs. (9), which are in fact consistent with any static density configuration, as long as \\(\\nabla p = \\mathbf g \\rho\\) is satisfied. The physical reason is, of course, that we’re neglecting thermal conductivity, which allows for an arbitrary temperature gradient to persist forever in the absence of motion.↩︎\r\n",
    "preview": {},
    "last_modified": "2024-02-23T09:16:33+01:00",
    "input_file": "gravity-waves-in-an-ideal-fluid.knit.md"
  },
  {
    "path": "posts/2024-01-29-binary-digits-of-uniform-random-variables/",
    "title": "Binary digits of uniform random variables",
    "description": "... are independent fair coin tosses.",
    "author": [
      {
        "name": "Valerio Gherardi",
        "url": "https://vgherard.github.io"
      }
    ],
    "date": "2024-01-29",
    "categories": [
      "Probability Theory"
    ],
    "contents": "\r\nLet \\(X\\) be a random number in the unit interval \\([0,\\,1]\\), and let\r\n\\(Z \\equiv (Z_k)_{k\\in \\mathbb N}\\) represent the sequence of its binary digits,\r\nso that \\(Z_k \\in \\{0,\\,1\\}\\) for all \\(k\\) and:\r\n\\[\r\nX = \\sum _{k = 1} ^\\infty Z_k \\cdot 2^{-k}\r\n\\]\r\nNotice that the representation \\(Z\\) is unique for all \\(X\\) outside of a countable subset of the unit interval.1\r\nThe cool theorem proved below is that \\(X\\) is uniformly distributed in \\([0,\\,1]\\)\r\nif and only if all \\(Z_k\\)’s are independent and\r\n\\(\\text{Pr}(Z_k = 1) = \\text{Pr}(Z_k = 0) = \\frac{1}{2}\\). That is to say,\r\nthe binary representation \\(Z\\) of a random variable \\(X\\sim \\text{Unif}(0,\\,1)\\)\r\namounts to a sequence of independent fair coin tosses.\r\nWe fix \\(n \\in \\mathbb N\\) and decompose the unit interval as follows:\r\n\\[\r\n[0,1) = \\cup _{j = 1} ^{2^n} I^n_j,\\quad I^n_j = [(j-1) \\cdot2^{-n},j\\cdot2^{-n})\r\n\\]\r\nEach interval \\(I^n_j\\) corresponds to a specific set of values for the first \\(n\\) digits \\(Z_1,\\,Z_2,\\,\\dots,\\,Z_n\\), that is \\(X\\in I^n _j\\) if and only if \\(Z_1 = z_1,\\,Z_2 =z_2,\\,\\dots,\\,Z_n=z_n\\) for some \\(z_1,\\,z_2,\\,\\dots,\\,z_n\\) that depend\r\non the interval \\(I^n _j\\). Therefore:\r\n\\[\r\n\\text{Pr}(X\\in I^n _j) = \\text{Pr}(Z_1 = z_1,\\,Z_2 = z_2,\\,\\dots,\\,Z_n = z_n)\r\n\\]\r\nNow, \\(X\\) is uniformly distributed if and only if the left hand side of this\r\nequation equals \\(2^{-n}\\) for all \\(n\\in \\mathbb N\\) and \\(1\\leq j \\leq 2^{n}\\) 2. Furthermore, the \\(2^{n}\\) possible values of \\(j\\) correspond to\r\nthe \\(2^{n}\\) possible values of \\(z_1,\\,z_2,\\,\\dots,\\,z_n\\) in the right hand side.\r\nTherefore, \\(X\\) is uniform if and only if:\r\n\\[\r\n\\text{Pr}(Z_1 = z_1,\\,Z_2 = z_2,\\,\\dots,\\,Z_n = z_n) = 2^{-n}\r\n\\]\r\nfor all \\(z_1,\\,z_2,\\,\\dots,\\,z_n \\in \\{0,\\,1\\}\\). More generally, this implies\r\nthat, for any \\(k \\in \\mathbb N \\cup \\{0\\}\\) we have:\r\n\\[\r\n\\text{Pr}(Z_{k+1} = z_1,\\,Z_{k+2} = z_2,\\,\\dots,\\,Z_{k+n} = z_n) = 2^{-n} = \\prod _{i=1}^{n}\\text{Pr}(Z_{k+i} = z_i),\r\n\\]\r\nwhere the second equality follows from the special case \\(n=1\\). This is\r\nequivalent to saying that all \\(Z_k\\)’s are independent, each having \\(\\text{Pr}(Z_k = 1) = \\text{Pr}(Z_k = 0) = \\frac{1}{2}\\).\r\n\r\nThat is, the set of numbers that have a finite expansion \\(X = \\sum _{k = 1} ^N Z_k \\cdot 2^{-k}\\) for some finite \\(N\\), with \\(Z_N = 1\\). These numbers also have the equivalent infinite expansion \\(X = \\sum _{k = 1} ^{N-1} Z_k \\cdot 2^{-k} + \\sum _{k = N+1} ^{\\infty}2^{-k}\\). For these numbers we can make the convention of using the first (finite) representation.↩︎\r\n\r\nThat this is sufficient follows from the fact that any interval of the real line\r\ncan be obtained by taking countable unions and intersections of intervals of the form \\(I^n _j\\).↩︎\r\n",
    "preview": {},
    "last_modified": "2024-02-07T13:33:21+01:00",
    "input_file": {}
  },
  {
    "path": "posts/2023-11-15-interpreting-the-likelihood-ratio-cost/",
    "title": "Interpreting the Likelihood Ratio cost",
    "description": "Analysis of infinite sample properties and comparison with cross-entropy loss.",
    "author": [
      {
        "name": "Valerio Gherardi",
        "url": "https://vgherard.github.io"
      }
    ],
    "date": "2023-11-15",
    "categories": [
      "Forensic Science",
      "Bayesian Methods",
      "Information Theory",
      "Probability Theory",
      "R"
    ],
    "contents": "\r\nIntro\r\nDuring the last few months, I’ve been working on a machine learning algorithm with applications in Forensic Science, a.k.a. Criminalistics.\r\nIn this field, one common task for the data analyst is to present the trier-of-fact (the person or people who determine the facts in a legal proceeding) with a numerical assessment of the strength of the evidence provided by available data towards different hypotheses. In more familiar terms, the forensic expert is responsible of computing the likelihoods (or likelihood ratios) of data under competing hypotheses, which are then used by the trier-of-fact to produce Bayesian posterior probabilities for the hypotheses in question1.\r\nIn relation to this, forensic scientists have developed a bunch of techniques to evaluate the performance of a likelihood ratio model in discriminating between two alternative hypothesis. In particular, I have come across the so called Likelihood Ratio Cost, usually defined as:\r\n\\[\r\nC_{\\text{LLR}} = \\frac{1}{2N_1} \\sum _{Y_i=1} \\log(1+r(X_i) ^{-1})+\\frac{1}{2N_0} \\sum _{Y_i=0} \\log(1+r(X_i)), \\tag{1}\r\n\\]\r\nwhere we assume we have data consisting of \\(N_1+N_0\\) independent identically distributed observations \\((X_i,\\,Y_i)\\), with binary \\(Y\\); \\(N_1\\) and \\(N_0\\) stand for the number of positive (\\(Y=1\\)) and negative (\\(Y=0\\)) cases; and \\(r(X)\\) is a model for the likelihood ratio \\(\\Lambda(X) \\equiv \\frac{\\text{Pr}(X\\vert Y = 1)}{\\text{Pr}(X\\vert Y = 0)}\\).\r\nThe main reason for writing this note was to understand a bit better what it means to optimize Eq. (1), which does not look immediately obvious to me from its definition2. In particular: is the population minimizer of Eq. (1) the actual likelihood ratio? And in what sense is a model with lower \\(C_\\text{LLR}\\) better than one with a correspondingly higher value?\r\nThe short answers to these questions are: yes; and: \\(C_\\text{LLR}\\) optimization seeks for the model with the best predictive performance in a Bayesian inference setting with uninformative prior on \\(Y\\), assuming that this prior actually reflects reality (i.e. \\(\\text{Pr}(Y=1) = \\text{Pr}(Y=0) = \\frac{1}{2}\\)). The mathematical details are given in the rest of the post.\r\n\r\n\r\nCross-entropy with random weights\r\nWe start with a mathematical digression, which will turn out useful for further developments. Let \\(\\{(X_i,\\,Y_i)\\}_{i=1,\\,2,\\,\\dots,N}\\) be independent draws from a joint distribution, with binary \\(Y_i \\in \\{0,\\,1\\}\\). Given a function\r\n\\(w=w(\\boldsymbol Y)\\) that is symmetric in its arguments3, we define the random functional:\r\n\\[\r\n\\mathcal L_N^w[f] = -\\frac{1}{N}\\sum_{i=1} ^N \\left[w(\\boldsymbol Y)Y_i \\log(f(X_i))+ w({\\boldsymbol Y}^c)( Y_i^c) \\log(f(X_i)^c)\\right],\\tag{2}\r\n\\]\r\nwhere \\(f=f(X)\\) is any function satisfying \\(f(X)\\in [0,\\,1]\\) for all \\(X\\), and we let \\(q^c = 1-q\\) for any number \\(q \\in [0,\\,1]\\). Notice that for \\(w(\\boldsymbol{Y}) \\equiv 1\\), this is just the usual cross-entropy loss.\r\nWe now look for the population minimizer of (2), i.e. the function \\(f_*\\) that minimizes the functional \\(f \\mapsto \\mathbb E(\\mathcal L _N ^w [f])\\)4. Writing the expectation as:\r\n\\[\r\n\\mathbb E(\\mathcal L _N ^w [f]) = -\\frac{1}{N}\\sum _{i=1} ^N \\mathbb E\\left[ \\mathbb E(Y_i\\cdot w(\\boldsymbol Y)\\vert X_i)\\cdot \\log(f(X_i))+E(Y_i^c\\cdot w(\\boldsymbol Y ^c)\\vert X_i)\\cdot \\log(f^c(X_i))\\right],\r\n\\]\r\nwe can easily see that \\(\\mathbb E(\\mathcal L _N ^w [f])\\) is a convex functional with a unique minimum given by:\r\n\\[\r\nf_*(X_i) = \\frac{1}{1+r(X_i)^{-1}},\\quad r_*(X_i) = \\dfrac{E(Y_i\\cdot w(\\boldsymbol Y)\\vert X_i)}{E(Y_i^c\\cdot w(\\boldsymbol Y^c)\\vert X_i)}.\\tag{3}\r\n\\]\r\nThe corresponding expected loss is:\r\n\\[\r\n\\mathbb E(\\mathcal L _N ^w [f_*]) = \\mathbb E\\left[ \\mathbb E(Y_i\\cdot w(\\boldsymbol Y) + Y_i^c\\cdot w(\\boldsymbol Y^c)\\vert X_i)\\cdot \\mathcal H(f_*(X_i))\\right],\r\n\\]\r\nwhere \\(\\mathcal H(p) = -p \\log (p) -(1-p) \\log(1-p)\\) is the entropy of a binary random variable \\(Z\\) with probability \\(p = \\text{Pr}(Z=1)\\) (the index \\(i\\) in the previous expression can be any index, since data points are assumed to be identically distributed).\r\nBefore looking at values of \\(f\\) other than \\(f_*\\), we observe that the previous expectation can be succintly expressed as:\r\n\\[\r\n\\mathbb E(\\mathcal L _N ^w [f_*]) = k \\cdot H^\\prime(Y\\vert X),\r\n\\]\r\nwhere\r\n\\[\r\nk = \\mathbb E(Y_i\\cdot w(\\boldsymbol Y) + Y_i^c\\cdot w(\\boldsymbol Y^c))\\tag{4}\r\n\\]\r\nand \\(H'(Y\\vert X)\\) is the conditional entropy of \\(Y\\vert X\\) with respect to a different probability measure \\(\\text{Pr}^\\prime\\), defined by:\r\n\\[\r\n\\text{Pr}^\\prime(E) = t \\cdot \\text {Pr}(E \\vert Y = 1) + (1-t)\\cdot \\text {Pr}(E \\vert Y = 0), \\tag{5}\r\n\\]\r\nwhere \\(t=\\text{Pr}^\\prime(Y=1)\\in [0,\\,1]\\) is fixed by the requirement5:\r\n\\[\r\n\\dfrac{\\text {Pr}^\\prime (Y=1)}{\\text{Pr}^\\prime (Y=0)}=\\dfrac{\\text {Pr} (Y=1)}{\\text{Pr} (Y=0)}\\cdot\\dfrac{\\mathbb E(w(\\boldsymbol Y)\\vert \\sum _i Y_i >0)}{\\mathbb E(w(\\boldsymbol Y^c)\\vert \\sum _i Y_i^c >0)}. \\tag{6}\r\n\\]\r\nIn terms of \\(\\text{Pr}^\\prime\\), the population minimizers \\(f_*\\) and \\(r_*\\) in Eq. (3) can be simply expressed as:\r\n\\[\r\nr_*(X)=\\dfrac{\\text {Pr}^\\prime(Y=1\\vert X)}{\\text {Pr}^\\prime(Y=0\\vert X)},\\qquad f_*(X)=\\text {Pr}^\\prime(Y=1\\vert X). \\tag{7}\r\n\\]\r\nIf now \\(f\\) is an arbitrary function, we have:\r\n\\[\r\n\\begin{split}\r\n\\mathbb E(\\mathcal L _N ^w [f]) - \\mathbb E(\\mathcal L _N ^w [f_*]) &= \\mathbb E\\left[ \\mathbb E(Y_i\\cdot w(\\boldsymbol Y) + Y_i^c\\cdot w(\\boldsymbol Y^c)\\vert X_i)\\cdot \\mathcal D(f_*(X_i)\\vert \\vert f(X_i))\\right]\r\n&= k\\cdot D(\\text{Pr}^\\prime\\vert \\vert \\text{Pr}^\\prime _f)\r\n\\end{split}\r\n\\]\r\nwhere \\(\\mathcal D(p\\vert \\vert q) = p \\log (\\frac{p}{q}) + (1-p) \\log (\\frac{1-p}{1-q})\\), and \\(D(\\text{Pr}^\\prime\\vert \\vert \\text{Pr}^\\prime _f)\\) is the Kullback-Liebler divergence between the measure \\(\\text{Pr}^\\prime\\) and the measure \\(\\text{Pr}^\\prime _f\\) defined by:\r\n\\[\r\n\\text{Pr}^\\prime _f(Y = 1\\vert X)=f(X),\\qquad \\text{Pr}^\\prime _f(X)=\\text{Pr}^\\prime(X)\r\n\\]\r\n(notice that \\(\\text {Pr} ^{\\prime} _{f_*} \\equiv \\text{Pr} ^{\\prime}\\) by definition).\r\nFinally, suppose that \\(X = g(\\widetilde X)\\) for some random variable \\(\\widetilde X\\), and define the corresponding functional:\r\n\\[\r\n\\widetilde{\\mathcal L} _N^w[\\widetilde f]  = -\\frac{1}{N}\\sum_{i=1} ^N \\left[w(\\boldsymbol Y)Y_i \\log(\\widetilde f(\\widetilde X))+ w({\\boldsymbol Y}^c)( Y_i^c) \\log(\\widetilde f(\\widetilde X)^c)\\right].\r\n\\]\r\nThen \\(\\mathcal L _N ^w [f] = \\widetilde{\\mathcal L} _N^w[f \\circ g]\\). If \\(\\widetilde f _* =\\) is the population minimizer of \\(\\widetilde{\\mathcal L} _N^w\\), it follows that \\(\\mathbb E (\\widetilde{\\mathcal L} _N^w[\\widetilde f _*]) \\leq \\mathbb E(\\mathcal L _N ^w [f_*])\\).\r\nPutting everything together, we can decompose the expected loss for a function \\(f=f(X)\\), where \\(X= g(\\widetilde X)\\), in the following suggestive way:\r\n\\[\r\n\\begin{split}\r\n\\mathbb E(\\mathcal L _N ^w [f]) &= (L_N ^w)_\\text{min}+(L_N ^w)_\\text{proc} +(L_N ^w)_\\text{missp},\\\\\r\n(L_N ^w)_\\text{min}&\\equiv\\mathbb E(\\widetilde{\\mathcal L} _N^w[{\\widetilde f} _*])  \\\\ &=\r\n\\mathbb E\\left[ \\mathbb E(Y_i\\cdot w(\\boldsymbol Y) + Y_i^c\\cdot w(\\boldsymbol Y^c)\\vert \\widetilde X _i)\\cdot \\mathcal H({\\widetilde f} _*(\\widetilde X _i))\\right]\\\\\r\n&=k\\cdot H^\\prime(Y\\vert \\widetilde X),\\\\\r\n(L_N ^w)_\\text{proc}&\\equiv\\mathbb E(\\mathcal L _N ^w [f_*]-\\widetilde{\\mathcal L} _N^w[\\phi_*])  \\\\& =\r\n\\mathbb E\\left[ \\mathbb E(Y_i\\cdot w(\\boldsymbol Y) + Y_i^c\\cdot w(\\boldsymbol Y^c)\\vert X_i)\\cdot  \\mathcal H(f_*(X_i))\r\n\\right]- (L_N ^w)_\\text{min}\\\\\r\n& = k\\cdot I^\\prime(Y; \\widetilde X\\vert X),\\\\\r\n(L_N ^w)_\\text{missp} & \\equiv \\mathbb E(\\mathcal L _N ^w [f]) - \\mathbb E(\\mathcal L _N ^w [f_*]) \\\\&= \\mathbb E\\left[ \\mathbb E(Y_i\\cdot w(\\boldsymbol Y) + Y_i^c\\cdot w(\\boldsymbol Y^c)\\vert X_i)\\cdot  \\mathcal  D(f_*(X_i)\\vert \\vert f(X_i))\\right]\\\\ &=k\\cdot D(\\text {Pr}^\\prime\\vert \\vert \\text {Pr}^\\prime _f),\r\n\\end{split} \\tag{8}\r\n\\]\r\nwhere \\(k\\) is defined in Eq. (4). In the equation for \\((L^w _N)_\\text{proc}\\) we introduced the conditional mutual information (with respect to the measure \\(\\text{Pr}^\\prime\\)), that satisfies (Cover and Thomas 2006):\r\n\\[\r\nI(\\widetilde X;Y\\vert X) = I(\\widetilde X,Y)-I(X,Y) = H(Y\\vert X)-H(Y\\vert \\widetilde X).\r\n\\]\r\nThe three components in Eq. (8) can be interpreted as follows: \\((L_N ^w)_\\text{min}\\) represents the minimum expected loss achievable, given the data available \\(\\widetilde X\\); \\((L_N ^w)_\\text{proc}\\) accounts for the information lost in the processing transformation \\(X=g(\\widetilde X)\\); finally \\((L_N ^w)_\\text{missp}\\) is due to misspecification, i.e. the fact that the model \\(f(X)\\) for the true posterior probability \\(f_*(X)\\) is an approximation.\r\nAll the information-theoretic quantities (and their corresponding operative interpretations hinted in the previous paragraph) make reference to the measure \\(\\text{Pr}^\\prime\\) defined by Eqs. (5) and (6). This is merely the result of altering the proportion of positive (\\(Y=1\\)) and negative (\\(Y=0\\)) examples in the \\(X\\)-\\(Y\\) joint distribution by a factor dictated by the weight function \\(w\\) - while keeping conditional distributions such as \\(X\\vert Y\\) unchanged.\r\nA familiar case: cross-entropy loss\r\nFor \\(w(\\boldsymbol {Y}) = 1\\), the functional \\(\\mathcal {L} _{N} ^{w}[f]\\)\r\ncoincides with the usual cross-entropy loss6:\r\n\\[\r\n\\text{CE}[f] = -\\frac{1}{N}\\sum_{i=1} ^N \\left[Y_i \\log(f(X_i))+ (1-Y_i) \\log(1-f(X_i))\\right].\\tag{9}\r\n\\]\r\nFrom Eq. (6) we see that the measure \\(\\text{Pr}^{\\prime}\\)\r\ncoincides with the original \\(\\text{Pr}\\), so that by Eq. (3)\r\nthe population minimizer of (9) is\r\n\\(f_{*}(X) = \\text{Pr}(Y=1\\vert X)\\) (independently of sample size). Since \\(k = 1\\) (cf. Eq. (4)), the decomposition (8) reads:\r\n\\[\r\n\\begin{split}\r\n\\mathbb E(\\text{CE} [f]) &= (\\text{CE})_\\text{min}+(\\text{CE})_\\text{proc} +(\\text{CE})_\\text{missp},\\\\\r\n(\\text{CE})_\\text{min}&=H(Y\\vert \\widetilde X),\\\\\r\n(\\text{CE})_\\text{proc}&= I(Y; \\widetilde X\\vert X),\\\\\r\n(\\text{CE})_\\text{missp} &=D(\\text {Pr}\\vert \\vert \\text {Pr} _{f}),\r\n\\end{split} \\tag{10}\r\n\\]\r\nwhere conditional entropy \\(H\\), mutual information \\(I\\) and relative entropy \\(D\\) now simply refer to the original measure \\(\\text{Pr}\\).\r\nThe Likelihood Ratio Cost\r\nThe quantity \\(C_{\\text{LLR}}\\) defined in Eq. (1) can be put in the general form (2), if we let \\(f(X) = (1+r(X)^{-1})^{-1}\\) and7:\r\n\\[\r\nw(\\boldsymbol Y) = \\left(\\dfrac{2}{N}\\sum _{i = 1}^{N}Y_j \\right)^{-1}\r\n\\]\r\nIn what follows, I will consider a slight modification of the usual\r\n\\(C_\\text{LLR}\\), defined by the weight function:\r\n\\[\r\nw(\\boldsymbol Y) = \\dfrac{1}{2(N-1)}\\sum _{i = 1}^{N}(1-Y_j).\r\n\\]\r\nThis yields Eq. (1) multiplied by \\(\\dfrac{N_1N_0}{N(N-1)}\\), which I will keep denoting as \\(C_\\text{LLR}\\), with a slight abuse of notation.\r\nWe can easily compute8:\r\n\\[\r\n\\dfrac{\\text {Pr}^\\prime (Y=1)}{\\text{Pr}^\\prime (Y=0)}=1, \\tag{11}\r\n\\]\r\nso that, by Eq. (3), the population minimizer of\r\n\\(C_\\text{LLR}\\) is:\r\n\\[\r\nr_*(X) = \\Lambda (X),\\quad f_*(X)=\\dfrac{1}{1+\\Lambda(X)^{-1}},\r\n\\]\r\nwhere \\(\\Lambda(X)\\) denotes the likelihood-ratio of \\(X\\), schematically:\r\n\\[\r\n\\Lambda(X)\\equiv \\dfrac{\\text{Pr}(X\\vert Y = 1)}{\\text{Pr}(X\\vert Y = 0)}.\r\n\\]\r\nThe constant \\(k\\) in Eq. (4) is:\r\n\\[\r\nk = \\text{Pr}(Y = 1)\\text{Pr}(Y = 0)=\\text{Var}(Y)\r\n\\]\r\nThe general decomposition (8) becomes:\r\n\\[\r\n\\begin{split}\r\n\\mathbb E(C_\\text{LLR} [f]) &= (C_\\text{LLR})_\\text{min}+(C_\\text{LLR})_\\text{proc} +(C_\\text{LLR})_\\text{missp},\\\\\r\n(C_\\text{LLR})_\\text{min}&=\\text{Var}(Y)\\cdot H^{\\prime}(Y\\vert \\widetilde X),\\\\\r\n(C_\\text{LLR})_\\text{proc}&= \\text{Var}(Y)\\cdot I^{\\prime}(Y; \\widetilde X\\vert X),\\\\\r\n(C_\\text{LLR})_\\text{missp} &=\\text{Var}(Y)\\cdot D^{\\prime}(\\text {Pr}\\vert \\vert \\text {Pr} _{f}),\r\n\\end{split} \\tag{10}\r\n\\]\r\nwhere \\(\\text{Pr}^\\prime\\) is now given by (11).\r\nDiscussion\r\nThe table below provides a comparison between cross-entropy and likelihood-ratio cost,\r\nsummarizing the results from previous sections.\r\n\r\nCross-entropy\r\nLikelihood Ratio Cost\r\n\\(f_*(X)\\)\r\n\\(\\text{Pr}(Y = 1\\vert X)\\)\r\n\\((1+\\Lambda(X)^{-1})^{-1}\\)\r\n\\(r_*(X)\\)`\r\nPosterior odds ratio\r\nLikelihood ratio\r\nMinimum Loss\r\n\\(H(Y\\vert \\widetilde X)\\)\r\n\\(\\text{Var}(Y) \\cdot H^\\prime(Y\\vert \\widetilde X)\\)\r\nProcessing Loss\r\n\\(I(Y; \\widetilde X\\vert X)\\)\r\n\\(\\text{Var}(Y) \\cdot I^\\prime(Y; \\widetilde X\\vert X)\\)\r\nMisspecification Loss\r\n\\(D(f_*\\vert\\vert f)\\)\r\n\\(\\text{Var}(Y) \\cdot D^\\prime(f_*\\vert\\vert f)\\)\r\nReference measure\r\n\\(\\text{Pr}\\)\r\n\\(\\text{Pr}^{\\prime} = \\frac{\\text{Pr}(\\cdot \\vert Y = 1)+\\text{Pr}(\\cdot \\vert Y = 0)}{2}\\)\r\nThe objective of \\(C_\\text{LLR}\\) is found to be the likelihood ratio, as\r\nterminology suggests. The interpretation of model selection according to\r\n\\(C_\\text{LLR}\\) minimization turns out to be slightly more involved, compared to\r\ncross-entropy, which we first review.\r\nSuppose we are given a set of predictive models \\(\\{\\mathcal M_i\\}_{i\\in I}\\),\r\neach of which consists of a processing transformation, \\(\\widetilde X \\mapsto X\\),\r\nand an estimate of the posterior probability \\(\\text{Pr}(Y = 1\\vert X)\\).\r\nWhen the sample size \\(N \\to \\infty\\), cross-entropy minimization will almost\r\ncertainly select the model that minimizes\r\n\\(I(Y; \\widetilde X\\vert X) + D(f_*\\vert \\vert f)\\). Following standard\r\nInformation Theory arguments, we can interpret this model as the statistically\r\noptimal compression algorithm for \\(Y\\), assuming \\(X\\) to be available at both\r\nthe encoding and decoding ends.\r\nThe previous argument carries over mutatis mutandi to \\(C_\\text{LLR}\\)\r\nminimization, with an important qualification: optimal average compression is\r\nnow achieved for data distributed according to a different probability measure\r\n\\(\\text{Pr}'(\\cdot) = \\frac{1}{2}\\text {Pr}(\\cdot\\vert Y = 1) + \\frac{1}{2}\\text {Pr}(\\cdot\\vert Y = 0)\\). In particular, according to \\(\\text{Pr}'\\),\r\nthe likelihood ratio coincides with the posterior odds ratio, and\r\n\\((1+\\Lambda(X)^{-1})^{-1}\\) coincides with posterior probability, which clarifies\r\nwhy we can measure differences from the true likelihood-ratio through the\r\nKullback-Liebler divergence.\r\nThe measure \\(\\text{Pr}'\\) is not just an abstruse mathematical construct:\r\nit is the result of balanced sampling from the original distribution, i.e.\r\ntaking an equal number of positive and negative cases9. If the \\((X,\\,Y)\\) distribution is already balanced,\r\neither by design or because of some underlying symmetry in the data generating\r\nprocess, our analysis implies that likelihood-ratio cost and cross-entropy\r\nminimization are essentially equivalent for \\(N\\to \\infty\\). In general, with\r\n\\(\\text{Pr} (Y=1) \\neq \\text{Pr} (Y=0)\\), this is not the case10.\r\nThe fact that \\(C_\\text{LLR}\\) seeks for optimal predictors according to the balanced measure \\(\\text{Pr}'\\) is, one could argue, not completely crazy from the point of view of forensic science, where “\\(Y\\in\\{0,1\\}\\)” often stands for a sort verdict (guilty vs. not guilty, say). Indeed, optimizing\r\nwith respect to \\(\\text{Pr}^\\prime\\) means that our predictions are designed to be optimal in a world in which the verdict could be a priori \\(Y=0\\) or \\(Y=1\\) with equal probability - which is what an unbiased trier-of-fact should ideally assume. Minimizing \\(C_\\text{LLR}\\), we guard ourselves against any bias\r\nthat may be implicit in the training dataset, extraneous to the \\(X\\)-\\(Y\\)\r\nrelation and not explicitly modeled, a feature that may be regarded as desirable from a legal standpoint.\r\nSimulated example\r\nIn general, the posterior odd ratio and likelihood ratio differ only by a\r\nconstant, so it is reasonable to try to fit the same functional form to both of\r\nthem. Let us illustrate with a simulated example of this type the differences\r\nbetween cross-entropy and \\(C_{\\text{LLR}}\\) optimization mentioned in the\r\nprevious Section.\r\nSuppose that \\(X \\in \\mathbb R\\) has conditional density:\r\n\\[\r\n\\phi(X\\vert Y) = (2\\pi\\sigma _Y^2)^{-\\frac{1}{2}} \\exp(-\\frac{(X-\\mu_Y)^2}{2\\sigma _Y^2})\r\n\\]\r\nand \\(Y\\) has marginal probability \\(\\text{Pr}(Y = 1) = \\pi\\). The true likelihood-ratio and posterior odds ratio are respectively given by:\r\n\\[\r\n\\begin{split}\r\n\\Lambda (X) &\r\n    \\equiv \\frac{\\phi(X\\vert Y=1)}{\\phi(X\\vert Y=0)}\r\n    = e ^ {a X^2 + bX +c},\\\\\r\n\\rho (X) &\r\n    \\equiv \\frac{\\text{Pr}(Y = 1\\vert X)}{\\text{Pr}(Y = 0\\vert X)}\r\n    = e ^ {a X ^ 2 + bX +c+d},\r\n\\end{split}\r\n\\]\r\nwhere we have defined:\r\n\\[\r\na  \\equiv \\dfrac{\\sigma _1 ^2 -\\sigma_0 ^2}{2\\sigma _0 ^2\\sigma_1 ^2},\\quad\r\nb  \\equiv \\mu _1 - \\mu _0, \\quad\r\nc  \\equiv \\dfrac{\\mu_0^2}{2\\sigma_0^2} -\\dfrac{\\mu_1 ^2}{2\\sigma _1^2}+\\ln(\\frac{\\sigma _0 }{\\sigma _1 }),\\quad\r\nd  \\equiv \\ln (\\frac {\\pi}{1-\\pi}) .\r\n\\]\r\nSuppose that we fit an exponential function \\(r(X)=e^{mX +q}\\) to \\(\\Lambda(X)\\) by\r\nlikelihood-ratio cost minimization, and similarly \\(r'(X)=e^{m'X+q'}\\) to\r\n\\(\\rho(X)\\) by cross-entropy minimization11. Due to the previous discussion, one could reasonably expect the results of the two procedure to differ in some way, which is demonstrated below by simulation.\r\nThe chunk of R code below defines the function and data used for the simulation.\r\nIn particular, I’m considering a heavily unbalanced case\r\n(\\(\\text{Pr}(Y = 1) = 0.1\\%\\)) in which negative cases give rise to a sharply\r\nlocalized \\(X\\) peak around \\(X=0\\) (\\(\\mu _0 = 0\\), \\(\\sigma_0 = .25\\)),\r\nwhile the few positive cases give rise to a broader signal centered at \\(X=1\\)\r\n(\\(\\mu _1 = 1\\), \\(\\sigma _1 = 1\\)).\r\n\r\n\r\nShow code\r\n\r\n# Tidyverse facilities for plotting\r\nlibrary(dplyr)\r\nlibrary(ggplot2) \r\n\r\n# Loss functions\r\nweighted_loss <- function(par, data, w) {\r\n  m <- par[[1]]\r\n  q <- par[[2]]\r\n  x <- data$x\r\n  y <- data$y\r\n  \r\n  z <- m * x + q\r\n  p <- 1 / (1 + exp(-z))\r\n  \r\n  -mean(y * w(y) * log(p) + (1-y) * w(1-y) * log(1-p))\r\n}\r\n\r\ncross_entropy <- function(par, data) \r\n  weighted_loss(par, data, w = \\(y) 1)\r\n\r\ncllr <- function(par, data) \r\n  weighted_loss(par, data, w = \\(y) mean(1-y))\r\n\r\n\r\n# Data generating process\r\nrxy <- function(n, pi = .001, mu1 = 1, mu0 = 0, sd1 = 1, sd0 = 0.25) { \r\n  y <- runif(n) < pi\r\n  x <- rnorm(n, mean = y * mu1 + (1-y) * mu0, sd = y * sd1 + (1-y) * sd0)\r\n  data.frame(x = x, y = y)\r\n}\r\npi <- formals(rxy)$pi\r\n\r\n\r\n# Simulation\r\nset.seed(840)\r\ndata <- rxy(n = 1e6)\r\npar_cllr <- optim(c(1,0), cllr, data = data)$par\r\npar_cross_entropy <- optim(c(1,0), cross_entropy, data = data)$par\r\npar_cross_entropy[2] <- par_cross_entropy[2] - log(pi / (1-pi))\r\n\r\n\r\n# Helpers to extract LLRs from models\r\nllr <- function(x, par)\r\n  par[1] * x + par[2] \r\n\r\nllr_true <- function(x) {\r\n  mu1 <- formals(rxy)$mu1 \r\n  mu0 <- formals(rxy)$mu0 \r\n  sd1 <- formals(rxy)$sd1\r\n  sd0 <- formals(rxy)$sd0\r\n    \r\n  a <- 0.5 * (sd1 ^2 - sd0 ^2) / (sd1 ^2 * sd0 ^2)\r\n  b <- mu1 / (sd1^2) - mu0 / (sd0^2)\r\n  c <- 0.5 * (mu0^2 / (sd0^2) - mu1^2 / (sd1^2)) + log(sd0 / sd1)\r\n  a * x * x + b * x + c\r\n}\r\n\r\n\r\nSo, what do our best estimates look like? The plot below shows the best fit\r\nlines for the log-likelihood ratio from \\(C_{\\text{LLR}}\\) minimization (in solid red) and cross-entropy minimization (in solid blue). The true log-likelihood ratio parabola is the black line. Also shown are the \\(\\text{LLR}=0\\) line (in dashed red) and the \\(\\text{LLR}=\\ln(\\frac{1-\\pi}{\\pi})\\) (in\r\ndashed blue), which are the appropriate Bayes thresholds for classifying a\r\ndata point as positive (\\(Y=1\\)), assuming data comes from a balanced and unbalanced distribution, respectively.\r\n\r\n\r\nShow code\r\n\r\nggplot() + \r\n  geom_function(fun = \\(x) llr(x, par_cllr), color = \"red\") + \r\n  geom_function(fun = \\(x) llr(x, par_cross_entropy), color = \"blue\") +\r\n  geom_function(fun = \\(x) llr_true(x), color = \"black\") +\r\n  geom_hline(aes(yintercept = 0), linetype = \"dashed\", color = \"red\") +\r\n    geom_hline(aes(yintercept = -log(pi / (1-pi))), \r\n               linetype = \"dashed\", color = \"blue\") +\r\n    ylim(c(-10,10)) + xlim(c(-1, 2)) +\r\n  xlab(\"X\") + ylab(\"Log-Likelihood Ratio\")\r\n\r\n\r\n\r\nThe reason why the lines differ is that they are designed to solve a different predictive problem: as we’ve argued above, minimizing \\(C_\\text{LLR}\\) looks for the best \\(Y\\vert X\\) conditional probability estimate according to the balanced\r\nmeasure \\(\\text{Pr}'\\), whereas cross-entropy minimization does the same for\r\nthe original measure \\(\\text{Pr}\\). This is how data looks like under the two measures (the histograms are stacked - in the unbalanced case, positive examples are invisible on the linear scale of the plot):\r\n\r\n\r\nShow code\r\n\r\ntest_data <- bind_rows(\r\n  rxy(n = 1e6, pi = 0.5) |> mutate(type = \"Balanced\", llr_thresh = 0),\r\n  rxy(n = 1e6) |> mutate(type = \"Unbalanced\", llr_thresh = -log(pi / (1-pi)))\r\n  )\r\n\r\ntest_data |> \r\n  ggplot(aes(x = x, fill = y)) + \r\n  geom_histogram(bins = 100) +\r\n  facet_grid(type ~ ., scales = \"free_y\") +\r\n  xlim(c(-2, 4))\r\n\r\n\r\n\r\nThese differences are reflected in the misclassification rates of the resulting classifiers defined by \\(\\hat Y(X)=I(\\text{LLR}(X)>\\text{threshold})\\), where the appropriate threshold is zero in the balanced case, and \\(\\ln(\\frac{1-\\pi}{\\pi})\\) in the unbalanced case. According to intuition, we see that the \\(C_\\text{LLR}\\) optimizer beats the cross-entropy optimizer on the balanced sample, while performing\r\nsignificantly worse on the unbalanced one.\r\n\r\n\r\nShow code\r\n\r\ntest_data |>\r\n  mutate(\r\n    llr_cllr = llr(x, par_cllr),\r\n    llr_cross_entropy = llr(x, par_cross_entropy),\r\n    llr_true = llr_true(x)\r\n    ) |>\r\n  group_by(type) |>\r\n  summarise(\r\n    cllr = 1 - mean((llr_cllr > llr_thresh) == y),\r\n    cross_entropy = 1 - mean((llr_cross_entropy > llr_thresh) == y),\r\n    true_llr = 1 - mean((llr_true > llr_thresh) == y)\r\n    )\r\n\r\n# A tibble: 2 × 4\r\n  type           cllr cross_entropy true_llr\r\n  <chr>         <dbl>         <dbl>    <dbl>\r\n1 Balanced   0.166         0.185    0.140   \r\n2 Unbalanced 0.000994      0.000637 0.000518\r\n\r\nFinal remarks\r\nOur main conclusion in a nutshell is that \\(C_\\text{LLR}\\) minimization is\r\nequivalent, in the infinite sample limit, to cross-entropy minimization on a\r\nbalanced version of the original distribution. We haven’t discussed what happens\r\nfor finite samples where variance starts to play a role, affecting the\r\nefficiency of loss functions as model optimization and selection criteria.\r\nFor instance, for a well specified model of likelihood ratio, how do the\r\nconvergence properties of \\(C_{\\text{LLR}}\\) and cross-entropy estimators compare\r\nto each other? I expect that answering questions like this would require a much\r\nmore in-depth study than the one performed here (likely, with simulation playing\r\na central role).\r\n\r\n\r\n\r\nBrümmer, Niko, and Johan du Preez. 2006. “Application-Independent Evaluation of Speaker Detection.” Computer Speech & Language 20 (2): 230–75. https://doi.org/https://doi.org/10.1016/j.csl.2005.08.001.\r\n\r\n\r\nCover, Thomas M., and Joy A. Thomas. 2006. Elements of Information Theory 2nd Edition (Wiley Series in Telecommunications and Signal Processing). Hardcover; Wiley-Interscience.\r\n\r\n\r\nThis is how I understood things should theoretically work, from discussions with friends who are actually working on this field. I have no idea on how much day-to-day practice comes close to this mathematical ideal, and whether there exist alternative frameworks to the one I have just described.↩︎\r\nThe Likelihood Ratio Cost was introduced in (Brümmer and du Preez 2006). The reference looks very complete, but I find its notation and terminology so unfamiliar that I decided to do my own investigation and leave this reading for a second moment.↩︎\r\nThat is to say, \\(w(Y_{\\sigma(1)},\\,Y_{\\sigma(2)},\\dots,\\,Y_{\\sigma(N)})=w(Y_1,\\,Y_2,\\dots,\\,Y_N)\\) for any permutation \\(\\sigma\\) of the set \\(\\{1,\\,2,\\,\\dots,\\,N\\}\\).↩︎\r\nNota bene: the function \\(f\\) is here assumed to be fixed, whereas the randomness in the quantity \\(L _N ^w [f]\\) only comes from the paired observations \\(\\{(X_i,\\,Y_i)\\}_{i=1,\\,2,\\,\\dots,N}\\).↩︎\r\nNotice that, due to symmetry \\(\\mathbb E(w(\\boldsymbol Y)\\vert \\sum _i Y_i >0) = \\mathbb E(w(\\boldsymbol Y)\\vert Y_1 = 1)\\), which might be easier to compute.↩︎\r\nHere and below I relax a bit\r\nthe notation, as most details should be clear from context.↩︎\r\nThe quantity \\(w(\\boldsymbol Y)\\) is not defined when all \\(Y_i\\)’s are zero, as the right-hand\r\nside of Eq. (1) itself. In this case, we make the convention \\(w(\\boldsymbol Y) = 0\\).↩︎\r\nFor the original loss in Eq. (1), without the modification discussed above, the result would have been\r\n\\(\\dfrac{\\text {Pr}^\\prime (Y=1)}{\\text{Pr}^\\prime (Y=0)}=\\dfrac{1-\\text {Pr}(Y=0)^N}{1-\\text {Pr}(Y=1)^N}.\\)↩︎\r\nFormally, given an i.i.d.\r\nstochastic process \\(Z_i = (X_i,\\,Y_i)\\), we can define a new stochastic process\r\n\\(Z_i ^\\prime = (X_i^\\prime,\\,Y_i^\\prime)\\) such that\r\n\\(Z_i ^\\prime = Z_{2i - 1}\\) if \\(Y_{2i-1}\\neq Y_{2i}\\), and \\(Z_i ^\\prime = \\perp\\)\r\n(not defined) otherwise. Discarding \\(\\perp\\) values, we obtain an i.i.d.\r\nstochastic process whose individual observations are distributed according to\r\n\\(\\text{Pr}^\\prime\\).↩︎\r\nThere is another\r\ncase in which \\(C_{\\text{LLR}}\\) and cross-entropy minimization converge to the\r\nsame answer as \\(N\\to \\infty\\): when used for model selection among a class of\r\nmodels for the likelihood or posterior odds ratio that contains their correct\r\nfunctional form.↩︎\r\nThis is just logistic regression. It could be a reasonable approximation if \\(\\sigma_0 ^2\\approx \\sigma_1 ^2\\), which however I will assume below to be badly violated.↩︎\r\n",
    "preview": "posts/2023-11-15-interpreting-the-likelihood-ratio-cost/interpreting-the-likelihood-ratio-cost_files/figure-html5/unnamed-chunk-3-1.png",
    "last_modified": "2024-02-07T13:33:21+01:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2023-11-03-conditional-probability/",
    "title": "Conditional Probability",
    "description": "Notes on the formal definition of conditional probability.",
    "author": [
      {
        "name": "Valerio Gherardi",
        "url": "https://vgherard.github.io"
      }
    ],
    "date": "2023-11-03",
    "categories": [
      "Probability Theory",
      "Measure Theory"
    ],
    "contents": "\r\nLet \\((\\Omega, \\,\\mathcal E,\\,P)\\) be a probability space, and let\r\n\\(X\\colon \\Omega \\to \\Omega _X\\) be a random variable with target space\r\n\\((\\Omega _X, \\mathcal X)\\). We denote the corresponding push-forward measure on\r\n\\(\\mathcal X\\) by \\(X_*P\\), so that:\r\n\\[\r\n(X_*P)(B)= P(X^{-1}(B))\r\n\\]\r\nfor all \\(B\\in \\mathcal X\\). A measurable function\r\n\\(f\\colon \\Omega _X \\to \\mathbb R\\) is integrable with respect to \\(X_*P\\)\r\nif and only if \\(f\\circ X\\) is integrable with respect to \\(P\\), in which case1:\r\n\\[\r\n\\intop _\\mathcal X f\\,\\text d(X_*P) = \\intop _\\mathcal \\Omega (f \\circ X)\\,\\text dP.\r\n\\]\r\nNow, given an arbitrary event \\(E\\in \\mathcal E\\) define\r\n\\((X_*P)_E(A)=P(E\\cap X^{-1}(A))\\). Then \\((X_*P)_E\\) is a measure on\r\n\\(\\mathcal X\\) which is clearly dominated by \\(X_*P\\), and there exists a\r\nRadon-Nikodym derivative\r\n\\(\\frac{\\text d (X_*P)_E}{\\text d (X_*P)} \\in L_1(X_*P)\\). We define the\r\nconditional probability of event \\(E\\) with respect to the random variable \\(X\\) as\r\nthe random variable:\r\n\\[\r\nP(E\\vert X)\\equiv \\frac{\\text d (X_*P)_E}{\\text d (X_*P)}.\r\n\\]\r\nThe intuition behind this definition comes from the tautology (given the\r\ndefinition in terms of Radon-Nikodym derivative):\r\n\\[\r\nP(E \\cap (X\\in A)) = \\intop _{A} P(E\\vert X)\\,\\text d(X_*P).\r\n\\]\r\nOn one hand, from elementary probability theory, one would expect any\r\nsensible definition of conditional probability to satisfy this theorem.\r\nOn the other hand, the theorem univocally identifies \\(P(E\\vert X)\\) as the\r\nRadon-Nikodym derivative \\(\\frac{\\text d (X_*P)_E}{\\text d (X_*P)}\\), modulo a set of \\(X_*P\\) measure zero.\r\nIt is fairly easy to verify the following properties of conditional probability:\r\nCountable additivity. For any finite or countable family \\((E_i)_{i\\in I}\\) of\r\ndisjoint events, \\(E_i \\cap E_j = \\emptyset\\), we have:\r\n\\[\r\nP(\\cup _{i\\in I} E_i \\vert X = x) = \\sum _{i \\in I}P(E_i \\vert X = x)\r\n\\]\r\nfor almost all \\(x\\in \\Omega_X\\).\r\nPositivity. For any event \\(E\\) we have \\(P(E \\vert X=x) \\geq 0\\) for almost all\r\n\\(x \\in \\Omega\\).\r\nNormalization. \\(P(\\Omega \\vert X = x) = 1\\) for almost all \\(x \\in \\Omega\\).\r\nThis, however, does not generally imply that \\(P(\\cdot \\vert X = x)\\) is a\r\nprobability measure for almost all \\(x\\in \\Omega_X\\)2.\r\nFunctions \\(\\nu \\colon \\mathcal E \\times \\Omega _X \\to \\mathbb R^+\\) such that\r\n\\(\\nu(\\cdot, x)\\) is a measure for all \\(x\\in \\Omega _X\\), and\r\n\\(\\nu (E,\\cdot)\\) is \\(\\mathcal X\\)-measurable for all \\(E\\in \\mathcal E\\) are called\r\nrandom measures. If \\(\\nu\\) satisfies\r\n\\[\r\nP(E \\cap (X\\in A)) = \\intop _{A} \\nu (E,\\cdot)\\,\\text d(X_*P)\r\n\\]\r\n(or, equivalently, if \\(\\nu (E,\\cdot)\\) is a version of\r\n\\(\\frac{\\text d (X_*P)_E}{\\text d (X_*P)}\\)) for all \\(E\\in \\mathcal E\\), \\(\\nu\\) is\r\ncalled a regular conditional probability for the random variable \\(X\\). If the\r\nspace \\((\\Omega,\\, \\mathcal E)\\) is regular enough (e.g. if it is a Borel space)\r\none can prove that a regular conditional probability exists for any random\r\nvariable \\(X\\), see e.g. (Kallenberg 1997).\r\nIf \\(X = \\chi _A \\colon \\Omega \\to \\{0,1\\}\\), where \\(A\\in \\mathcal E\\)\r\nhas positive probability \\(0<P(A)<1\\), we can easily compute:\r\n\\[\r\nP(E\\vert \\chi _A) = \\chi _A\\cdot \\frac{P(E\\cap A)}{P(A)} + (1-\\chi _A)\\cdot \\frac{P(E\\cap A^c)}{P(A^c)}\r\n\\]\r\nIn particular, \\(P(E\\vert A) \\equiv P(E\\vert \\chi _A = 1)\\) agrees with the\r\nusual elementary definition of conditional probability.\r\nMore generally, if \\(X = \\text {id} _\\Omega\\), where the target space is equipped with a sub-\\(\\sigma\\)-algebra \\(\\mathcal F \\subseteq \\mathcal E\\), we have:\r\n\\[\r\nP(E\\vert \\mathcal F)\\equiv \\frac{\\text d (P\\vert _\\mathcal F)_E}{\\text d (P\\vert _\\mathcal F)},\r\n\\]\r\nwhich is sometimes taken as the definition of conditional probability with respect to a sub-\\(\\sigma\\)-algebra. When \\(\\mathcal F\\) is the \\(\\sigma\\)-algebra generated by a finite or countable partition \\(\\mathcal A = (A_i)_{i\\in I}\\) of\r\n\\(\\mathcal \\Omega\\) such that \\(P(A_i)>0\\) for all \\(i\\in I\\), we find:\r\n\\[\r\nP(E\\vert \\mathcal A)=\\sum _{i\\in I} \\frac{P(E\\cap A_i)}{P(A_i)}\\chi _{A_i},\r\n\\]\r\nagain in agreement with elementary definitions.\r\nFinally, if \\(X\\colon \\Omega \\to \\mathbb R\\) is a real-valued random variable, where \\(\\mathbb R\\) is equipped with the Borel \\(\\sigma\\)-algebra, \\(X_*P\\)\r\ncoincides with the Stieltjes measure generated by the cumulative distribution\r\nfunction \\(P_X\\) of \\(X\\). Denoting \\(P(E\\vert X)(x) \\equiv P(E\\vert X = x)\\), we may\r\nwrite:\r\n\\[\r\nP(E \\cap (X \\in B))=\\intop _B P(E\\vert X=x) \\,\\text dP_X(x).\r\n\\]\r\nand, in particular:\r\n\\[\r\nP(E)=\\intop _\\mathbb R P(E\\vert X=x) \\,\\text dP_X(x).\r\n\\]\r\n\r\n\r\n\r\nKallenberg, Olav. 1997. Foundations of Modern Probability. Vol. 2. Springer.\r\n\r\n\r\n\r\nThese claims can be proved by a standard argument using approximations by simple\r\nfunctions.↩︎\r\nFor instance, denoting by\r\n\\(N_E = \\{x \\in \\Omega_X \\vert P(E\\vert X = x) \\geq 0\\}\\), positivity implies that\r\n\\((X_*P)(N_E)=0\\). However, there’s no guarantee that\r\n\\(\\cup _{E\\in \\mathcal E} N_E\\) is also a measure zero set (and in fact it does\r\nnot need to be measurable, since the union is generally uncountable).↩︎\r\n",
    "preview": {},
    "last_modified": "2024-02-07T13:33:21+01:00",
    "input_file": {}
  },
  {
    "path": "posts/2023-10-31-prefix-free-codes/",
    "title": "Prefix-free codes",
    "description": "Generalities about prefix-free (a.k.a. instantaneous) codes",
    "author": [
      {
        "name": "Valerio Gherardi",
        "url": "https://vgherard.github.io"
      }
    ],
    "date": "2023-10-31",
    "categories": [
      "Information Theory",
      "Entropy",
      "Probability Theory"
    ],
    "contents": "\r\nLet \\(\\mathbb X\\) be a finite alphabet and denote by\r\n\\(\\mathbb X ^* = \\coprod _{k = 0} ^{\\infty} \\mathbb X ^k\\) the set of strings of\r\nsymbols from \\(\\mathbb X\\). A binary code on \\(\\mathbb X\\) is a function\r\n\\(f \\colon \\mathbb X \\to \\{0,\\,1\\}^*\\). This is usually extended to a function\r\n\\(f^* \\colon \\mathbb X ^* \\to \\{0,\\,1\\}^*\\) as follows:\r\n\\[\r\nf^* (x_1 \\,x_2\\,\\cdots x_n) = f(x_1) f(x_2)\\cdots f(x_n)\r\n\\]\r\nA code is said to be:\r\nNon-singular if \\(f\\) is injective.\r\nUniquely decodable if \\(f^*\\) is injective.\r\nPrefix-free if \\(x' \\neq x\\) implies that \\(f(x^\\prime) \\neq f(x)s\\) for any \\(s\\)\r\nin \\(\\{0,1\\}^*\\).\r\nFor example:\r\n\\[\r\na \\mapsto 0,\\quad b\\mapsto 00\r\n\\]\r\nis a non-singular but not uniquely decodable code for the alphabet\r\n\\(\\mathbb X = \\{a,\\,b\\}\\), while the code:\r\n\\[\r\na \\mapsto 0,\\quad b\\mapsto 01\r\n\\]\r\nis uniquely decodable, but not prefix-free. Finally, the assignments:\r\n\\[\r\na \\mapsto 0, \\quad b \\mapsto 10, \\quad c \\mapsto 110, \\quad d\\mapsto1110,\\quad\\cdots\r\n\\]\r\nshow that there exist prefix-free codes for any finite or countable alphabet.\r\nThe importance of prefix-free codes lies in the fact that they allow for\r\nreal-time decoding, as soon as the string corresponding to a symbol is received\r\n(which is why they are also called “instantaneous codes”) 1. Binary prefix-free codes can also be interpreted as representing sequences of “Yes-No” questions that univocally identify the\r\nelements of \\(\\mathbb X\\).\r\nAn important property satisfied by all uniquely decodable binary codes, and in\r\nparticular by prefix-free codes, is the Kraft-McMillan inequality:\r\n\\[\r\n\\sum _{x\\in \\mathbb X} 2 ^{-L(x)} \\leq 1\r\n\\]\r\nwhere \\(L (x)\\) is the length of the code for \\(x\\). A converse is also true: for\r\nany set of positive integers\r\n\\((\\ell _{i})_{1\\leq i\\leq N}\\) satisfying the Kraft-McMillan inequality, there\r\nexists a prefix-free code over \\(\\mathbb X = \\{1,\\,2,\\,\\dots,\\,N\\}\\) such that\r\n\\(\\ell _i = L(i)\\).\r\nThis allows to immediately prove the entropy bound for the expected length\r\nof uniquely decodable codes. Given a probability distribution \\(p\\) over\r\n\\(\\mathbb X\\), we have:\r\n\\[\r\n\\begin{split}\r\n\\mathbb E(L(X))&=\\sum _{x\\in \\mathbb X} p(x) L(x) \\\\\r\n                             &=-\\sum _{x\\in \\mathbb X} p(x) \\log _2(2^{-L(x)}) \\\\\r\n                             &=-\\sum _{x\\in \\mathbb X} p(x) \\log _2(p(x))-\\sum _{x\\in \\mathbb X} p(x) \\log _2(\\frac{2^{-L(x)}}{p(x)})\r\n\\end{split}\r\n\\]\r\nThe first term is recognized as the entropy (in bits) of \\(X\\), \\(H_2(X)\\), whereas\r\nthe second term can be bounded using the Jensen and Kraft-McMillan inequalities:\r\n\\[\r\n-\\sum _{x\\in \\mathbb X} p(x) \\log _2(\\frac{2^{-L(x)}}{p(x)}) \\geq -\\log _2\\left(\\sum _{x\\in \\mathbb X} 2^{-L(x)} \\right) \\geq 0.\r\n\\]\r\nWe obtain:\r\n\\[\r\n\\mathbb E (L(X)) \\geq H_2(X)\r\n\\]\r\nFurthermore, noticing that the positive integers\r\n\\(\\ell _i = \\lceil \\log _2\\frac{1}{p(x_i)} \\rceil\\) satisfy the Kraft-McMillan\r\ninequality, we can immediately construct a prefix-free code (the Shannon-Fano\r\ncode) for which \\(L(x_i) = \\ell _i\\). For this code:\r\n\\[\r\n\\mathbb E (L(X)) \\leq H_2(X) + 1.\r\n\\]\r\n\r\nThe decoding\r\nalgorithm works as follows: given a binary string\r\n\\(y_1y_2\\cdots y_M = f^*(x_1 x_2 \\cdots x_N)\\) we start reading the substrings\r\n\\(y_1y_2 \\cdots y_k\\) until we find a match with some code \\(s \\in \\text{Im}(f)\\),\r\nwhich is the code of the first symbol \\(x_1\\) of the original sequence.\r\nWe remove this substring and start reading again, to find the code of the second symbol \\(x_2\\),and so on and so forth. This procedure can obviously be implemented\r\nin an online setting.↩︎\r\n",
    "preview": {},
    "last_modified": "2024-02-07T13:33:21+01:00",
    "input_file": {}
  },
  {
    "path": "posts/2023-07-24-ab-tests-and-repeated-checks/",
    "title": "AB tests and repeated checks",
    "description": "False Positive Rates under repeated checks - a simulation study using R.",
    "author": [
      {
        "name": "Valerio Gherardi",
        "url": "https://vgherard.github.io"
      }
    ],
    "date": "2023-07-27",
    "categories": [
      "AB testing",
      "Sequential Hypothesis Testing",
      "Frequentist Methods",
      "Statistics",
      "R"
    ],
    "contents": "\r\nIntro\r\n\r\n“How is the experiment going?”\r\n\r\nAlso:\r\n\r\n“Do we already see something?”\r\n\r\nAnd my favorite one:\r\n\r\n“Did we already hit significance, or do we need more data?”\r\n\r\nIf you have dealt with experiments with relatively high outcome expectations,\r\nyou will likely have received (or perhaps asked yourself) similar questions\r\nfrom time to time.\r\nIn many data analysis contexts, including but not limited to for-profit ones,\r\nresearchers are always trying to come up with positive results as fast as\r\nthey can. Therefore, it is not at all surprising to see questions such as the\r\nones above regularly arise during the course of an experiment. This is natural\r\nand not a problem per se. What I want to highlight and quantify in this post\r\nis how, if not done carefully, such “real-time” monitoring schedules can\r\nseriously invalidate data analysis - by inflating false positive and false\r\nnegative rates.\r\nGenerally speaking, repeated and ad-hoc checks lead to problems of\r\nselective/simultaneous inference (a topic which I have touched in\r\nother places in this blog).\r\nAvoiding them is not the only valid solution - if you want to learn about some\r\nproper method you may give a look into Sequential Hypothesis Testing,\r\na topic that I may explore in future posts. Here my goal is to understand\r\nthe consequences of naive repeated checking, which can be easily found out\r\nthrough simulation.\r\nWhat’s the matter with repeated checks?\r\nTo understand why problems can arise, recall that the classical\r\nFrequentist framework 1 operates by providing\r\na priori guarantees (bounds) on the probabilities of 2:\r\nA false positive outcome in the absence of any signal: rejecting the null\r\nhypothesis when this is actually true.\r\nA false negative outcome in the presence of some (well-defined) signal.\r\nThe a priori nature of these guarantees means that they are stipulated before\r\nrunning the experiment and assuming a certain experimental schedule 3.\r\nThis implies that any departure from the original schedule can in principle\r\ninvalidate the claimed False Positive Rate (FPR) and False Negative Rate (FNR).\r\nFor instance, the most basic experimental schedule\r\n(actually the one implicitly assumed by virtually all sample size calculators\r\n) is:\r\nCollect data until reaching a prefixed sample size.\r\nRun an hypothesis test (with a prefixed significance threshold for claiming a\r\nsignal).\r\nCommon examples of departures from the original schedule include:\r\nRunning several tests on partial data (before reaching the established sample\r\nsize), to look for an early signal.\r\nStopping the experiment beforehand, because partial data doesn’t show any\r\nsignal.\r\nProlonging the experiment after reaching the established sample size, because\r\nthere’s a “hint” to a signal, but the significance threshold was not reached.\r\nIn what follows, I will focus on the first behavior, whose result is to inflate\r\nthe FPR. Again, there are various ways to perform repeated checks while keeping\r\nthe FPR under control, but that’s not the focus of this post. Instead, I want to\r\nunderstand how FPR is affected when the same test is repeated several times on\r\npartial data.\r\nExample\r\nLet me illustrate the idea with an imaginary marketing experiment. Suppose\r\nyou are optimizing an advertising campaign, say you want to test whether a new\r\nad design performs better than the existing one in terms of click through rates.\r\nYou start sending batches of two thousands ads4 to randomized\r\nusers, half using the new design and half using the old one.\r\nIf the new design does actually perform better, you want to fully switch to it\r\nas soon as possible, so that after each batch send, you compare the click\r\nthrough rates of all ads sent so far, with the idea of switching\r\nas soon as a statistically significant improvement is observed.\r\nConcretely, you propose to do the following:\r\nAt each step, calculate the click through rates for the new and old designs.\r\nCompute a \\(p\\)-value for the hypothesis test5 that tests whether the new design leads\r\nto an higher click through rate than the old one.\r\nIf the \\(p\\)-value is smaller than a certain fixed threshold \\(\\alpha\\), stop the\r\nexperiment and declare the new design as the winner.\r\nIf no \\(p\\)-value smaller than \\(\\alpha\\) is observed after a certain number \\(n\\)\r\nof iterations, stop the experiment and declare the old design as the winner.\r\nNow, the question is: how often would the above procedure declare the new\r\ndesign as the winner, if it doesn’t truly perform better than the old one?\r\n(i.e. what is the FPR of the whole procedure?)\r\nSimulation\r\nTo compute the FPR, we assume that both the new and old designs have in fact the\r\nsame click through rate \\(p = 10 \\%\\). The following function generates a\r\nsequence of \\(n\\) consecutive \\(p\\)-values, computed as described above, that one\r\ncould observe under these circumstances:\r\n\r\n\r\ngenerate_p_values <- function(n = 28,      # maximum number of iterations\r\n                              size = 1e3,  # ad sends per batch\r\n                              p = 0.1      # true common click through rate\r\n                              ) \r\n  {\r\n  successes_a <- cumsum( rbinom(n = n, size = size, prob = p) )  # clicks old ad\r\n  successes_b <- cumsum( rbinom(n = n, size = size, prob = p) )  # clicks new ad\r\n  \r\n  sapply(1:n, \\(k) {\r\n    prop.test(\r\n      x = c(successes_a[k], successes_b[k]), \r\n      n = k * size * c(1, 1), \r\n      alternative = \"greater\",\r\n      )$p.value\r\n  })\r\n}\r\n\r\n\r\nFor instance:\r\n\r\n\r\nset.seed(999)\r\n( p_example <- generate_p_values(n = 5) )\r\n\r\n[1] 0.4704229 0.3932333 0.1669308 0.2219066 0.2592812\r\n\r\nThe function below evaluates such a sequence of \\(p\\)-values with a fixed\r\nthreshold \\(\\alpha\\):\r\n\r\n\r\nevaluate_p_values <- function(p, alpha = 0.05, checkpoints = seq_along(p)) {\r\n  p <- p[checkpoints]\r\n  as.logical(cumsum(p < alpha))\r\n}\r\n\r\n\r\nFor instance, with \\(\\alpha = 20\\%\\), the sequence above would lead to a\r\n(false) positive result, which would be claimed at the third check. Output\r\nlooks as follows:\r\n\r\n\r\nevaluate_p_values(p_example, alpha = 0.2)\r\n\r\n[1] FALSE FALSE  TRUE  TRUE  TRUE\r\n\r\nLet me now simulate a large number of such “experiments”. I will fix\r\n\\(\\alpha = 5\\%\\), a popular choice:\r\n\r\n\r\nset.seed(840)\r\nsim_data <- replicate(1e4, generate_p_values(n = 100) |> evaluate_p_values())\r\n\r\n\r\nThe result is a matrix whose columns are logical vectors such as the one above:\r\n\r\n\r\nsim_data[,1]\r\n\r\n  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\r\n [11] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\r\n [21] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\r\n [31] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\r\n [41] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\r\n [51] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\r\n [61] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\r\n [71] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\r\n [81] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\r\n [91] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\r\n\r\n(a true negative result). Hence, the averages of this matrix rows provide the\r\nfalse positive rates after \\(n\\) checks:\r\n\r\n\r\nfpr <- rowMeans(sim_data)\r\nplot(fpr, type = \"l\", xlab = \"Checks\", ylab = \"False Positive Rate\")\r\nabline(h = 0.05, col = \"red\", lty = \"dashed\")\r\n\r\n\r\n\r\nThe curve above shows how the FPR depends on the number of checks performed,\r\naccording to the procedure described in the previous section. For a single\r\ncheck, this coincides with FPR of an individual binomial test6. However, allowing for repeated checks, we\r\nsee that the overall FPR steadily increases with number of checks. With \\(n = 3\\)\r\nchecks, the FPR is already close to \\(10 \\%\\), almost twice the nominal FPR of\r\neach individual test:\r\n\r\n\r\nfpr[3]\r\n\r\n[1] 0.0929\r\n\r\nWith \\(n \\approx 40\\) checks, the FPR is about \\(25 \\%\\), the same FPR of\r\nan experiment that involves tossing a coin twice, declaring it biased if the\r\nresult is two consecutive “tails”.\r\n\r\n\r\nfpr[40]\r\n\r\n[1] 0.2471\r\n\r\nHere we are assuming that data is re-checked after the arrival of every single\r\nbatch, but there are of course infinite alternative possibilities. For instance,\r\nthe plot below shows what happens when checks are performed after\r\nthe collection of \\(n = 1, \\,4, \\,16, \\,64\\) batches of data (at each checkpoint,\r\nthe expected size of statistical fluctuations is reduced by a factor of \\(2\\)).\r\n\r\n\r\nShow code\r\n\r\ncheckpoints <- c(1, 4, 16, 64)\r\n\r\nset.seed(840)\r\nfpr2 <- replicate(1e4, \r\n          generate_p_values(n = 64) |> \r\n            evaluate_p_values(checkpoints = checkpoints)\r\n          ) |>\r\n  rowMeans()\r\n\r\nplot(fpr2, \r\n     type = \"b\", \r\n     xlab = \"Checks\", \r\n     ylab = \"False Positive Rate\", \r\n     xaxt = \"n\"\r\n     )\r\n\r\nabline(h = 0.05, col = \"red\", lty = \"dashed\")\r\naxis(1, at = seq_along(checkpoints))\r\naxis(3, at = seq_along(checkpoints), labels = paste(checkpoints, \"K\"))\r\nmtext(\"Sample Size\", side = 3, line = 2)\r\n\r\n\r\n\r\nAs a third possible variation, we may think of applying different \\(p\\)-value\r\nthresholds at different checks (a scheme that can be actually made to work in\r\npractice, see for instance the Wikipedia article on the Haybittle–Peto boundary).\r\nThe following plot illustrates this, assuming three (equally spaced) checks\r\nafter the collection of \\(n = 1,\\,2,\\,3\\) data batches, using the significance\r\nthresholds \\(\\alpha = 0.01, \\,0.025, \\,0.05\\), respectively.\r\n\r\n\r\nShow code\r\n\r\nset.seed(840)\r\n\r\nalpha <- c(0.01, 0.025, 0.05)\r\n\r\nfpr3 <- replicate(1e5, \r\n          generate_p_values(n = 3) |> \r\n            evaluate_p_values(alpha = alpha)\r\n          ) |>\r\n  rowMeans()\r\n\r\nplot(fpr3, \r\n     type = \"b\", \r\n     xlab = \"Checks\", \r\n     ylab = \"False Positive Rate\", \r\n     xaxt = \"n\"\r\n     )\r\n\r\nabline(h = alpha[3], col = \"red\", lty = \"dashed\")\r\nabline(h = alpha[2], col = \"blue\", lty = \"dashed\")\r\naxis(1, at = seq_along(fpr3))\r\naxis(3, at = seq_along(fpr3), labels = alpha)\r\nmtext(\"p-value threshold\", side = 3, line = 2)\r\n\r\n\r\n\r\nConclusions\r\nThis post illustrated quantitatively how the performance of repeated checks\r\nduring the process of data collection can affect the overall False Positive Rate\r\nof an experimental analysis. The code provided above can be easily adapted to\r\nsimulate other types of experiments and schemes for interim checks.\r\nA question that may possibly arise is: should I really care? You could argue\r\nthat what I’ve shown here represents a simple trade-off between FPR on one side,\r\nFNR and efficiency (speed) in detection of a signal on the other.\r\nMy answer is a resounding yes, irrespective of whether you are running\r\nexperiments for purely scientific or utilitaristic purposes. If you are unable\r\nto characterize (at least approximately) the FPR and FNR of your analysis,\r\nthe whole point of running a formal test looks very dubious to me. You may as\r\nwell simply collect some data and draw an educated guess.\r\nOther story is if you are able to tell in advance how interim\r\nchecks affect FPR/FNR, and use this knowledge to optimize your analysis\r\nstrategy. This note provides some clues on how to do so.\r\n\r\nI move within this framework because it is the only\r\none I’m reasonably comfortable with, and for which I have a decent understanding\r\nof the decision dynamics that follow from it. That said, I suspect that also\r\nBayesian hypothesis testing can be affected by the kind of issues discussed\r\nhere, although perhaps in a less transparent way, due to working with formal a\r\nposteriori probabilities.↩︎\r\nThe statistical jargon\r\nused to indicate these two types of errors, and the corresponding a priori\r\nguarantees on their probabilities, sounds very mysterious to me\r\n(Type I/II errors, size and power…). I like to think in terms of\r\n“False Positive” and “False Negative” rates, which is the same thing.↩︎\r\nThis is\r\ngenerally true, also in the aforementioned sequential settings. In that case,\r\nthe difference is that the schedule takes into account that continuous and/or\r\ninterim checks will be performed.↩︎\r\nThe actual numbers in this\r\nexample may be totally unrealistic, but that’s beside the point.↩︎\r\nTechnically, this would be a\r\ntwo-sample, one-sided binomial test.↩︎\r\nThe fact that\r\nthis is not exactly equal to \\(\\alpha\\), but in fact slightly smaller, is due to\r\nthe discreteness of the underlying binomial distributions. The \\(p\\)-value of the\r\nbinomial test is defined in such a way to satisfy\r\n\\(\\text{Pr}(p < \\alpha)\\leq \\alpha\\).↩︎\r\n",
    "preview": "posts/2023-07-24-ab-tests-and-repeated-checks/ab-tests-and-repeated-checks_files/figure-html5/unnamed-chunk-7-1.png",
    "last_modified": "2024-02-07T13:33:21+01:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2023-07-11-testing-functional-specification-in-linear-regression/",
    "title": "Testing functional specification in linear regression",
    "description": "Some options in R, using the `{lmtest}` package.",
    "author": [
      {
        "name": "Valerio Gherardi",
        "url": "https://vgherard.github.io"
      }
    ],
    "date": "2023-07-11",
    "categories": [
      "Statistics",
      "Model Misspecification",
      "Regression",
      "Linear Models",
      "R"
    ],
    "contents": "\r\nAnother one from the series on “misspecified regression models” (started with Model Misspecification and Linear Sandwiches).\r\nIntro\r\nLately I’ve been messing around with the {lmtest} R package, a nice collection of hypothesis tests for classical linear model assumptions: linearity (of course) and heteroskedasticity (\\(X\\)-independence of the conditional variance).\r\nJust to clarify, here the relevant “linearity” assumption is that the conditional mean \\(\\mathbb E (Y\\vert X)\\) is given by a linear combination of known functions \\(f_i\\) of \\(X\\):\r\n\\[\r\n\\mathbb E (Y\\vert X) = \\sum _{i = 1}^p \\alpha_if_i(X),\r\n\\]\r\nTesting “linearity” (or, as the title goes, “functional specification”) refers to testing that the chosen set of functions \\(\\{f_{i}\\}_{i=1,\\dots,p}\\) provide a valid description of the data generating process.\r\nFirst attempt: residual autocorrelation\r\nMy initial intuition was that it should be possible to test functional specification through the following procedure:\r\nPerform linear regression with the specified functional form.\r\nOrder the residuals according to the corresponding values of \\(X\\)1.\r\nTest for serial correlation (e.g. performing a Durbin-Watson test, lmtest::dwtest) on the series of ordered residuals.\r\nThe idea is quite simple: if residuals exhibit some systematic pattern when\r\nplotted against \\(X\\), then for close values of \\(X\\), residuals should also tend to be close, leading to a positive correlation. For example:\r\n\r\n\r\nset.seed(840)\r\nx <- rnorm(1e2)\r\ny <- x^3 + rnorm(length(x))\r\nplot(x, y)\r\nabline(lm(y ~ x))\r\n\r\n\r\n\r\nThis, I suspect, is the reason why functions such as lmtest::dwtest() have an\r\norder.by argument which precisely allows to sort residuals before performing the test.\r\nUnfortunately, it turns out that such a method is not only sensitive to functional misspecification, but also to heteroskedasticity - as one can quickly verify by running a simulation using lmtest::dwtest().\r\nThe overall idea is interesting, and works for homoskedastic noise, but the limitation to constant variance may be a bit too stringent. For this reason I turned to a second method, which also allows to take into account the\r\npossibility of heteroskedastic noise.\r\nSecond attempt: RESET + Heteroskedastic Consistent variance estimates\r\nThe idea of RESET tests (see ?lmtest::resettest()) is also quite simple:\r\nif the linear model is correct, there should be relatively little gain in adding additional non-linear functions of the original covariates to the fit’s formula.\r\nThe statistical significance of these model adjustments can be tested through a\r\nstandard \\(Z\\)-test (or \\(F\\)-test, for multiple adjustments at once), with an\r\nimportant\r\ncatch: the covariance matrix of regression coefficients used in these tests can\r\nbe chosen to be robust to heteroskedasticity (see Model Misspecification and Linear Sandwiches).\r\nThe code that follows illustrates this procedure with an example dataset. The following section contains a more in-depth simulation study of the property of the RESET\r\ntest.\r\n\r\n\r\nfit_cars <- lm(dist ~ speed, data = cars)\r\nwith(data = cars, plot(speed, dist))\r\nabline(fit_cars)\r\n\r\n\r\n\r\n\r\n\r\nlmtest::resettest(fit_cars, \r\n                  type = \"regressor\", \r\n                  power = 2,\r\n                  vcov = sandwich::vcovHC\r\n                  )\r\n\r\n\r\n    RESET test\r\n\r\ndata:  fit_cars\r\nRESET = 2.32, df1 = 1, df2 = 48, p-value = 0.1344\r\n\r\nUnfortunately, the output of lmtest::resettest does not include the results of the extended fit, which can be useful to understand the impact of the omitted covariates on the overall model picture (independently of the RESET \\(p\\)-value under the null hypothesis). 2\r\nIn order to get some insight on the effect of misspecification, we need to\r\nmanually perform the RESET fit and make the relevant comparisons:\r\n\r\n\r\nfit_cars_sq <- lm(dist ~ speed + I(speed*speed), data = cars)\r\nwith(data = cars, plot(speed, dist))\r\nabline(fit_cars)\r\nlines(x = cars$speed, y = fitted(fit_cars_sq), col = \"blue\")\r\n\r\n\r\n\r\nRESET + HC vcov: a simulation study\r\nWe consider a univariate regression problem, with a regressor \\(X \\sim \\mathcal N (0,1)\\), a and a response \\(Y\\). We will consider three ground truth distributions for \\(Y\\) given \\(X\\):\r\n\\[\r\n\\begin{split}\r\n\\text{T1}:& \\qquad Y=\\frac{1}{5}X+Z\\\\\r\n\\text{T2}:& \\qquad Y=\\frac{1}{5}X + \\vert X \\vert Z\\\\\r\n\\text{T3}:& \\qquad Y=\\frac{1}{5}X^3 + Z\r\n\\end{split}\r\n\\]\r\nwhere \\(Z\\sim \\mathcal N (0,1)\\) is independent from \\(X\\). We will study,\r\nthrough simulation, the \\(p\\)-value distribution of the RESET test for linear\r\nregression based on the model \\(Y = q+m X + \\varepsilon\\), where \\(q\\) and \\(m\\) are\r\nunknown coefficients, and \\(\\epsilon\\) is a noise term with unknown variance.\r\nIt follows that the model is correctly specified with respect to \\(\\text{T1}\\), has functional misspecification with respect to \\(\\text{T3}\\), and potentially noise misspecification3 with respect to \\(\\text{T2}\\), if we model variance as being independent of \\(X\\).\r\nData will consist of independent samples \\((X_i, Y_i)\\) from the joint distribution of \\(X\\) and \\(Y\\). To facilitate simulation, we define some helpers in the code chunk below.\r\n\r\n\r\nShow code\r\n\r\n#' Helper to generate data with prescribed: \r\n#' * Regressor distribution: `x`\r\n#' * Response conditional mean: `f`\r\n#' * Response conditional noise: `eps` \r\ndgp_fun <- function(x, f, eps) {\r\n  function(n) {\r\n    .x <- x(n)\r\n    data.frame(x = .x, y = f(.x) + eps(.x))\r\n  }\r\n}\r\n\r\n#' Helper to simulate results of linear regression, with prescribed:\r\n#' * Data generating process: `dgp`\r\n#' * Sample size of simulated datasets: `n`\r\n#' * Summary function (e.g. p-value of RESET test): `summarize_fun`\r\nlm_simulate <- function(dgp, n, summarize_fun, nsim, simplify) {\r\n  replicate(nsim, {\r\n    data <- dgp(n)\r\n    fit <- lm(y ~ x, data)\r\n    summarize_fun(fit)\r\n  }, simplify = simplify)\r\n} \r\n\r\n#' Helper to perform RESET test on a `lm` fit object, and plot the p-value\r\n#' distribution. The estimator for regression coefficients variance-covariance\r\n#' matrix can be set through the `vcov` argument.\r\nreset_pvalue <- function(\r\n    dgp, n,  # Data generating process params\r\n    power = 2:3, type = \"regressor\", vcov = sandwich::vcovHC,  # RESET params\r\n    nsim = 1e3  # Simulation params\r\n    ) \r\n{\r\n  summarize_fun <- function(fit)\r\n    lmtest::resettest(fit, power = power, type = type, vcov = vcov)$p.value\r\n  \r\n  p <- lm_simulate(\r\n    dgp = dgp, \r\n    n = n, \r\n    summarize_fun = summarize_fun, \r\n    nsim = nsim,\r\n    simplify = TRUE\r\n    )\r\n  \r\n  return(data.frame(\r\n    p = p,\r\n    dgp = deparse(substitute(dgp)),\r\n    n = n,\r\n    vcov = deparse(substitute(vcov)),\r\n    nsim = nsim\r\n  ))\r\n  \r\n}\r\n\r\n\r\nFurthermore, we will use:\r\n\r\n\r\nlibrary(dplyr)\r\nlibrary(ggplot2)\r\n\r\n\r\nfor plotting.\r\nData generating processes\r\nThe data generating processes can be defined as follows:\r\n\r\n\r\ndgp_t1 <- dgp_fun(\r\n  x = rnorm,\r\n  f = \\(x) 0.2 * x,\r\n  eps = \\(x) rnorm(length(x))\r\n)\r\n\r\ndgp_t2 <- dgp_fun(\r\n  x = rnorm,\r\n  f = \\(x) 0.2 * x,\r\n  eps = \\(x) abs(x) * rnorm(length(x))\r\n)\r\n\r\ndgp_t3 <- dgp_fun(\r\n  x = rnorm,\r\n  f = \\(x) 0.2 * x^3,\r\n  eps = \\(x) rnorm(length(x))\r\n)\r\n\r\n\r\nData generated according to these three distributions looks as follows:\r\n\r\n\r\nShow code\r\n\r\nbind_rows(\r\n  tibble(dgp_t1(100), dgp = \"dgp_t1\"),\r\n  tibble(dgp_t2(100), dgp = \"dgp_t2\"),\r\n  tibble(dgp_t3(100), dgp = \"dgp_t3\"),\r\n  ) |>\r\n  ggplot(aes(x = x, y = y)) +\r\n    geom_point() +\r\n    geom_smooth(method = \"lm\", formula = y ~ x, se = F) +\r\n    facet_grid(~ dgp)\r\n\r\n\r\n\r\nRESET \\(p\\)-value distributions\r\nThe RESET \\(p\\)-value cumulative distributions for the three ground truths \\(\\text{T1}\\),\r\n\\(\\text{T2}\\) and \\(\\text{T3}\\) are shown below\r\n4. The \\(y\\) coordinates of these\r\nplots can be interpreted as follows:\r\nFor the ground truths \\(\\text{T1}\\) and \\(\\text{T2}\\), \\(y\\) represents\r\nthe false positive rate (or Type I Error Rate) in rejecting the null hypothesis\r\n“no functional misspecification” at a given size of the test\r\n\\(x\\). For a valid \\(p\\)-value, these curves should lie on or below the straight\r\nline \\(y = x\\).\r\nFor the ground truth \\(\\text{T3}\\), \\(y\\) represents the Power (or one minus the\r\nType II Error Rate) in detecting functional misspecification at a given size\r\n\\(x\\). High values correspond to high sensitivity.\r\n\r\n\r\nShow code\r\n\r\nsim_data <- dplyr::bind_rows(\r\n  reset_pvalue(dgp = dgp_t1, n = 10, vcov = sandwich::vcovHC),\r\n  reset_pvalue(dgp = dgp_t1, n = 100, vcov = sandwich::vcovHC),\r\n  reset_pvalue(dgp = dgp_t1, n = 1000, vcov = sandwich::vcovHC),\r\n  reset_pvalue(dgp = dgp_t1, n = 10000, vcov = sandwich::vcovHC),\r\n  reset_pvalue(dgp = dgp_t1, n = 10, vcov = stats::vcov),\r\n  reset_pvalue(dgp = dgp_t1, n = 100, vcov = stats::vcov),\r\n  reset_pvalue(dgp = dgp_t1, n = 1000, vcov = stats::vcov),\r\n  reset_pvalue(dgp = dgp_t1, n = 10000, vcov = stats::vcov),\r\n  \r\n  reset_pvalue(dgp = dgp_t2, n = 10, vcov = sandwich::vcovHC),\r\n  reset_pvalue(dgp = dgp_t2, n = 100, vcov = sandwich::vcovHC),\r\n  reset_pvalue(dgp = dgp_t2, n = 1000, vcov = sandwich::vcovHC),\r\n  reset_pvalue(dgp = dgp_t2, n = 10000, vcov = sandwich::vcovHC),\r\n  reset_pvalue(dgp = dgp_t2, n = 10, vcov = stats::vcov),\r\n  reset_pvalue(dgp = dgp_t2, n = 100, vcov = stats::vcov),\r\n  reset_pvalue(dgp = dgp_t2, n = 1000, vcov = stats::vcov),\r\n  reset_pvalue(dgp = dgp_t2, n = 10000, vcov = stats::vcov),\r\n  \r\n  reset_pvalue(dgp = dgp_t3, n = 10, vcov = sandwich::vcovHC),\r\n  reset_pvalue(dgp = dgp_t3, n = 100, vcov = sandwich::vcovHC),\r\n  reset_pvalue(dgp = dgp_t3, n = 1000, vcov = sandwich::vcovHC),\r\n  reset_pvalue(dgp = dgp_t3, n = 10000, vcov = sandwich::vcovHC),\r\n  reset_pvalue(dgp = dgp_t3, n = 10, vcov = stats::vcov),\r\n  reset_pvalue(dgp = dgp_t3, n = 100, vcov = stats::vcov),\r\n  reset_pvalue(dgp = dgp_t3, n = 1000, vcov = stats::vcov),\r\n  reset_pvalue(dgp = dgp_t3, n = 10000, vcov = stats::vcov)\r\n)\r\n\r\nsim_data |>\r\n  mutate(n_label = paste(\"n\", n, sep = \" = \")) |>\r\n  ggplot(aes(p, color = vcov)) + \r\n    stat_ecdf() +\r\n    scale_color_discrete(\"vcov\") + \r\n    scale_x_continuous(\"p-value\", labels = scales::percent) + \r\n    scale_y_continuous(\"Empirical CDF\", labels = scales::percent) +\r\n    geom_abline(slope = 1, intercept = 0, linetype = \"dashed\") +\r\n    facet_grid(n_label ~ dgp, ) +\r\n    ggtitle(\r\n      \"p-value distribution of RESET test\",\r\n      paste(\"nsim\", max(sim_data$nsim), sep = \" = \")\r\n      )\r\n\r\n\r\n\r\nThe plots illustrate qualitatively the behavior of the RESET test with and\r\nwithout the vcov correction for noise heteroskedasticity. Various remarks:\r\nThe test with the standard stats::vcov estimator is sensitive not only to\r\npure functional misspecification (\\(\\text{T3}\\)), but also to pure heteroskedastic\r\nnoise (\\(\\text{T2}\\)).\r\nThe sandwich::vcovHC estimator leads to an asymptotically correct Type I\r\nError Rate in the \\(\\text{T2}\\) case, but to a somewhat lower sensitivity (with\r\nrespect to stats::vcov) in the \\(\\text{T3}\\) case.\r\nWe need to keep in mind that sandwich::vcovHC only provides\r\nasymptotically correct variance-covariance estimates. Thus, for small \\(n\\), the\r\n\\(p\\)-value distribution of the RESET test using the sandwich::vcovHC can also\r\nbe distorted (even in the perfectly specified case \\(\\text{T1}\\)).\r\nConclusions\r\nThis post explained how to perform model validation checks that are sensitive to functional misspecification, but relatively robust to heteroskedasticity.\r\nThe general idea is to extend the original model, allowing for more general functional forms in the conditional mean of the response, and test whether such extension significantly improves the fit. The catch is that, when performing the latter test, we need to somehow keep into account the possibility of heteroskedastic noise.\r\nThis idea is readily implemented with RESET tests for linear models: one can simply use a variance-covariance estimator for regression coefficients that is robust to heteroskedasticity. In R, this can be achieved with a single line of code, using lmtest::resettest(vcov = sandwich::vcovHC).\r\nWith some effort, one may be able to generalize such a procedure to any parametric model fitted by Maximum Likelihood Estimation, since a sandwich estimator is available also in this more general case (see e.g. the presentation of sandwich estimators in this paper by D.A. Freedman).\r\n\r\nHere I’m implicitly assuming that we have a single \\(X\\), but a similar logic should also apply to multivariate regression.↩︎\r\nWith enough data, the RESET test would likely test positive for a variety of misspecifications, but that doesn’t mean that such misspecification are necessarily relevant from a modeling perspective. Here, for instance, a large coefficient for \\(\\text{(speed)}^2\\) with a \\(Z\\)-score of two \\(\\sigma\\)s could be more worrying than a minuscule coefficient with a \\(Z\\)-score of five \\(\\sigma\\)s.↩︎\r\nSometimes also referred to as “second order misspecification”.↩︎\r\nThe code is a bit unelegant 😬 but it works.↩︎\r\n",
    "preview": "posts/2023-07-11-testing-functional-specification-in-linear-regression/testing-functional-misspecification-in-linear-regression_files/figure-html5/unnamed-chunk-1-1.png",
    "last_modified": "2024-02-07T13:33:21+01:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2023-06-14-sum-and-ratio-of-independent-random-variables/",
    "title": "Sum and ratio of independent random variables",
    "description": "Sufficient conditions for independence of sum and ratio.",
    "author": [
      {
        "name": "Valerio Gherardi",
        "url": "https://vgherard.github.io"
      }
    ],
    "date": "2023-06-14",
    "categories": [
      "Mathematics",
      "Probability Theory"
    ],
    "contents": "\r\nLet \\(X\\) and \\(Y\\) be two continuous independent random variables, with joint\r\ndensity \\(f_{XY}(x,y)=f_X(x)f_Y(y)\\). Define:\r\n\\[\r\ns = x+y, \\qquad r = x/y,\r\n\\]\r\nwith inverse transformation given by:\r\n\\[\r\ny = \\frac{s}{1+r},\\qquad x = \\frac{rs}{1+r}.\r\n\\]\r\nThe Jacobian of the \\((x,y) \\mapsto (s,r)\\) transformation is:\r\n\\[\r\n\\left|\\dfrac{\\partial (s,r)}{\\partial(x,y)}\\right|= \\dfrac{(1+r)^2}{s}.\r\n\\]\r\nHence the joint density of \\(S = X+Y\\) and \\(R = X/Y\\) is given by:\r\n\\[\r\nf_{SR}(s,r) = f(x,y)\\left|\\dfrac{\\partial (x,y)}{\\partial(s,r)}\\right|=f_X(\\frac{rs}{1+r})f_Y(\\frac{s}{1+r})\\frac{s}{(1+r)^2}.\r\n\\]\r\nThe necessary and sufficient condition for this to factorize into a product,\r\n\\(f_{SR}(s,r)\\equiv f_S(s)f_R(r)\\), is that \\(f_X(x)f_Y(y) = g_S(s)g_R(r)\\)\r\nfor some functions \\(g_S\\) and \\(g_R\\).\r\nThis is true for all functions \\(f_X\\) and \\(f_Y\\) from the family:\r\n\\[\r\n\\phi(t) = \\text{const} \\times  t^\\alpha e^{-\\beta t}.\r\n\\]\r\nThis includes some important special cases:\r\nThe \\(\\chi ^2\\) distribution (\\(\\alpha = \\frac{\\nu}{2}-1,\\,\\beta = \\frac{1}{2}\\)).\r\nThe exponential distribution: \\(\\alpha = 0,\\,\\beta >0\\).\r\nThe “homogeneous” distribution: \\(\\beta = 0\\) (restricted to the appropriate\r\ndomain).\r\nThe uniform distribution: \\(\\alpha = \\beta = 0\\).\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2024-02-07T13:33:21+01:00",
    "input_file": {}
  },
  {
    "path": "posts/2023-06-07-fishers-randomization-test/",
    "title": "Fisher's Randomization Test",
    "description": "Notes and proofs of basic theorems",
    "author": [
      {
        "name": "Valerio Gherardi",
        "url": "https://vgherard.github.io"
      }
    ],
    "date": "2023-06-07",
    "categories": [
      "Statistics",
      "Frequentist Methods",
      "Causal Inference"
    ],
    "contents": "\r\nLet \\(N\\in \\mathbb N\\) be fixed, and let:\r\n\\(\\mathbf Y(1),\\,\\mathbf Y(0)\\in \\mathbb R ^N\\) be random vectors, with\r\ncomponents \\(Y_i(1),Y_i(0)\\in \\mathbb R\\),\r\n\\(\\mathbf Z\\) be a random vector with components \\(Z_i \\in \\{0,1\\}\\), independent\r\nfrom \\(\\mathbf Y(1)\\) and \\(\\mathbf Y(0)\\) above,\r\n\\(\\mathbf Y = \\mathbf Z\\times \\mathbf Y(1)+(1-\\mathbf Z)\\times \\mathbf Y(0)\\) (multiplication is component-wise).\r\nGiven a scalar function \\(t = t(\\mathbf Z, \\,\\mathbf Y)\\in \\mathbb R\\), define:\r\n\\[\r\nP(t,\\mathbf Z, \\mathbf Y)=\\sum _{\\mathbf Z '}\\text{Pr}_\\mathbf Z(\\mathbf Z')\\cdot I(t(\\mathbf Z',\\mathbf Y)\\geq t(\\mathbf Z,\\mathbf Y)),\r\n\\]\r\nwhere \\(\\text{Pr}_\\mathbf Z(\\cdot)\\) is the marginal distribution of treatment assignments.\r\nTheorem. If \\(\\mathbf Y(0) = \\mathbf Y(1)\\) then:\r\n\\[\r\n\\text{Pr}(P(t,\\mathbf Z,\\mathbf Y)\\leq \\alpha) \\leq \\alpha.\r\n\\]\r\nProof. Let \\(\\mathbf Z'\\) be distributed according to\r\n\\(\\text{Pr}_\\mathbf Z(\\cdot)\\), and define\r\n\\(\\mathbf Y' = \\mathbf Z'\\times \\mathbf Y(1)+(1-\\mathbf Z')\\times \\mathbf Y(0)\\). Given \\(t_0\\in \\mathbb R\\), we observe that:\r\n\\[\r\n\\text {Pr}(t(\\mathbf Z',\\mathbf Y')\\geq t_0 \\,\\vert\\,\\mathbf Y(0),\\,\\mathbf Y(1)) = \\sum _{\\mathbf Z '}\\text{Pr}_\\mathbf Z(\\mathbf Z')\\cdot I(t(\\mathbf Z',\\mathbf Y')\\geq t_0).\r\n\\]\r\nNow, if \\(\\mathbf Y(0) = \\mathbf Y(1)\\), we have \\(t(\\mathbf Z',\\mathbf Y') = t(\\mathbf Z',\\mathbf Y)\\), so that we may replace \\(\\mathbf Y'\\) with \\(\\mathbf Y\\)\r\nin the RHS of the previous equation. If, moreover, we choose \\(t_0= t(\\mathbf Z , \\mathbf Y)\\) we obtain:\r\n\\[\r\nP(t, \\mathbf Z, \\mathbf Y) = \\text {Pr}(t(\\mathbf Z',\\mathbf Y')\\geq t(\\mathbf Z,\\mathbf Y) \\,\\vert\\,\\mathbf Y(0),\\mathbf Y(1)).\r\n\\]\r\nIn other words, \\(P(t,\\mathbf Z, \\mathbf Y)\\) is a conditional \\(p\\)-value.\r\nTherefore:\r\n\\[\r\n\\text{Pr}(P(t,\\mathbf Z,\\mathbf Y)\\leq \\alpha \\,\\vert\\,\\mathbf Y(0),\\mathbf Y(1)) \\leq \\alpha.\r\n\\]\r\nSince this is valid for any value of \\(\\mathbf Y (0)\\) and \\(\\mathbf Y(1)\\), the thesis follows.\r\nIn the usual setting of causal inference, we interpret:\r\n\\(Z_i\\) as the treatment assignment for the \\(i\\)-th statistical unit, \\(Z_i = 0,1\\)\r\nstanding for “treatment” and “control”, respectively.\r\n\\(Y_i(1)\\) and \\(Y_i(0)\\) as the potential outcomes for the \\(i\\)-th unit under treatment and control, respectively.\r\n\\(Y_i\\) as the observed outcome for the \\(i\\)-th unit.\r\n\\(t(\\cdot)\\) as a test statistic used to test the null hypothesis \\(\\mathbf Y(1)= \\mathbf Y (0)\\).\r\n\\(P(t,\\mathbf Z,\\mathbf Y)\\) is the randomization \\(p\\)-value of \\(t(\\mathbf Z, \\mathbf Y)\\) in a Fisher Randomization Test.\r\nFisher’s “sharp” null hypothesis is an equality between random variables, the potential outcomes. Typical examples for the distribution \\(\\text{Pr}_\\mathbf Z(\\cdot)\\) are:\r\nCompletely Randomized Experiment (CRE):\r\n\\[\r\n\\text{Pr}_\\mathbf Z (\\mathbf Z) = \\begin{cases}\r\n\\binom N {n_1} ^{-1} & \\sum _{i=1}^N Z_i =n_1, \\\\\r\n0 & \\text{otherwise.}\r\n\\end{cases}\r\n\\]\r\nBernoulli Randomized Experiment (BRE):\r\n\\[\r\n\\text{Pr}_\\mathbf Z (\\mathbf Z) = \\prod _{i=1} ^N \\pi^{Z_i}(1-\\pi)^{1-Z_i}.\r\n\\]\r\nAn example of test statistic is the difference in means between the treatment\r\nand control group, that can be written:\r\n\\[\r\nt(\\mathbf Z , \\mathbf Y) = \\sum_i c_i Y_i,\\qquad c_i=\\frac{Z_i}{\\sum _iZ_i} - \\frac{1-Z_i}{\\sum _i(1-Z_i)}.\r\n\\]\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2024-02-07T13:33:21+01:00",
    "input_file": {}
  },
  {
    "path": "posts/2023-06-07-p-values-and-measure-theory/",
    "title": "p-values and measure theory",
    "description": "Self-reassurance that p-value properties don't depend on regularity \nassumptions on the test statistic.",
    "author": [
      {
        "name": "Valerio Gherardi",
        "url": "https://vgherard.github.io"
      }
    ],
    "date": "2023-06-07",
    "categories": [
      "Probability Theory",
      "Measure Theory",
      "Frequentist Methods",
      "Statistics"
    ],
    "contents": "\r\nLet \\((\\Omega, \\mathcal E, \\text{Pr})\\) be a probability space, where \\(\\Omega\\) is the\r\nspace of random outcomes, \\(\\mathcal E\\) the \\(\\sigma\\)-algebra of measurable\r\nevents, and \\(P\\) the probability measure.\r\nGiven a random variable \\(T\\colon \\Omega \\to \\mathbb R\\), define \\(p_T\\colon \\Omega \\to \\left[0,1\\right]\\) as:\r\n\\[\r\np_T(\\omega) = \\text{Pr}(\\{\\omega'\\in \\Omega\\,\\vert\\, T(\\omega')\\geq T(\\omega)\\})\r\n\\]\r\nTheorem. \\(p_T\\) is measurable and\r\n\\(\\text{Pr}(p_T\\leq \\alpha) \\leq \\alpha\\) for all \\(\\alpha \\in \\left[0,1\\right]\\).\r\nEquality holds if and only if there exists a\r\nsequence \\(\\{\\omega_n\\}_{n\\in \\mathbb N}\\) such that\r\n\\(p_T(\\omega_n) \\leq \\alpha\\), and \\(p_T(\\omega _n)\\to \\alpha\\) as \\(n \\to \\infty\\).\r\nProof. Let \\(\\alpha\\in\\left[0,1\\right]\\), and denote:\r\n\\[\r\nE_T(\\omega) = \\{\\omega'\\in \\Omega\\,\\vert\\, T(\\omega')\\geq T(\\omega)\\},\r\n\\]\r\nso that \\(p_T(\\omega) = \\text{Pr}(E_T(\\omega))\\).\r\nAssume first that there exists \\(\\omega_\\alpha \\in p_T^{-1}(\\alpha)\\), that is to\r\nsay \\(\\text{Pr}(E_T(\\omega)) = \\alpha\\). We can show that:\r\n\\[\r\nN_T(\\omega_\\alpha) = \\{\\omega \\vert p_T(\\omega) \\leq \\alpha\\} \\backslash E_T(\\omega_\\alpha)\r\n\\]\r\nis a measurable, zero probability set, which proves the thesis for this\r\nparticular case. As a matter of fact, for any \\(\\omega \\in \\Omega\\), if\r\n\\(p_T(\\omega)\\leq \\alpha\\) and \\(T(\\omega) <T(\\omega_\\alpha)\\), then we must have:\r\n\\[\r\n\\text{Pr}(\\{\\omega'\\in \\Omega\\,\\vert\\,\r\n                                                                T(\\omega_\\alpha)>T(\\omega')\\geq T(\\omega)\\}\r\n                                                                ) = p_T(\\omega) - \\alpha=0.\r\n\\]\r\nIf \\(t_* = \\inf_{p_T(\\omega)\\leq \\alpha}T(\\omega)\\) and\r\n\\(\\{a _n\\}_{n \\in \\mathbb N}\\) is a sequence in \\(\\Omega\\) such that\r\n\\(T(a _n)\\to t_*\\) as \\(n\\to \\infty\\), then:\r\n\\[\r\nN_T(\\omega _\\alpha) \\subseteq \\cup _n \\{\\omega'\\in \\Omega\\,\\vert\\,\r\n                                                                T(\\omega_\\alpha)>T(\\omega')\\geq T(a_n)\\},\r\n\\]\r\nthe right hand side being a probability zero set.\r\nIf \\(p_T^{-1}(\\alpha)\\) is empty, let\r\n\\(\\alpha^* = \\sup _{p_T(\\omega)\\leq \\alpha}p(\\omega)\\), and let\r\n\\(\\{b _n\\}_{n\\in \\mathbb N}\\) be a sequence in \\(\\Omega\\) such that\r\n\\(p_T(b_n)\\to \\alpha^*\\) as \\(n\\to \\infty\\). Then:\r\n\\[\r\n\\{\\omega \\vert p_T(\\omega) \\leq \\alpha\\}=\r\n\\{\\omega \\vert p_T(\\omega) \\leq \\alpha^*\\}=\r\n\\cup _n \\{\\omega \\vert p_T(\\omega) \\leq p_T(b_n)\\},\r\n\\]\r\nso that, from the particular case proved earlier, we have:\r\n\\[\r\n\\text{Pr}(p_T \\leq \\alpha) = \\lim _{n \\to \\infty} \\text{Pr}(p_T \\leq p_T(b_n)) \\leq \\lim _{n \\to \\infty} p_T(b_n) = \\alpha ^* \\leq \\alpha,\r\n\\]\r\nas was to be proved.\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2024-02-07T13:33:21+01:00",
    "input_file": {}
  },
  {
    "path": "posts/2023-05-20-linear-regression-with-autocorrelated-noise/",
    "title": "Linear regression with autocorrelated noise",
    "description": "Effects of noise autocorrelation on linear regression. Explicit formulae and a simple simulation.",
    "author": [
      {
        "name": "Valerio Gherardi",
        "url": "https://vgherard.github.io"
      }
    ],
    "date": "2023-05-25",
    "categories": [
      "Statistics",
      "Regression",
      "Time Series",
      "Linear Models",
      "Model Misspecification",
      "R"
    ],
    "contents": "\r\nConsider two time series \\(Y_t\\) and \\(X_t\\) such that:\r\n\\[\r\nY_t =  X_t \\cdot \\beta+\\eta_t                               \\tag{1}\r\n\\]\r\nwhere \\(\\eta_t\\) is \\(\\text{AR}(1)\\) noise:\r\n\\[\r\n\\eta_{t+1} = \\alpha \\eta_t + \\epsilon_t, \\qquad \\epsilon _t \\sim \\mathcal N(0,\\sigma^2_0)                                                               \\tag{2}\r\n\\]\r\nBy iteration of (2), we see that \\(\\eta_t\\) has gaussian unconditional distribution:\r\n\\[\r\n\\eta_t \\sim \\mathcal N (0, \\sigma ^2),\\qquad \\sigma^2 \\equiv \\frac{\\sigma^2_0}{1-\\alpha ^2}                             \\tag{3}\r\n\\]\r\nso that individual observations of \\((X_t,\\,Y_t)\\) are distributed according to a perfectly specified linear model.\r\nThis does not mean that, given observational data \\(\\{(X_t,\\,Y_t)\\}_{t = 1,\\,2,\\,\\dots,\\,T}\\), we are allowed to make standard linear model assumptions to perform valid inference on the parameters \\(\\beta\\) and \\(\\sigma\\) of Eqs. (1) and (3). Since the noise terms \\(\\eta _t\\) are not independent draws from a single distribution, but are rather autocorrelated, the usual OLS variance estimate under linear model assumptions will be biased, as we show below 1.\r\nIt is fairly easy to work out the consequences of autocorrelation. Suppose, more generally, that the error term \\(\\eta _t\\) is a stationary time series with unconditional mean \\(\\mathbb E(\\eta_t)=0\\) and unconditional variance \\(\\text{Var}(\\eta _t)=\\sigma ^2\\). The OLS estimate of \\(\\beta\\) is2:\r\n\\[\r\n\\hat \\beta =(\\mathbf X^T\\mathbf X)^{-1}\\mathbf X^T\\mathbf Y=\\beta + (\\mathbf X^T\\mathbf X)^{-1} \\mathbf X^T \\mathbf{η}, \\tag{4}\r\n\\]\r\nwhich is unbiased since \\(\\mathbb E (\\mathbf{η}) = 0\\). The estimate of the noise variance \\(\\sigma ^2\\), on the other hand:\r\n\\[\r\n\\begin{split}\r\n\\hat \\sigma ^2  & = \\frac{(\\mathbf Y - \\mathbf X\\hat \\beta)^T(\\mathbf Y - \\mathbf X\\hat \\beta)}{N-p}= \\frac{\\mathbf{η}^T(\\mathbf 1-\\mathbf H)\\mathbf{η} }{N-p} \\\\\r\n\\mathbb E (\\hat \\sigma ^2) & = \\dfrac{\\text {Tr}\\left[(\\mathbf 1- \\mathbb E(\\mathbf H))\\cdot  \\text {Cor}(\\mathbf{η})\\right]}{N-p}\\sigma ^2                     \r\n\\end{split}\r\n\\]\r\nwhere \\(\\mathbf H = \\mathbf X(\\mathbf X^T\\mathbf X)^{-1}\\mathbf X^T\\) as usual, and we have used the fact that \\(\\mathbb {V}( \\mathbf{η} ) = \\sigma ^2 \\cdot \\text {Cor}(\\mathbf{η})\\) (since each \\(\\eta_t\\) has the same unconditional variance \\(\\sigma ^2\\)). Hence the \\(\\hat \\sigma ^2\\) OLS estimate is biased if \\(\\text{Cor}(\\mathbf{η})\\neq \\mathbf 1\\).\r\nSimilarly, the variance-covariance matrix of the OLS \\(\\hat \\beta\\) estimator is:\r\n\\[\r\n\\mathbb V (\\hat \\beta) = \\mathbb E\\left[(\\mathbf X^T\\mathbf X)^{-1}\\mathbf X^T\\text {Cor}(\\mathbf{η})\\mathbf X (\\mathbf X^T\\mathbf X)^{-1} \\right]\\sigma^2\r\n\\]\r\nwhereas its OLS estimate is:\r\n\\[\r\n\\hat {\\mathbb V} (\\hat \\beta) = (\\mathbf X^T\\mathbf X)^{-1} \\hat \\sigma ^2\r\n\\]\r\nwhich is biased for \\(\\text{Cor}(\\mathbf{η})\\neq \\mathbf 1\\).\r\nEven though the variance estimators are themselves biased, the biases could still vanish in the asymptotic limit. This is the case for \\(\\hat \\sigma ^2\\), as we can see by rewriting:\r\n\\[\r\n\\dfrac{\\mathbb E (\\hat \\sigma ^2)}{\\sigma ^2}-1 = -\\dfrac{1}{{N-p}}\\text {Tr}\\left[\\mathbb E(\\mathbf H)^T\\cdot(\\text {Cor}(\\mathbf{η})-\\mathbf 1)\\cdot \\mathbb E(\\mathbf H)\\right]                      \r\n\\]\r\nwhere we have used the projector properties of \\(\\mathbf H\\) to recast the trace in terms of a symmetric operator. In principle, nothing prevents the operator above to have \\(O(N)\\) eigenvalues, which would make the \\(\\hat \\sigma ^2\\) estimator asymptotically biased3. In realistic cases, one expects the correlations \\(\\text{Cor}(\\eta_t,\\eta_{t'})\\) to decay exponentially with \\(\\vert t - t'\\vert\\) 4 , in which case the trace is bounded to be of \\(O(p)\\), and \\(\\mathbb E(\\hat \\sigma ^2) \\to \\sigma ^2\\) as \\(N\\to \\infty\\).\r\nFor \\(\\hat {\\mathbb V} (\\hat \\beta)\\) things are not so favorable. It is enough to consider a special case of a plain intercept term: \\(X=1\\). In this case, we find with some manipulations:\r\n\\[\r\n\\begin{split}\r\n\\mathbb V (\\hat \\beta) &= \\frac{\\sigma ^2}{N}\\left(1+\\frac{1}{N}\\sum _{t\\neq t'} \\text{Cor}(\\eta_t,\\eta_{t'})\\right),\\\\\r\n\\mathbb E(\\hat {\\mathbb V} (\\hat \\beta)) & = \\frac{\\sigma ^2}{N}\\left(1-\\frac{1}{N(N-1)}\\sum _{t\\neq t'} \\text{Cor}(\\eta_t,\\eta_{t'})\\right)\r\n\\end{split}\r\n\\]\r\nSince \\(\\sum _{t\\neq t'}\\text{Cor}(\\eta_t,\\eta_{t'})=O(N)\\), we see that:\r\n\\[\r\n\\lim _{N\\to \\infty} \\dfrac{\\mathbb E(\\hat {\\mathbb V} (\\hat \\beta))}{\\mathbb V(\\hat \\beta)}\\neq 1\r\n\\]\r\nwhich amounts to say that \\(\\hat {\\mathbb V} (\\hat \\beta)\\) is asymptotically biased5.\r\nIllustration\r\nThe (foldable) block below defines helpers to simulate the results of linear regression on data generated according to \\(Y_t = f(X_t) + \\eta _t\\). These are the same functions used in my previous post on misspecification and sandwich estimators - slightly adapted to the current case.\r\n\r\n\r\nShow code\r\n\r\nlibrary(dplyr)\r\nlibrary(ggplot2)\r\n\r\nrxy_fun <- function(rx, f, reps) {\r\n  res <- function(n) {\r\n    x <- rx(n)  # X has marginal distribution 'rx'\r\n    y <- f(x) + reps(x)  # Y has conditional mean 'f(x)' and noise 'reps(x)'\r\n    return(tibble(x = x, y = y))  \r\n  }\r\n  return(structure(res, class = \"rxy\"))\r\n}\r\n\r\nplot.rxy <- function(x, N = 1000, seed = 840) {\r\n  set.seed(seed)\r\n  \r\n  ggplot(data = x(N), aes(x = x, y = y)) +\r\n    geom_point(alpha = 0.3) + \r\n    geom_smooth(method = \"lm\", se = FALSE)\r\n}\r\n\r\nlmsim <- function(rxy, N = 100, vcov = stats::vcov, B = 1e3, seed = 840) \r\n{ \r\n  set.seed(seed)\r\n  \r\n  res <- list(\r\n    coef = matrix(nrow = B, ncol = 2), \r\n    vcov = vector(\"list\", B),\r\n    sigma2 = numeric(B)\r\n    )\r\n  colnames(res$coef) <- c(\"(Intercept)\", \"x\")\r\n  class(res) <- \"lmsim\"\r\n                \r\n  for (b in 1:B) {\r\n    .fit <- lm(y ~ ., data = rxy(N))\r\n    res$coef[b, ] <- coef(.fit)  # Store intercept and slope in B x 2 matrix\r\n    res$vcov[[b]] <- vcov(.fit)  # Store vcov estimates in length B list.\r\n    res$sigma2[[b]] <- sigma(.fit) ^ 2\r\n  }\r\n  \r\n  return(res)\r\n}\r\n\r\nprint.lmsim <- function(x) \r\n{\r\n  cat(\"Simulation results:\\n\\n\")\r\n  cat(\"* Model-trusting noise variance:\\n \")\r\n  print( mean(x$sigma2) )\r\n  cat(\"* Model-trusting vcov of coefficient estimates:\\n\")\r\n  print( avg_est_vcov <- Reduce(\"+\", x$vcov) / length(x$vcov) )\r\n  cat(\"\\n* Simulation-based vcov of coefficient estimates:\\n\")\r\n  print( emp_vcov <- cov(x$coef))\r\n  cat(\"\\n* Ratio (Model-trusting / Simulation):\\n\")\r\n  print( avg_est_vcov / emp_vcov )\r\n  return(invisible(x))\r\n}\r\n\r\n\r\nWe simulate linear regression on data generated according to:\r\n\\[\r\n\\begin{split}\r\nY_t &= 1 + X_t+\\eta_t,\\\\\r\nX_{t+1} &= 0.4 \\cdot X_t+Z^X_t,\\\\\r\n\\eta _{t+1} &= \\frac{1}{\\sqrt 2}\\eta _t +Z^\\eta_t\\\\\r\n\\end{split}\r\n\\]\r\nwhere \\(Z^{X,\\eta}_t\\sim \\mathcal N(0,1)\\). The noise \\(\\eta_t\\) is \\(\\text{AR}(1)\\), and results in the unconditional variance of the corresponding linear model \\(\\text{Var} (\\eta _t) = 2\\), twice the conditional variance \\(\\text{Var}(\\eta _{t+1}\\vert \\eta _t)=\\mathbb E(Z_t ^2)=1\\).\r\n\r\n\r\nrxy_01 <- rxy_fun(\r\n  rx = \\(n) 1 + arima.sim(list(order = c(1,0,0), ar = 0.4), n = n),\r\n  f = \\(x) 1 + x,\r\n  reps = \\(x) arima.sim(\r\n    list(order = c(1,0,0), ar = 1/sqrt(2)), \r\n    n = length(x) \r\n    )\r\n)\r\n\r\nplot(rxy_01)\r\n\r\n\r\n\r\nFrom the simulation below, we see that with \\(N=100\\) serial observations, \\(\\mathbb E(\\hat \\sigma ^2)\\) is relatively close to \\(\\sigma ^2 = 2\\), but the \\(\\mathbb E(\\hat {\\mathbb V} (\\hat \\beta))\\) grossly underestimates all entries (as can be seen from the last line of the output of lmsim() below).\r\n\r\n\r\nlmsim(rxy_01, N = 100)\r\n\r\nSimulation results:\r\n\r\n* Model-trusting noise variance:\r\n [1] 1.870606\r\n* Model-trusting vcov of coefficient estimates:\r\n            (Intercept)           x\r\n(Intercept)  0.03583159 -0.01663739\r\nx           -0.01663739  0.01659708\r\n\r\n* Simulation-based vcov of coefficient estimates:\r\n            (Intercept)           x\r\n(Intercept)  0.15486131 -0.02665435\r\nx           -0.02665435  0.02978162\r\n\r\n* Ratio (Model-trusting / Simulation):\r\n            (Intercept)         x\r\n(Intercept)   0.2313786 0.6241905\r\nx             0.6241905 0.5572928\r\n\r\nTo correctly estimate \\(\\mathbb V (\\hat \\beta)\\), we could try using the “autocorrelation-consistent” sandwich estimator sandwich::vcovHAC() 6. It turns out that, even with a relatively simple example like the present one, the sample size required for the HAC estimator’s bias to die out is unreasonably large (see below). With such large samples, one can probably obtain much better results by leaving out some data for model building, performing inference on the remaining data with a proper time-series model.\r\n\r\n\r\nlmsim(rxy_01, vcov = sandwich::vcovHAC, N = 100)\r\n\r\nSimulation results:\r\n\r\n* Model-trusting noise variance:\r\n [1] 1.870606\r\n* Model-trusting vcov of coefficient estimates:\r\n            (Intercept)           x\r\n(Intercept)  0.08787795 -0.02323242\r\nx           -0.02323242  0.02339146\r\n\r\n* Simulation-based vcov of coefficient estimates:\r\n            (Intercept)           x\r\n(Intercept)  0.15486131 -0.02665435\r\nx           -0.02665435  0.02978162\r\n\r\n* Ratio (Model-trusting / Simulation):\r\n            (Intercept)         x\r\n(Intercept)   0.5674623 0.8716182\r\nx             0.8716182 0.7854329\r\n\r\n\r\n\r\nlmsim(rxy_01, vcov = sandwich::vcovHAC, N = 500)\r\n\r\nSimulation results:\r\n\r\n* Model-trusting noise variance:\r\n [1] 1.974131\r\n* Model-trusting vcov of coefficient estimates:\r\n             (Intercept)            x\r\n(Intercept)  0.023032270 -0.005723968\r\nx           -0.005723968  0.005684149\r\n\r\n* Simulation-based vcov of coefficient estimates:\r\n             (Intercept)            x\r\n(Intercept)  0.029600757 -0.005993161\r\nx           -0.005993161  0.006152216\r\n\r\n* Ratio (Model-trusting / Simulation):\r\n            (Intercept)         x\r\n(Intercept)   0.7780973 0.9550834\r\nx             0.9550834 0.9239189\r\n\r\n\r\n\r\nlmsim(rxy_01, vcov = sandwich::vcovHAC, N = 1000)\r\n\r\nSimulation results:\r\n\r\n* Model-trusting noise variance:\r\n [1] 1.98033\r\n* Model-trusting vcov of coefficient estimates:\r\n             (Intercept)            x\r\n(Intercept)  0.011878079 -0.002771484\r\nx           -0.002771484  0.002849089\r\n\r\n* Simulation-based vcov of coefficient estimates:\r\n             (Intercept)            x\r\n(Intercept)  0.015085291 -0.002844716\r\nx           -0.002844716  0.002855522\r\n\r\n* Ratio (Model-trusting / Simulation):\r\n            (Intercept)         x\r\n(Intercept)   0.7873948 0.9742566\r\nx             0.9742566 0.9977471\r\n\r\n\r\nFor the linear model assumptions to hold, the \\((X_t,\\,Y_t)\\) pairs should come from independent realizations of the same time series, which is of course not the type of data we are usually presented with.↩︎\r\nAs usual we stack observations vertically in the \\(\\mathbf X\\) and \\(\\mathbf Y\\) matrices.↩︎\r\nFor an extreme case, suppose that \\(\\mathbf X = \\mathbf e\\) (no covariate except for an intercept term), and let the noise term be \\(\\eta _t = Z_0 + Z_t\\), where \\(Z_0\\) and \\(\\{Z_t\\}_{t=1,2,\\dots,T}\\) are independent \\(Z\\)-scores. One can easily see that, in this setting, \\(\\text {Cor}(\\eta) = \\frac{1}{2}(\\mathbf 1+\\mathbf e \\mathbf e^T )\\) and \\(\\text{Tr}(\\cdots) \\approx \\frac{N}{2}\\).↩︎\r\nFor instance, for the \\(\\text{AR}(1)\\) noise of Eq. (2), we have \\(\\text{Cor}(\\eta_t, \\eta_{t'})= \\alpha ^{\\vert t - t'\\vert}\\).↩︎\r\nThe difference \\(\\mathbb E(\\hat {\\mathbb V} (\\hat \\beta))-\\mathbb V(\\hat \\beta)\\) decays as \\(O(N^{-1})\\), which is of the same order of the estimation target \\(\\mathbb V (\\hat \\beta)\\). Not sure I’m using standard terminology here.↩︎\r\nDisclaimer: I haven’t read any theory about the HAC estimator, so I may be misusing it here, but I would have expected it to work relatively well on such an “easy” example. For illustrations on how to use sandwich estimators for first- and second-order linear model misspecification, you can read this post of mine.↩︎\r\n",
    "preview": "posts/2023-05-20-linear-regression-with-autocorrelated-noise/linear-regression-with-autocorrelated-noise_files/figure-html5/unnamed-chunk-2-1.png",
    "last_modified": "2024-02-07T13:33:21+01:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2023-05-14-model-misspecification-and-linear-sandwiches/",
    "title": "Model Misspecification and Linear Sandwiches",
    "description": "Being wrong in the right way. With R excerpts.",
    "author": [
      {
        "name": "Valerio Gherardi",
        "url": "https://vgherard.github.io"
      }
    ],
    "date": "2023-05-14",
    "categories": [
      "Statistics",
      "Regression",
      "Linear Models",
      "Model Misspecification",
      "R"
    ],
    "contents": "\r\nIntroduction\r\nTraditional linear models, such as the output of the R function lm(), are\r\noften loaded with a set of strong assumptions. Take univariate regression:\r\n\\[\r\nY = q+mX+\\varepsilon. \\tag{1}\r\n\\]\r\nThis equation assumes that:\r\nThe conditional mean \\(\\mathbb E(Y\\vert X) = q + mX\\), a linear function\r\nof \\(X\\).\r\nThe conditional variance \\(\\mathbb {V}(Y \\vert X)=\\mathbb{V}(\\varepsilon\\vert X)\\)\r\nis independent of \\(X\\).\r\nThe conditional distribution \\(Y\\vert X\\) is gaussian.\r\nIn a set of measurements \\(\\left\\{\\left(X_i,Y_i\\right)\\right\\}_{i = 1,\\, \\dots, \\,N}\\), \\(Y_i\\) and the set \\(\\left\\{ X_j, Y_j\\right\\} _{j\\neq i}\\) are conditionally independent of each other, given the value of the corresponding regressor \\(X_i\\).1\r\nThe last assumption is satisfied in many practical situations, and we will take it here for granted2. What happens when the first\r\nthree assumptions are violated (that is “frequently” to “almost always”,\r\ndepending on context)?\r\nA comprehensive discussion is provided by (Buja et al. 2019). These authors show that:\r\nIf the conditional mean \\(\\mathbb E (Y \\vert X)\\) is not linear (“first order misspecification”), then the Ordinary Least Squares (OLS) regression\r\ncoefficients \\(\\hat \\beta\\) consistently estimate:\r\n\\[\r\n\\beta \\equiv \\text{arg } \\min _{\\beta^\\prime} \\mathbb E((Y-X\\beta^\\prime)^2) \\tag{2}\r\n\\]\r\nwhich can be thought as the “best linear approximation of the response”3.\r\nBoth non-linearity in the sense of the previous point, and \\(X\\)-dependence in\r\n\\(\\mathbb{V}(Y \\vert X)\\) (“second order misspecification”) affect the sampling\r\ndistribution of \\(\\hat \\beta\\) and, in particular, \\(\\mathbb{V}(\\hat \\beta)\\),\r\nwhich is the relevant quantity for inference in the large-sample limit.\r\nBoth problems can be efficiently addressed through the so-called “sandwich” estimators for the covariance matrix of \\(\\hat \\beta\\) (White 1980), whose consistency is robust to both type of misspecification.\r\nDetails can be found in the mentioned reference. The rest of the post\r\nillustrates with examples how to compute “sandwich” estimates in R, and why\r\nyou may want to do so.\r\nFitting misspecified linear models in R\r\nThe {sandwich} package\r\n(available on CRAN) provides estimators for the regression coefficients’\r\nvariance-covariance matrix \\(\\mathbb V (\\hat \\beta)\\) that are robust to first\r\nand second order misspecification. These can be readily used with lm objects,\r\nas in the example below:\r\n\r\n\r\nfit <- lm(mpg ~ wt, data = mtcars)\r\n\r\nstats::vcov(fit)  # standard vcov (linear model trusting estimate)\r\n\r\n            (Intercept)        wt\r\n(Intercept)    3.525484 -1.005693\r\nwt            -1.005693  0.312594\r\n\r\nsandwich::vcovHC(fit)  # sandwich vcov (model-robust estimate)\r\n\r\n            (Intercept)         wt\r\n(Intercept)    5.889249 -1.7418581\r\nwt            -1.741858  0.5448011\r\n\r\nIt is important to note that both functions stats::vcov() and\r\nsandwich::vcovHC() employ the same point estimates of regression coefficients\r\nto compute \\(\\mathbb V (\\hat \\beta)\\):\r\n\r\n\r\nfit\r\n\r\n\r\nCall:\r\nlm(formula = mpg ~ wt, data = mtcars)\r\n\r\nCoefficients:\r\n(Intercept)           wt  \r\n     37.285       -5.344  \r\n\r\nThe difference between these functions lies in the different assumptions they\r\nmake on the linear model residuals, which leads to different estimates\r\nfor \\(\\mathbb{V}(\\hat \\beta)\\).\r\nEffects of misspecification\r\nThis section illustrates some consequences of model misspecification through\r\nsimulation. The examples use:\r\n\r\n\r\nlibrary(dplyr)\r\nlibrary(ggplot2)\r\n\r\n\r\nFor convenience, we define some helpers to be used in the following\r\nexamples. The function below returns random generators for the generic additive\r\nerror model \\(Y = f(X) + \\varepsilon\\), where the distribution of the noise term\r\n\\(\\varepsilon\\) may in general depend on \\(X\\). Both \\(X\\) and \\(Y\\) are assumed here\r\nand below to be 1-dimensional.\r\n\r\n\r\nrxy_fun <- function(rx, f, reps) {\r\n  res <- function(n) {\r\n    x <- rx(n)  # X has marginal distribution 'rx'\r\n    y <- f(x) + reps(x)  # Y has conditional mean 'f(x)' and noise 'reps(x)'\r\n    return(tibble(x = x, y = y))  \r\n  }\r\n  return(structure(res, class = \"rxy\"))\r\n}\r\n\r\nplot.rxy <- function(x, N = 1000, seed = 840) {\r\n  set.seed(seed)\r\n  \r\n  ggplot(data = x(N), aes(x = x, y = y)) +\r\n    geom_point(alpha = 0.3) + \r\n    geom_smooth(method = \"lm\", se = FALSE)\r\n}\r\n\r\n\r\nThe following function simulates fitting the linear model y ~ x over multiple\r\ndatasets generated according to a function rxy().\r\n\r\n\r\nlmsim <- function(rxy, N = 100, vcov = stats::vcov, B = 1e3, seed = 840) \r\n{ \r\n  set.seed(seed)\r\n  \r\n  res <- list(coef = matrix(nrow = B, ncol = 2), vcov = vector(\"list\", B))\r\n  colnames(res$coef) <- c(\"(Intercept)\", \"x\")\r\n  class(res) <- \"lmsim\"\r\n                \r\n  for (b in 1:B) {\r\n    .fit <- lm(y ~ ., data = rxy(N))\r\n    res$coef[b, ] <- coef(.fit)  # Store intercept and slope in B x 2 matrix\r\n    res$vcov[[b]] <- vcov(.fit)  # Store vcov estimates in length B list. \r\n  }\r\n  \r\n  return(res)\r\n}\r\n\r\nprint.lmsim <- function(x) \r\n{\r\n  cat(\"Simulation results:\\n\\n\")\r\n  cat(\"* Model-trusting vcov (average of vcov estimates):\\n\")\r\n  print( avg_est_vcov <- Reduce(\"+\", x$vcov) / length(x$vcov) )\r\n  cat(\"\\n* Simulation-based vcov (vcov of coefficient estimates):\\n\")\r\n  print( emp_vcov <- cov(x$coef))\r\n  cat(\"\\n* Ratio (1st / 2nd):\\n\")\r\n  print( avg_est_vcov / emp_vcov )\r\n  return(invisible(x))\r\n}\r\n\r\n\r\nThe print method defined above shows a comparison of the covariance matrices\r\nobtained by:\r\nAveraging variance-covariance estimates from the various simulations, and\r\nTaking the variance-covariance matrix of regression coefficients obtained\r\nin the simulations.\r\nThe first one can be considered a “model-trusting” estimate (where the actual\r\n“model” is specified by the vcov argument of lmsim(), i.e. stats::vcov and\r\nsandwich::vcovHC for the traditional and sandwich estimates, respectively).\r\nThe second one is a model-free simulation-based estimate of the true\r\n\\(\\mathbb{V}(\\hat \\beta)\\). The comparison between the two4\r\nprovides a measure of the asymptotic bias of the model-trusting estimate.\r\nExample 1: First order misspecification\r\n\\[\r\nY = X ^ 2 + \\varepsilon,\\quad X \\sim \\text{Unif} (0,1),\\qquad \\varepsilon \\sim \\mathcal N (0,0.01)\r\n\\]\r\n\r\n\r\nrxy_01 <- rxy_fun(\r\n  rx = runif,\r\n  f = \\(x) x^2,\r\n  reps = \\(x) rnorm(length(x), sd = .01)\r\n  )\r\n\r\n\r\nIn this model, \\(\\mathbb E (Y \\vert X)\\) is not linear in \\(X\\)\r\n(first order misspecification), but the remaining assumptions of the linear\r\nmodel hold. This is how a typical linear fit of data generated from this model\r\nlooks like:\r\n\r\n\r\nplot(rxy_01, N = 300)\r\n\r\n\r\n\r\nHere the effect of misspecification on the variance-covariance model trusting\r\nestimates is to underestimate true covariance values\r\n(by a factor as large as 40%!):\r\n\r\n\r\nlmsim(rxy_01)\r\n\r\nSimulation results:\r\n\r\n* Model-trusting vcov (average of vcov estimates):\r\n              (Intercept)             x\r\n(Intercept)  0.0002277348 -0.0003417356\r\nx           -0.0003417356  0.0006833282\r\n\r\n* Simulation-based vcov (vcov of coefficient estimates):\r\n              (Intercept)             x\r\n(Intercept)  0.0003367876 -0.0005662584\r\nx           -0.0005662584  0.0011488351\r\n\r\n* Ratio (1st / 2nd):\r\n            (Intercept)         x\r\n(Intercept)   0.6761971 0.6034976\r\nx             0.6034976 0.5948009\r\n\r\nThis is fixed by the sandwich::vcovHC() estimators:\r\n\r\n\r\nlmsim(rxy_01, vcov = sandwich::vcovHC)\r\n\r\nSimulation results:\r\n\r\n* Model-trusting vcov (average of vcov estimates):\r\n              (Intercept)             x\r\n(Intercept)  0.0003475834 -0.0005732957\r\nx           -0.0005732957  0.0011443449\r\n\r\n* Simulation-based vcov (vcov of coefficient estimates):\r\n              (Intercept)             x\r\n(Intercept)  0.0003367876 -0.0005662584\r\nx           -0.0005662584  0.0011488351\r\n\r\n* Ratio (1st / 2nd):\r\n            (Intercept)         x\r\n(Intercept)    1.032055 1.0124276\r\nx              1.012428 0.9960916\r\n\r\nExample 2: Second order misspecification\r\n\\[\r\nY = X + \\varepsilon,\\quad X \\sim \\text{Unif} (0,1),\\qquad \\varepsilon \\sim \\mathcal N (0,X)\r\n\\]\r\n\r\n\r\nrxy_02 <- rxy_fun(\r\n  rx = runif,\r\n  f = \\(x) x,\r\n  reps = \\(x) rnorm(length(x), sd = x)\r\n  )\r\n\r\nplot(rxy_02, N = 300)\r\n\r\n\r\n\r\nThis model is first-order consistent, but second-order misspecified (variance is\r\nnot independent of \\(X\\)). The effects on vcov model-trusting estimates is\r\nmixed: some covariances are underestimated, some are overestimated.\r\n\r\n\r\nlmsim(rxy_02)\r\n\r\nSimulation results:\r\n\r\n* Model-trusting vcov (average of vcov estimates):\r\n            (Intercept)           x\r\n(Intercept)  0.01344466 -0.02014604\r\nx           -0.02014604  0.04008595\r\n\r\n* Simulation-based vcov (vcov of coefficient estimates):\r\n             (Intercept)           x\r\n(Intercept)  0.005456494 -0.01417346\r\nx           -0.014173461  0.04834196\r\n\r\n* Ratio (1st / 2nd):\r\n            (Intercept)         x\r\n(Intercept)    2.463974 1.4213920\r\nx              1.421392 0.8292164\r\n\r\nAgain, this large bias is corrected by the sandwich estimator:\r\n\r\n\r\nlmsim(rxy_02, vcov = sandwich::vcovHC)\r\n\r\nSimulation results:\r\n\r\n* Model-trusting vcov (average of vcov estimates):\r\n             (Intercept)           x\r\n(Intercept)  0.005637138 -0.01451506\r\nx           -0.014515056  0.04909868\r\n\r\n* Simulation-based vcov (vcov of coefficient estimates):\r\n             (Intercept)           x\r\n(Intercept)  0.005456494 -0.01417346\r\nx           -0.014173461  0.04834196\r\n\r\n* Ratio (1st / 2nd):\r\n            (Intercept)        x\r\n(Intercept)    1.033106 1.024101\r\nx              1.024101 1.015653\r\n\r\nExample 3: sample size effects\r\nThe sandwich estimators only become unbiased in the large sample\r\nlimit. For instance, in our previous Example 1, the sandwich covariance\r\nestimates require sample sizes of \\(N \\approx 50\\) or larger, in order for their\r\nbias to be relatively contained (\\(\\lesssim 10\\%\\)). With a small sample size:\r\n\r\n\r\nlmsim(rxy_01, N = 10, vcov = sandwich::vcovHC)\r\n\r\nSimulation results:\r\n\r\n* Model-trusting vcov (average of vcov estimates):\r\n             (Intercept)           x\r\n(Intercept)  0.008253143 -0.01356350\r\nx           -0.013563503  0.02691423\r\n\r\n* Simulation-based vcov (vcov of coefficient estimates):\r\n             (Intercept)            x\r\n(Intercept)  0.005084963 -0.008573385\r\nx           -0.008573385  0.017136158\r\n\r\n* Ratio (1st / 2nd):\r\n            (Intercept)        x\r\n(Intercept)    1.623049 1.582048\r\nx              1.582048 1.570611\r\n\r\nFor such small sample sizes, however, one should probably also keep into account the bias in the point estimate \\(\\hat \\beta\\) itself, so that the bias in the variance \\(\\mathbb V (\\hat \\beta)\\) becomes a kinda second-order problem.\r\nExample 4: variance underestimation and overestimation\r\nAccording to the heuristics of (Buja et al. 2019), the linear model trusting\r\nvariances \\(\\mathbb V (\\hat \\beta)_{ii}\\) tend to underestimate (overestimate) the\r\ntrue variances:\r\nIn the presence of non-linearity, when the strong deviations from linearity\r\nare far away from (close to) the center of the regressor distribution.\r\nIn the presence of heteroskedasticity, when the regions of high variance are\r\nfar away from the (close to) the center of the regressor distribution.\r\nWe illustrate the second case. Consider the following two models:\r\n\\[\r\nY = X + \\varepsilon,\\quad X \\sim \\text{Unif} (0,1),\\qquad \\varepsilon \\sim \\mathcal N (0,\\vert X-\\frac{1}{2}\\vert )\r\n\\]\r\n\r\n\r\nrxy_04a <- rxy_fun(\r\n  rx = runif,\r\n  f = \\(x) x,\r\n  reps = \\(x) rnorm(length(x), sd = abs(0.5 - x))\r\n  )\r\n\r\nplot(rxy_04a)\r\n\r\n\r\n\r\n\\[\r\nY = X + \\varepsilon,\\quad X \\sim \\text{Unif} (0,1),\\qquad \\varepsilon \\sim \\mathcal N (0,\\frac{1}{2}-\\vert X-\\frac{1}{2}\\vert )\r\n\\]\r\n\r\n\r\nrxy_04b <- rxy_fun(\r\n  rx = runif,\r\n  f = \\(x) x,\r\n  reps = \\(x) rnorm(length(x), sd = 0.5 - abs(0.5 - x))\r\n  )\r\n\r\nplot(rxy_04b)\r\n\r\n\r\n\r\nIn agreement with the heuristics, we have, for the first model:\r\n\r\n\r\nlmsim(rxy_04a)\r\n\r\nSimulation results:\r\n\r\n* Model-trusting vcov (average of vcov estimates):\r\n             (Intercept)            x\r\n(Intercept)  0.003326042 -0.004989057\r\nx           -0.004989057  0.009977552\r\n\r\n* Simulation-based vcov (vcov of coefficient estimates):\r\n             (Intercept)            x\r\n(Intercept)  0.005390525 -0.009154439\r\nx           -0.009154439  0.018296535\r\n\r\n* Ratio (1st / 2nd):\r\n            (Intercept)         x\r\n(Intercept)   0.6170162 0.5449878\r\nx             0.5449878 0.5453247\r\n\r\nand, for the second model:\r\n\r\n\r\nlmsim(rxy_04b)\r\n\r\nSimulation results:\r\n\r\n* Model-trusting vcov (average of vcov estimates):\r\n             (Intercept)            x\r\n(Intercept)  0.003420946 -0.005150512\r\nx           -0.005150512  0.010300847\r\n\r\n* Simulation-based vcov (vcov of coefficient estimates):\r\n             (Intercept)            x\r\n(Intercept)  0.001590907 -0.001503471\r\nx           -0.001503471  0.003131620\r\n\r\n* Ratio (1st / 2nd):\r\n            (Intercept)        x\r\n(Intercept)    2.150312 3.425748\r\nx              3.425748 3.289303\r\n\r\nIt is interesting to notice that, far away from the large-sample limit, the\r\nsandwich estimates also have a bias (as discussed in the previous example),\r\nbut the bias leads to an overestimate of \\(\\mathbb V (\\hat \\beta)\\)\r\nin both cases5:\r\n\r\n\r\nlmsim(rxy_04a, N = 10, vcov = sandwich::vcovHC)\r\n\r\nSimulation results:\r\n\r\n* Model-trusting vcov (average of vcov estimates):\r\n            (Intercept)          x\r\n(Intercept)  0.07714254 -0.1302820\r\nx           -0.13028198  0.2595908\r\n\r\n* Simulation-based vcov (vcov of coefficient estimates):\r\n            (Intercept)          x\r\n(Intercept)  0.05560994 -0.0957307\r\nx           -0.09573070  0.1947398\r\n\r\n* Ratio (1st / 2nd):\r\n            (Intercept)        x\r\n(Intercept)    1.387208 1.360922\r\nx              1.360922 1.333013\r\n\r\nlmsim(rxy_04b, N = 10, vcov = sandwich::vcovHC)\r\n\r\nSimulation results:\r\n\r\n* Model-trusting vcov (average of vcov estimates):\r\n            (Intercept)           x\r\n(Intercept)  0.05301354 -0.07223407\r\nx           -0.07223407  0.13959714\r\n\r\n* Simulation-based vcov (vcov of coefficient estimates):\r\n            (Intercept)           x\r\n(Intercept)  0.02725563 -0.03408101\r\nx           -0.03408101  0.06735272\r\n\r\n* Ratio (1st / 2nd):\r\n            (Intercept)        x\r\n(Intercept)    1.945049 2.119481\r\nx              2.119481 2.072628\r\n\r\nConclusions\r\nSandwich estimators provide valid inference for parameter covariances and\r\nstandard errors in misspecified linear regression settings.\r\nThese model-robust tools are available in R through\r\n{sandwich} (which also provides\r\nmethods for more general glm objects).\r\nFor fairly large datasets, this model-robust approach can be coupled with data\r\nsplitting, leading to a modeling procedure which I’m finding to be quite solid\r\nand versatile in practice:\r\nPerform data exploration and model selection on a separate portion of data.\r\nThis is to avoid biasing inferential results with random selective procedures.\r\nOnce a reasonable model is found, fit the model on the remaining data,\r\nadopting robust covariance estimates for model parameters.\r\nThis works very well with independent data for which a (generalized) linear\r\nmodel can provide a useful parametric description. Generalizations may be\r\ndiscussed in a separate post.\r\n\r\n\r\n\r\nBuja, Andreas, Lawrence Brown, Richard Berk, Edward George, Emil Pitkin, Mikhail Traskin, Kai Zhang, and Linda Zhao. 2019. “Models as Approximations i.” Statistical Science 34 (4): 523–44.\r\n\r\n\r\nWhite, Halbert. 1980. “A Heteroskedasticity-Consistent Covariance Matrix Estimator and a Direct Test for Heteroskedasticity.” Econometrica: Journal of the Econometric Society, 817–38.\r\n\r\n\r\n\r\nThis is already somewhat implicit in the representation (1), that\r\nmodels \\(Y\\) and \\(X\\) as single random variables. The reason for stating this condition in an apparently convoluted way, rather than a simpler “data points \\((X_i,Y_i)\\) are independent draws from the same joint distribution”, is that this formulation includes cases where the \\(X_i\\)’s are not independent, cf. the following note.↩︎\r\nThere are of course important exceptions, like time series or spatial data. Noteworthy, our formulation of strict linear model assumptions can also cover some cases of temporal or spatial dependence in the regressors \\(X_i\\), provided that such dependence is not reflected on \\(Y_i \\vert X_i\\).↩︎\r\nAccording to an \\(L_2\\) loss criterion.↩︎\r\nI use an element-wise ratio,\r\nin order to avoid confusion from the different scales involved in the various\r\nentries of \\(\\mathbb V (\\hat \\beta)\\).↩︎\r\n\r\nI don’t know whether this result (that sandwich estimates are, at worst,\r\noverestimates) is a general one.↩︎\r\n",
    "preview": "posts/2023-05-14-model-misspecification-and-linear-sandwiches/misspecification-and-linear-sandwiches_files/figure-html5/unnamed-chunk-7-1.png",
    "last_modified": "2024-02-07T13:33:21+01:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2023-05-12-consistency-and-bias-of-ols-estimators/",
    "title": "Consistency and bias of OLS estimators",
    "description": "OLS estimators are consistent but generally biased - here's an example.",
    "author": [
      {
        "name": "Valerio Gherardi",
        "url": "https://vgherard.github.io"
      }
    ],
    "date": "2023-05-12",
    "categories": [
      "Statistics",
      "Regression",
      "Linear Models",
      "Model Misspecification"
    ],
    "contents": "\r\nGiven random variables \\(Y\\colon \\Omega \\to \\mathbb R\\) and\r\n\\(X\\colon \\Omega \\to \\mathbb R ^{p}\\) defined on an event space \\(\\Omega\\), denote:\r\n\\[\r\n\\beta = \\arg \\min _{\\beta ^\\prime } \\mathbb E[(Y-X \\beta^\\prime )^2]= \\mathbb E(X^TX)^{-1}\\mathbb E(X^TY), \\tag{1}\r\n\\]\r\nso that \\(X \\beta\\) is the best linear predictor of \\(Y\\) in terms of \\(X\\) (\\(X\\) is\r\nregarded as a row vector).\r\nLet \\((\\textbf Y, \\textbf X)\\) be independent samples from the joint \\(XY\\)\r\ndistribution, with independent observations stacked vertically in \\(N \\times 1\\)\r\nand \\(N \\times p\\) matrices respectively, as customary. Then the usual Ordinary\r\nLeast Squares (OLS) estimator of \\(\\beta\\) is given by:\r\n\\[\r\n\\hat \\beta = \\arg \\min _{\\beta ^\\prime}(\\textbf Y - \\textbf X \\beta ^\\prime)^2=(\\textbf X^T\\textbf X)^{-1} \\textbf X^T \\textbf Y. \\tag{2}\r\n\\]\r\nThis is a consistent, but generally biased estimator of \\(\\beta\\).\r\nComparing Eqs. (1) and (2), consistency follows immediately\r\nfrom the law of large numbers and continuity. In order to show that\r\n\\(\\mathbb E (\\hat \\beta) \\neq \\beta\\) in general, it is sufficient to provide an\r\nexample.\r\nConsider, for instance (example adapted from D.A. Freedman):\r\n\\[\r\nX \\sim \\mathcal N (0, 1),\\qquad Y=X(1+aX^2)\r\n\\]\r\nRecalling that \\(\\mathbb E (X^4) = 3\\) for the standard normal, we have:\r\n\\[\r\n\\beta = 1+3a,\r\n\\]\r\nwhere we have ignored a potential intercept term (which would vanish here, since\r\n\\(\\mathbb E (Y) = 0\\)). To compute \\(\\mathbb E (\\hat \\beta)\\), we use the identity\r\n\\(\\frac{e^{-z}}{z} = \\intop _1 ^\\infty \\text d t\\, e ^{-zt}\\) to rewrite this\r\nexpected value as:\r\n\\[\r\n\\begin{split}\r\n\\mathbb E (\\hat \\beta) & =  (2 \\pi)^{-N/2}\r\n    \\intop \\text d\\textbf X \\,e^{-\\sum _j X_i ^2 /2}\r\n                                    \\dfrac{\\sum _i X_i^2(1+aX_i^2)}{\\sum _i X_i^2} = \\frac{N}{2}\\intop_1 ^\\infty \\text d t\\,I(t) \\\\\r\nI(t)                                     & \\equiv (2 \\pi)^{-N/2} \\intop \\text d\\textbf X\\,\r\n                                                        e^{-t \\sum _j X_j ^2 /2}X_1^2(1+aX_1^2)\r\n\\end{split}\r\n\\]\r\nThe inner integral can be computed easily:\r\n\\[\r\nI(t) = t^{-\\frac{N}{2}}(\\frac{1}{t}+a\\frac{3}{t^2})\r\n\\]\r\nand we eventually find:\r\n\\[\r\n\\mathbb E (\\hat \\beta) = 1+3 a\\frac{N}{N+2}\r\n\\]\r\nThe bias is thus given by:\r\n\\[\r\n\\beta - \\mathbb E (\\hat \\beta) = \\frac{6a}{N+2}\r\n\\]\r\nThis vanishes linearly, in agreement with the fact that\r\n\\(\\sqrt N (\\hat \\beta - \\beta )\\) converges in probability to a gaussian with\r\nzero mean and finite variance (which requires the bias to be \\(o(N^{-1/2})\\)).\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2024-02-07T13:33:21+01:00",
    "input_file": {}
  },
  {
    "path": "posts/2023-05-01-magic-piggy-bank/",
    "title": "Bayes, Neyman and the Magic Piggy Bank",
    "description": "Compares frequentist properties of credible intervals and confidence \nintervals in a gambling game involving a magic piggy bank.",
    "author": [
      {
        "name": "Valerio Gherardi",
        "url": "https://vgherard.github.io"
      }
    ],
    "date": "2023-05-01",
    "categories": [
      "Statistics",
      "Confidence Intervals",
      "Frequentist Methods",
      "Bayesian Methods"
    ],
    "contents": "\r\nIntro\r\nFrequentist and Bayesian approaches to statistical inference are motivated by\r\ndifferent interpretations of the concept of probability.\r\nThese philosophical differences can, at times, shadow the comparably important\r\noperational differences between the two frameworks, whose methods proceed, at\r\nthe end of the day, from the same mathematical theory.\r\nFrom the purely operational point of view, the\r\nquestion “Bayesian or Frequentist?” can (and should) be answered by\r\nobjective criteria, rather than subjective opinions. As one could\r\nexpect, the answer is in general neither “Frequentist” nor “Bayesian”,\r\nbut rather “It depends”.\r\nTo illustrate this, I will discuss an hypothetical game that revolves around\r\nreporting measurements and correctly quantifying uncertainty. As we shall see,\r\nthe winning strategies can be either Frequentist or Bayesian in spirit,\r\ndepending on a variation of the actual rules of the game.\r\nReporting measurements\r\nAll scientific measurements come with an associated uncertainty, which can be\r\nexpressed in the form of an interval that is supposed to contain the object\r\nof measurement. In the Frequentist and Bayesian\r\nframeworks, these intervals are traditionally dubbed Confidence and Credible\r\nintervals, respectively. While, superficially, these can be both characterized\r\nas “covering the true value with probability \\(p\\)”, the word “probability”\r\nhas quite different connotations in the two cases, and confusing them can lead\r\nto irrational thought or, as in the imaginary game described below, financial\r\nruin.\r\nMagic Piggy Bank\r\nThere are two players, called the Bookmaker and the Gambler, that compete\r\nagainst each other in a gambling game1. The interactions between these two players are mediated by\r\nthe Magic Piggy Bank, a magic creature that acts as a sort of referee.\r\nThe Magic Piggy Bank contains infinite biased coins, and knows the probability\r\n\\(\\Theta\\) of giving “tails” for each one of them.\r\nA single iteration of the game proceeds as follows:\r\nThe Magic Piggy Bank ejects 2 a biased coin and gives it to the Bookmaker.\r\nThe Bookmaker can flip the coin an arbitrary number of times, to produce an\r\nestimate of \\(\\Theta\\), in the form of an interval \\(I\\). This must be accompanied\r\nby a payout, that is a number \\(p\\in \\left(0,1\\right)\\), for bets on the event\r\n\\(\\Theta \\in I\\). The resulting \\(I\\) and\r\n\\(p\\), together with the original data \\(X=(n_\\text{tosses}, n_\\text{tails})\\) from\r\nthe Bookmaker’s experiments, are reported to the Magic Piggy Bank.\r\nThe Magic Piggy Bank communicates the payout \\(p\\) to the Gambler, and reveals\r\nsome additional information. What particular information is revealed depends\r\non the variant of the game being played (see descriptions below).\r\nBased on the information received, the Gambler can choose to bet either\r\nin favor or against \\(\\Theta \\in I\\). When betting in favor, the Gambler pays \\(p\\)\r\nto the Bookmaker, who returns back \\(1\\) if \\(\\Theta \\in I\\) obtains. When betting\r\nagainst, the Bookmaker pays \\(p\\) to the Gambler, who returns back \\(1\\) if\r\n\\(\\Theta \\in I\\) obtains.\r\nThe Magic Piggy Bank reveals all data (\\(X\\), \\(I\\), \\(\\Theta\\)) to both players\r\nand the scores are settled.\r\nAs to the third step, we will consider three variants of the game:\r\nThe Magic Piggy Bank tells the Gambler the results of the Bookmaker’s tosses\r\n\\(X=(n_\\text{tosses}, n_\\text{tails})\\), as well as the actual interval \\(I\\).\r\nThe Magic Piggy Bank tells the Gambler the true value of \\(\\Theta\\).\r\nThe Gambler is given no additional information beyond the established payout\r\n\\(p\\).\r\nProblem\r\nSuppose that the Bookmaker and Gambler are forced to play indefinitely.\r\nWhat are the best strategies for these two players, according to\r\nthe three different variants A, B, and C described above3?\r\nAnalysis\r\nOne can readily verify that the Gambler’s gain (or, equivalently, the\r\nBookmaker’s loss) in a single iteration of the game is given by:\r\n\\[\r\nG=b\\cdot (\\chi_I (\\Theta)-p) \\tag{1}\r\n\\]\r\nwhere, \\(b\\) is equal to \\(\\pm 1\\) if the Gambler bets in favor or against,\r\nrespectively, and:\r\n\\[\r\n\\chi _I (\\Theta) = \\begin{cases}\r\n1 & \\Theta \\in I \\\\\r\n0 & \\Theta \\notin I\r\n\\end{cases} \\tag{2}\r\n\\]\r\nThe expected gain is given by:\r\n\\[\r\n\\mathbb E (G) = \\intop \\text{d}P(\\Theta,X) \\,b\\cdot (\\chi_I (\\Theta)-p), \\tag{3}\r\n\\]\r\nwhere \\(\\text{d} P(\\Theta, X)\\) denotes the joint probability measure of \\(\\Theta\\)\r\nand \\(X\\).\r\nLet’s now examine in detail the three different variants (A, B, C) of the game\r\ndescribed above.\r\nVariant A\r\nIn the first variant of the game, the Gambler is given the same information as the\r\nBookmaker. In particular, the choice to bet in favor or against, represented by\r\nthe sign \\(b\\), cannot depend on \\(\\Theta\\) (which the Gambler doesn’t know), and we\r\ncan rewrite the expected gain (3) as4:\r\n\\[\r\n\\begin{split}\r\n\\mathbb E (G) &= \\intop \\text{d}P(X) \\,b\\cdot \\intop \\text{d}P(\\Theta \\vert X) \\,(\\chi_I (\\Theta)-p) \\\\\r\n& = \\intop \\text{d}P(X) \\,b \\cdot \\left(\\text {Pr}(\\Theta \\in I \\vert X)-p\\right)\r\n\\end{split} \\tag{4}\r\n\\]\r\nwhere we have used the fact that, for any random variable \\(Y\\) and set \\(E\\), the\r\nfollowing relation holds:\r\n\\[\r\n\\mathbb E (\\chi _E (Y)) = \\text{Pr}(Y \\in E).\r\n\\]\r\nNow, since both \\(X\\) and \\(I\\) are known to the Gambler, the latter is (at least in\r\nprinciple) able to compute:\r\n\\[\r\nb_A \\equiv \\text{sgn}\\left(\\text {Pr}(\\Theta \\in I \\vert X)-p\\right) \\tag{5}\r\n\\]\r\nIn practice, in order to compute (5), the Gambler would need\r\nto know the overall distribution \\(\\pi (\\Theta)\\) of the coins \\(\\Theta\\) extracted\r\nfrom the Magic Piggy Bank, but this is something that can be accurately\r\nestimated in the long run, since the actual values of \\(\\Theta\\) are revealed\r\nat the end of each iteration 5.\r\nPlugging Eq. (5) into Eq. (4), we find:\r\n\\[\r\n\\mathbb E (G) = \\intop \\text{d}P(X) \\left|\\text {Pr}(\\Theta \\in I \\vert X)-p\\right|\\quad\\text{(Variant A)}   \\tag{6}.\r\n\\]\r\nComparing with (4), it is clear that\r\n(6) is the maximum expected gain, for any choice\r\nof \\(b\\). In other words, the choice \\(b_A\\) in Eq. (5) is an\r\noptimal one.\r\nFinally, from the Bookmaker’s point of view,\r\nEq. (6) represents a sure loss in the long run,\r\nthat can only be avoided by enforcing:\r\n\\[\r\n\\text {Pr}(\\Theta \\in I \\vert X)=p \\quad \\text{(Variant A)} \\tag{7}\r\n\\]\r\nIn order to ensure this, the Bookmaker needs to know as well the overall\r\ncoins’ distribution \\(\\pi (\\Theta)\\), and the same remarks made above for the\r\nGambler apply here.\r\nEquation (7) defines what is known as a\r\nBayesian credible interval.\r\nVariant B\r\nWe now consider the second variant of the rules, where the Gambler is told the\r\ntrue value of \\(\\Theta\\), but does not know the details of the Bookmaker’s\r\nmeasurement, except for the established payout \\(p\\). Using a reasoning similar\r\nto the previous section we rewrite:\r\n\\[\r\n\\begin{split}\r\n\\mathbb E (G) &= \\intop \\text{d}P(\\Theta) \\,b\\cdot \\intop \\text{d}P(X \\vert\\Theta) \\,(\\chi_I (\\Theta)-p) \\\\\r\n& = \\intop \\text{d}P(\\Theta) \\,b \\cdot \\left(\\text {Pr}(\\Theta \\in I \\vert \\Theta)-p\\right)\r\n\\end{split} \\tag{8}\r\n\\]\r\nand define6:\r\n\\[\r\nb_B \\equiv \\text{sgn}\\left(\\text {Pr}(\\Theta \\in I \\vert \\Theta)-p\\right)\\quad(\\text{Variant B}) \\tag{9}\r\n\\]\r\nwhich is easily shown to be the optimal betting strategy for the Gambler in the\r\npresent setting. In the long run, this sign can be accurately estimated by\r\nmodeling the conditional mean of \\(\\chi _I (\\Theta) - p\\) (as a function of\r\n\\(\\Theta\\) and \\(p\\)).\r\nIf the Gambler bets according to (9), the Bookmaker is forced\r\nto set payouts according to:\r\n\\[\r\n\\text {Pr}(\\Theta \\in I \\vert \\Theta)=p\\quad(\\text{Variant B}), \\tag{10}\r\n\\]\r\nin order to avoid a certain loss.\r\nEquation (10) defines what is known as a\r\nFrequentist confidence interval.\r\nVariant C\r\nIn the last case, the Gambler has no extra information beyond the payout \\(p\\),\r\nand the expected gain reduces to:\r\n\\[\r\n\\mathbb E (G)=b\\cdot \\left(\\text{Pr}(\\Theta \\in I)-p\\right),\\tag{11}\r\n\\]\r\nwhere \\(\\text{Pr}(\\Theta \\in I)\\) is the unconditional probability that \\(I\\) covers\r\n\\(\\Theta\\). The optimal betting choice is:\r\n\\[\r\nb_C \\equiv \\text{sgn}\\left(\\text {Pr}(\\Theta \\in I)-p\\right)\\quad(\\text{Variant C}) \\tag{12}\r\n\\]\r\nwhich forces the Bookmaker to set payouts according to:\r\n\\[\r\n\\text {Pr}(\\Theta \\in I)=p\\quad(\\text{Variant C}). \\tag{13}\r\n\\]\r\nThis is, by the way, satisfied by both the Bayesian and Frequentist intervals,\r\ndue to Eqs. (7) and (10), respectively.\r\nSummary of results\r\nProvided access to the same data used by the Bookmaker to\r\nproduce the interval \\(I\\) (Variant A), a rational Gambler would bet in favor of\r\n\\(\\Theta \\in I\\) if the probability of this event\r\nconditional to the observed the data is greater than the payout \\(p\\)\r\n(Eq. (5)).\r\nOn the other hand, given true value of \\(\\Theta\\) (Variant B), the optimal choice\r\nfor a Gambler is to bet on \\(\\Theta \\in I\\) if the probability of this event\r\nconditional to the ground truth is greater than \\(p\\)\r\n(Eq. (9)).\r\nFinally, in the lack of any of this information (Variant C), the most rational\r\nchoice is simply to bet on \\(\\Theta \\in I\\) if this event occurs more frequently\r\nthan \\(p\\) (Eq. (12)).\r\nWhen playing against the first two types of players, in order to avoid a certain\r\nloss, the Bookmaker must produce Bayesian credible intervals (Variant A) or\r\nFrequentist confidence intervals (Variant B). In the remaining case (Variant C),\r\nthe Bookmaker can either produce Bayesian or Frequentist intervals7.\r\nConclusions\r\nWhen I first learned about Bayesian and Frequentist inference, I remember most\r\ndiscussions were focused on the philosophical differences between these two\r\nschools of thought. There was little to no mention about the actual mathematical\r\nproperties of the constructs prescribed by the two formalisms, which made the\r\nchoice between “Bayesian” or “Frequentist” look like a mere matter of\r\ncommitting to one particular view.\r\nTechnically, what I did here was to compare the frequentist properties of\r\ncredible intervals and confidence intervals. I’m sure the literature,\r\nincluding the pedagogical one, is full of examples like this, and better ones8. With no pretense of originality, I believe that including more examples\r\nof this kind in the usual presentations can be beneficial to students and\r\npractitioners, and perhaps help them out of the ugly black-box of orthodoxy.\r\n\r\nThe introduction of bets as an expedient\r\nto operationally define subjective probabilities is historically due to the\r\nItalian mathematician\r\nBruno de Finetti.\r\nThe statistical analysis of the game proposed below can be given a Frequentist\r\ninterpretation.↩︎\r\nReaders are free to imagine this process in the way they find more convenient.↩︎\r\nWe assume that both\r\nplayers know from the outset which variant of the game they are playing to.↩︎\r\n\r\nWe denote (with some abuse of notation) by\r\n\\(\\text{d}P(\\Theta \\vert X)\\) the conditional probability measure of \\(\\Theta\\)\r\nconditioned on \\(X\\).↩︎\r\nIn the Bayesian spirit of (5),\r\nthe Gambler could for instance estimate \\(\\pi(\\Theta)\\) through Bayesian updates\r\nof a Dirichlet prior.↩︎\r\nNoteworthy, the random quantity in this equation is \\(I\\),\r\nwhereas \\(\\Theta\\) is regarded as fixed. This is in stark contrast with\r\nEq. (5), where \\(X\\) and \\(I\\) were fixed, and \\(\\Theta\\) was\r\nrandom.↩︎\r\n\r\nThere are, in fact, infinitely many more ways to produce intervals with the\r\nunconditional coverage property Eq. (13).↩︎\r\n\r\nI see that Jaynes (the father of the Maximum Entropy foundation of\r\nStatistical Mechanics, among other things) has a full essay paper on\r\nConfidence Intervals vs. Bayesian Intervals, which I haven’t read -\r\nthe abstract sounds a bit loaded to me, but it’s probably definitely worth to\r\nread.↩︎\r\n",
    "preview": {},
    "last_modified": "2024-02-07T13:33:21+01:00",
    "input_file": {}
  },
  {
    "path": "posts/2023-03-10-correlation-without-causation/",
    "title": "Correlation Without Causation",
    "description": "*Cum hoc ergo propter hoc*",
    "author": [
      {
        "name": "Valerio Gherardi",
        "url": "https://vgherard.github.io"
      }
    ],
    "date": "2023-03-30",
    "categories": [
      "Statistics"
    ],
    "contents": "\r\nIt is part of common knowledge that correlation does not require causation.\r\nAbsence of causation, say between a condition \\(p\\) and an effect \\(q\\), means that the realization of \\(p\\) has no influence on the presence of \\(q\\). If this is the case,\r\na statistical correlation between \\(p\\) and \\(q\\) can still be present, if the realization of \\(p\\) modifies our state of information about \\(q\\).\r\nAs an example, let \\(X,Y\\) be two conditionally independent binary random variables, with a common probability \\(\\Theta\\) of evaluating to one. Think, for instance,\r\nof a machine that produces pairs of identical biased coins, with a probability of tails \\(\\Theta\\).\r\nIf \\(\\Theta\\) is equal to a given value \\(\\theta\\), the joint probability distribution of \\(X\\) and \\(Y\\) is:\r\n\\[\r\n\\text {Pr}(X=x,Y=y\\vert \\Theta = \\theta) = B(x;\\theta)B(y;\\theta), \\tag{1}\r\n\\]\r\nwhere \\(B(z; \\theta) = \\theta ^z (1 - \\theta) ^ {1-z}\\).\r\nWhether or not this provides a satisfying probabilistic description of experiments on \\(X\\) and \\(Y\\) depends on context.\r\nFrom a frequentist point of view, if \\(\\Theta\\) is fixed once and for all, the right hand side of Eq. (1) correctly describes the experimental outcomes of \\(X\\) and \\(Y\\) for some value of \\(\\theta\\). On the other hand, if \\(\\Theta\\) can change from experiment to experiment in a random fashion, and we do not observe its values \\(\\theta\\), we clearly cannot use Eq. (1) as it stands, as its usage requires knowing \\(\\theta\\).\r\nFinally, from a bayesian’s point of view, if \\(\\Theta\\) is fixed but unknown, Eq. (1) does not describe our state of knowledge about \\(X\\) and \\(Y\\), because it assumes unavailable information (\\(\\Theta = \\theta\\)).\r\nIn the last two cases, what we’re actually after is the unconditional probability:\r\n\\[\r\n\\text{Pr}(X=x,\\,Y=y)=\\intop\\,\\text{d}P_\\Theta(\\theta) \\,\\text{Pr}(X=x,Y=y\\vert\\Theta = \\theta)\r\n\\tag{2}\r\n\\]\r\nwhere \\(\\text{d}P_\\Theta(\\theta)\\) can be regarded either as the actual probability distribution of \\(\\Theta\\) (in a frequentist framework) or as a subjective prior distribution (in a bayesian framework).\r\nPlugging Eq. (1) into (2), we find:\r\n\\[\r\n\\begin{split}\r\n\\text{Pr}(X=1,\\,Y=1) & = \\mathbb E(\\Theta)^2+\\text{Var}(\\Theta)\\\\\r\n\\text{Pr}(X=1,\\, Y=0)&=\\mathbb E(\\Theta)-\\mathbb E(\\Theta)^2-\\text{Var}(\\Theta)\\\\\r\n\\text{Pr}(X=0,\\, Y=1)&=\\mathbb E(\\Theta)-\\mathbb E(\\Theta)^2-\\text{Var}(\\Theta)\\\\\r\n\\text{Pr}(X=0,\\,Y=0) & = \\mathbb (1-\\mathbb E(\\Theta))^2+\\text{Var}(\\Theta) \\\\\r\n\\end{split}\r\n\\]\r\nIn particular, we have:\r\n\\[\r\n\\dfrac{\\text{Pr}(Y = 1 \\vert\\, X = 1)}{\\text {Pr}(Y=1)} = 1+\\frac{\\text{Var}(\\Theta)}{\\mathbb{E}(\\Theta)^2},\r\n\\tag{3}\r\n\\]\r\nwhich means that, unconditionally, \\(X\\) and \\(Y\\) are not independent, but in fact positively correlated1.\r\nObservations of this kind apply, mutatis mutandis, in many practical situations. For instance if we were modeling the time series of new visitors to a website, we could reasonably assume that the number of yesterday’s new visitors does not influence the number of today’s ones (if individual visitors are unlikely to interact with each other). Yet, it would be wrong to assume, and easy to disprove, that these two numbers are by themselves statistically independent, because yesterday’s new visitors carry useful background information on today’s potential new visitors.\r\nThe bottom line of the post is that lack of causation does not imply lack of correlation, which is logically equivalent to the original motto… but, for some strange reason, I find easier to forget.\r\n\r\nHere I’m using the word correlation in a loose sense, as in the popular motto.↩︎\r\n",
    "preview": {},
    "last_modified": "2024-02-07T13:33:21+01:00",
    "input_file": {}
  },
  {
    "path": "posts/2022-11-07-posi-2/",
    "title": "How to get away with selection. Part II: Mathematical Framework",
    "description": "Mathematicals details on Selective Inference, model misspecification and coverage guarantees.",
    "author": [
      {
        "name": "Valerio Gherardi",
        "url": "https://vgherard.github.io"
      }
    ],
    "date": "2022-11-25",
    "categories": [
      "Statistics",
      "Selective Inference",
      "Model Misspecification"
    ],
    "contents": "\r\nIntroduction\r\nIn a previous post I introduced the problem of\r\nSelective Inference and illustrated, in a simplified setting, how selection\r\ngenerally affects the coverage of confidence intervals - when they are both\r\nselected and constructed using the same data. While the example was\r\n(hopefully) helpful to build some intuition, in order to discuss\r\n“How to get away with selection” in a comprehensive manner we need to make a\r\nfew clarifications. In particular, we need to answer the following questions:\r\nWhat is the target of our Selective Inference?\r\nWhat statistical properties would we like our inferences to have?\r\nSearching through the literature, I realized there exist a bunch of variations\r\non these two themes, which give rise to different mathematical formalisms.\r\nSpecifying these points is mandatory for any further discussion, so my main goal\r\nhere is to present these different points of view and explain some of their\r\npros and cons.\r\nMathematical Framework\r\nRegression and parameter estimation\r\nIn order to avoid getting carried away with too much abstraction, I will focus\r\non a specific type of problem, that is parameter estimation in regression. As\r\nfar as I can tell, this represents no serious loss in generality, and most of\r\nthe notions I’m going to outline would carry over to more general problems in a\r\nstraightforward manner.\r\nBroadly speaking, the goal of regression is to understand the dependence of a\r\nset of random variables \\(Y\\) from another set of random variables \\(X\\). More precisely,\r\nwe’re interested in the conditional probability distribution of \\(Y\\),\r\nconditioned on the observation of \\(X\\), which can always be represented as:\r\n\\[\r\nY = f(X)+\\varepsilon,\\qquad \\mathbb E(\\varepsilon|X)\\equiv 0.\r\n\\tag{1}\r\n\\]\r\nwhere \\(f(X) = \\mathbb E(Y|X)\\) is the conditional mean of \\(Y|X\\), and \\(\\varepsilon\\)\r\nis a random variable with vanishing conditional mean, sometimes called the “error term”.\r\nParameter estimation means that we have (somehow) chosen functional forms for\r\nthe conditional mean and for the probability distribution of the error term,\r\nand we want to provide estimates for the parameters defining these two functions.\r\nEnter selection\r\nNow, in many applications we actually don’t have much insight about the correct\r\nfunctional form \\(f\\), nor of the distribution of the error term \\(\\varepsilon\\).\r\nGiven a dataset of experimental observations of \\(Y\\) and \\(X\\), we are thus faced\r\nwith two tasks:\r\nSelection. Choose an adequate model \\(\\hat M = (\\hat f,\\,\\hat \\varepsilon)\\)\r\nfor the true \\(f\\) and \\(\\varepsilon\\), usually from a (more or less) pre-specified\r\nfamily of initial guesses \\(\\mathcal M =\\{(f_i,\\varepsilon_i)\\}_i\\), using a\r\n(more or less) pre-specified criterion.\r\nPost-Selection Inference. Perform inference with the chosen model. In the\r\nstudy case we’re considering, this amounts to provide confidence intervals for\r\nmodel parameters.\r\nIt is, of course, the need to use the same data for both tasks which gives rise\r\nto complications.\r\nInferential target\r\nWe now come to the first question raised in the Introduction, regarding the\r\nnature of the inferential target. And now more concretely:\r\nwhat are the true values of the parameters we’re trying to estimate?\r\nOne can appreciate that the answer necessarily depends on how we consider the\r\nfinal output of the modeling procedure:\r\n(Model Trusting) As the true data generating process, or\r\n(Assumption Lean) As an approximation of the (partially or totally\r\nunknown) data generating process, chosen in a data-driven fashion within\r\na family of initial guesses \\(\\mathcal M\\).\r\nAccording to the first interpretation, there’s no room for ambiguity: the\r\ntargets of our estimates should clearly be the true parameter values,\r\nwhose definition does not depend on any modeling choice. The second\r\ninterpretation, on the other hand, leaves a certain amount of\r\nfreedom in this respect. Here, I will follow the point of view advocated by\r\n(Berk et al. 2013), according to which the target parameters\r\nare those providing the best approximation1 to the true data generating\r\nprocess, according to the functional form chosen in the selection stage.\r\nI believe both positions have their merits and flaws, and which one is more\r\nappropriate largely depends on context. In a reductionist field like\r\nHigh Energy Physics, whose eventual goal is to explain the fundamental laws of\r\nNature, the Model Trusting point of view is usually taken,\r\nand with good reason. When studying more emergent phenomena, on the other hand,\r\nthe quest for fundamental laws is often meaningless (or at best wishful\r\nthinking), and the Assumption Lean standpoint looks more reasonable. In any\r\ncase, here the differences are not merely philosophical ones, as the two\r\ninterpretations give rise to different mathematical formalisms.\r\nIn the following posts, I will be mostly focusing on the Assumption Lean\r\npoint of view. In my opinion, this has two big advantages2:\r\nConceptual: Inferences have a well-defined meaning even when the model is\r\nmisspecified3 - which, apart from quite particular cases (see above),\r\naccounts for the great majority of cases encountered by data analysts in\r\nthe practice.\r\nMathematical: It allows to reduce the problem of selective inference to\r\nthat of simultaneous inference (more on this below).\r\nFor the latter type of problems, the theory of\r\nmultiple testing\r\nreadily provides at least conservative bounds.\r\nNotions of coverage\r\nIn addition to the conceptual distinction about the interpretation of the\r\nselected model, there is also a technical distinction regarding the type\r\nof coverage guarantees that selective confidence intervals should be endowed\r\nwith (this is the concrete version of the second question posed in the\r\nIntroduction).\r\nHere are some of the notions of coverage I’ve come across:\r\nMarginal coverage over the selected parameters. We bound at level \\(\\alpha\\)\r\nthe probability that our procedure constructs any non-covering confidence\r\ninterval for model parameters \\(\\beta_i\\). Denote by \\(\\widehat M\\) the selected model\r\nand, with abuse of notation, the corresponding set of selected parameters.\r\nIf \\(\\widehat{\\text{CI}}_i\\) are the confidence intervals for parameters \\(\\beta _i\\), we\r\nrequire:\r\n\\[\r\n\\text{Pr}(\\beta _i \\in \\widehat{\\text{CI}}_i\\,\\,\\forall i \\in \\widehat M) \\geq 1-\\alpha\r\n\\tag{2}\r\n\\]\r\nConditional coverage over the selected parameters. We bound at level\r\n\\(\\alpha\\) the conditional\r\nprobability of constructing a non-covering confidence interval, conditioned on\r\nthe outcome of selection \\(\\widehat M\\). If \\(m\\) is the selected model, we require:\r\n\\[\r\n\\text{Pr}(\\beta _i \\in \\widehat{\\text{CI}}_i\\,\\,\\forall i \\in m|\\,\\widehat M=m) \\geq 1-\\alpha\r\n\\tag{3}\r\n\\]\r\nFalse Coverage Rate. We bound at level \\(q\\)4 the expected fraction of\r\nnon-covering confidence intervals out of all intervals constructed:\r\n\\[\r\n\\mathbb E \\left( \\dfrac{|i \\in \\widehat M \\colon \\ \\beta_i \\in \\widehat{\\text{CI}}_i|}{|\\widehat M|} \\right)\r\n\\geq1-q\r\n\\tag{4}\r\n\\]\r\nwhere \\(|S|\\) denotes the cardinality of a set \\(S\\).\r\nNotice that the random variables in the previous equations are \\(\\widehat M\\) and\r\n\\(\\widehat{\\text{CI}}_i\\) (denoted by a hat), whereas the true coefficients \\(\\beta_i\\)\r\nand the selected set \\(m\\) in the case of conditional coverage\r\n(Eq. (3)) are fixed quantities.\r\nVariations of these measures focusing on single coefficients are also possible.\r\nIn practice, in the Assumption Lean framework I just introduced,\r\nall these coverage measures would not be computed\r\nunder the selected model’s probability distribution, but rather under a\r\npre-fixed, more general model for the true probability distribution of \\(Y\\)\r\nconditional on \\(X\\). We may, for instance, assume that the true error term\r\n\\(\\varepsilon\\) in Eq. (1) is gaussian with constant\r\n(\\(X\\)-independent) variance, without making any further assumption on \\(f(X)\\).\r\nWith enough data, we may even be able to bypass any assumption at all, and\r\ncompute all relevant quantiles using a bootstrap (Kuchibhotla et al. 2020).\r\nIn the Model Trusting framework, on the other hand, the conditional coverage\r\nmeasure would be computed under the selected model… and I’m honestly not\r\nsure whether it’s possible to make sense of the other two measures in this\r\nframework.\r\nSelective vs. Simultaneous Inference\r\nThe connection between selective and simultaneous inference can now be\r\nunderstood, through the notion of marginal coverage. In fact, suppose that we\r\nwere able to provide simultaneous coverage for all parameters\r\n(selected or not):\r\n\\[\r\n\\text{Pr}(\\beta _i \\in \\widehat{\\text{CI}}_i\\,\\,\\forall i) \\geq 1-\\alpha\r\n\\tag{5}\r\n\\]\r\nThen, it’s easy to see that the same confidence interval would also provide\r\nmarginal coverage over the selected parameters. In order to see that, simply\r\nobserve that the simultaneous coverage event can be decomposed as:\r\n\\[\r\n(\\beta _i \\in \\widehat {\\text{CI}}_i\\,\\,\\forall i) = (\\beta _i \\in \\widehat{\\text{CI}}_i\\,\\,\\forall i \\in \\widehat M) \\cap (\\beta _i \\in \\widehat{\\text{CI}}_i\\,\\,\\forall i \\notin \\widehat M)\r\n\\]\r\nwhich implies that:\r\n\\[\r\n\\text{Pr}(\\beta _i \\in \\widehat{\\text{CI}}_i\\,\\,\\forall i \\in \\widehat M) \\geq \\text{Pr}(\\beta _i \\in \\widehat{\\text{CI}}_i\\,\\,\\forall i) \\geq 1-\\alpha,\r\n\\tag{6}\r\n\\]\r\nthat is simultaneous coverage implies marginal coverage over the\r\nselected parameters. In fact, with a few more set-theory manipulations,\r\none can arrive to a powerful Lemma (see Kuchibhotla et al. 2020 for details):\r\ncontrolling the marginal coverage (2) at level \\(\\alpha\\)\r\nfor any model selection procedure5 is equivalent to controlling\r\nsimultaneous coverage for all possible model selections.\r\nThis provides us a first, very simple recipe for selective inference, which can\r\nbe applied whenever one is able to construct confidence intervals for parameters\r\nin the absence of selection: use any procedure (e.g. \r\nBonferroni corrections)\r\nwhich controls simultaneous coverage for all parameters we may select a priori.\r\nConclusions\r\nThis was a long and somewhat abstract post, so perhaps the best way to conclude\r\nis with some bottom lines:\r\nWhen performing model-based inference, nothing forces us to make working\r\nhypotheses about the correctness of the model we arrive at. Not making such\r\nassumptions corresponds to what I called an Assumption Lean framework.\r\nIn an Assumption Lean framework, the inferential targets are, in general,\r\nthe best approximations to the truth allowed by the selected model.\r\nThere exist many type of coverage guarantees for selective confidence\r\nintervals.\r\nBounding the probability of any false coverage statement\r\n(“marginal coverage over the selected parameters”) allows to turn a problem of\r\nselective inference into one of simultaneous inference.\r\nIn particular, it is worth to mention that the last observation lead us to a\r\nsimple recipe for constructing (somewhat conservative, but valid) selective\r\nconfidence intervals with marginal coverage. In the posts which follow,\r\nI will discuss some more advanced methods which produce confidence intervals\r\nsatisfying the requirements discussed here.\r\n\r\n\r\n\r\nBenjamini, Yoav, and Daniel Yekutieli. 2005. “False Discovery Rate–Adjusted Multiple Confidence Intervals for Selected Parameters.” Journal of the American Statistical Association 100 (469): 71–81.\r\n\r\n\r\nBerk, Richard, Lawrence Brown, Andreas Buja, Kai Zhang, and Linda Zhao. 2013. “Valid Post-Selection Inference.” The Annals of Statistics, 802–37.\r\n\r\n\r\nKuchibhotla, Arun K, Lawrence D Brown, Andreas Buja, Junhui Cai, Edward I George, and Linda H Zhao. 2020. “Valid Post-Selection Inference in Model-Free Linear Regression.” The Annals of Statistics 48 (5): 2953–81.\r\n\r\n\r\nWhere what’s to be considered best is defined in terms of some\r\nreasonable metric. For instance, for the conditional mean \\(f(X)\\) of a continuous\r\nresponse \\(Y\\), a convenient target \\(f^*(X)\\) within a prescribed family of\r\nfunctions \\(\\mathcal F\\) can be defined by\r\n\\(f^* =\\arg\\min _{\\phi \\in \\mathcal F} \\mathbb E (\\vert f(X) - \\phi (X)\\vert^2)\\).↩︎\r\nThere’s also a third advantage, which is that I find much harder to think\r\nabout selective inference from the Model Trusting point of view, hence to write\r\nblog posts about it - but that’s likely a limitation of my imagination, rather\r\nthan of the point of view itself.↩︎\r\nA cool word for “wrong”.↩︎\r\nWhy \\(q\\) and not \\(\\alpha\\)? Ask (Benjamini and Yekutieli 2005).↩︎\r\nIt is assumed that the selection is performed from a from a fixed family\r\nof models \\(\\mathcal M\\).↩︎\r\n",
    "preview": {},
    "last_modified": "2024-02-07T13:33:21+01:00",
    "input_file": {}
  },
  {
    "path": "posts/2022-10-18-posi/",
    "title": "How to get away with selection. Part I: Introduction",
    "description": "Introducing the problem of Selective Inference, illustrated through a simple simulation in R.",
    "author": [
      {
        "name": "Valerio Gherardi",
        "url": "https://vgherard.github.io"
      }
    ],
    "date": "2022-11-14",
    "categories": [
      "Statistics",
      "Selective Inference",
      "R"
    ],
    "contents": "\r\nPrologue\r\nA few months back, for undocumented circumstances, my browser’s search\r\nhistory was full of terms like “parameter estimation with variable selection”,\r\nor “confidence intervals after cross-validation”, or again\r\n“linear model uncertainties after staring into the abyss”, …\r\nSparing you my rock bottom, I eventually stumbled upon the right keywords, and\r\nstarted digging into the mathematical aspects of Selective Inference, or\r\nPost-Model Selection Inference. Now, while my hands\r\nare still full of dirt, I’ve decided it’s the right moment to write some\r\nnotes about what I’ve learned - whose main recipient is the future me,\r\nwhich will otherwise inevitably forget what the present me thinks he\r\nknows. If you’re not the future me:\r\nWelcome 👋\r\nIf you have detected some imprecision, or have suggestions for this or the\r\nnext posts, you are more than welcome to create an issue on the source\r\nrepository of this blog.\r\nIntroduction\r\nBroadly speaking, the problem of Selective Inference is that of\r\nperforming valid statistical inferences when the actual questions of the data analysis are not fixed in advance, but rather selected through data examination. In model-based inference, this lack of\r\npre-determination usually stems from the (often unavoidable) practice of\r\nusing the same data to choose an adequate model for the data generating\r\nprocess and to perform inference. The intrinsic\r\nrandomness of the selection process has important consequences on the\r\nprobability of making different guesses about the selected questions,\r\nwhich, if not properly taken into account, can completely invalidate the\r\nanalysis results.\r\nIf this sounds unfamiliar, think about machine-learning: when training a\r\npredictive model on a given dataset, you would usually consider the\r\nerror on the same dataset as a poor (optimistic) estimate of the true\r\nmodel’s error rate, because the model was tuned to perform well on that\r\ndata in the first place. There we go, Selective Inference! A selection\r\nfrom an extended family of models1 is performed through data examination,\r\nand this event introduces a bias in the error estimate of the final\r\nmodel from training data.\r\nThe example from machine-learning also suggests a very simple-minded and\r\nrelatively a-theoretical approach to Selective Inference: data-splitting2. According to this method, we would use only part of the available data to select the questions to be answered by the analysis, while the remaining part would\r\nbe reserved to perform the actual inference. For this program to\r\nsucceed, there are however two important requirements: first, we must have\r\nenough data to ensure decent statistics for both the selection and inference\r\ntasks; and second, we must be able to split data in two independent\r\n(or close to independent) sets. This can suppose problems with, e.g.,\r\ntime-series data. If, on the other hand, these requirements cannot be met, we\r\nhave to resort to more sophisticated methods.\r\nAt this point, I would like to stress that the conceptual problems\r\nI’ve just pointed out will probably look obvious to any reader with a\r\ndecent intuition for probability3. What is less obvious, but in fact\r\na fairly active research field in statistics,\r\nis how to perform valid selective inferences when the “easy” solution of\r\ndata-splitting I mentioned above is not available. This is where theory\r\nre-enters the game, and what I’m going to ramble about in this and the next\r\nposts.\r\nIllustrations of Selective Inference\r\nEnough for the speech, let us see how selection can affect (and invalidate)\r\nclassical inference with a simple-minded simulation.\r\nSetting\r\nTo illustrate why naive classical inference can fail in the presence of\r\nselection, we consider a very simple regression\r\nproblem involving a single regressor \\(X\\) and a response \\(Y\\), where all the assumptions of the classical linear model hold. In fact, we will assume the true data generating process to be:\r\n\\[\r\nY = mX + \\varepsilon, \\qquad \\varepsilon \\sim \\mathcal N (0, \\sigma),\r\n\\tag{1}\r\n\\]\r\nwhere \\(\\varepsilon \\sim \\mathcal N (0, \\sigma)\\) means “\\(\\varepsilon\\) follows a gaussian distribution with mean \\(0\\) and standard deviation \\(\\sigma\\)”.\r\nA selective modeling procedure\r\nNow, suppose we are given a dataset of \\(N\\) independent observations\r\n\\((y_i, x_i)_{i = 1, \\,2,\\, \\dots,\\,N}\\), and we would like to study the\r\ndependence of \\(Y\\) from \\(X\\). Of course we don’t know the true law, Eq.\r\n(1), but by a stroke of luck (or by a Taylor expansion\r\nargument) we make the correct initial guess that such dependence is\r\nlinear in \\(X\\). We are, however, unsure whether it would be appropriate\r\nto also include an intercept term in the fit. We thus establish the\r\nfollowing selective modeling procedure:\r\nFit a linear model with intercept term,\r\n\\(Y = mX + q + \\varepsilon\\).\r\nStop if the intercept estimate is significantly different from zero (say, at the level of 1-\\(\\sigma\\), \\(p\\text{-value}<32\\%\\)). Otherwise:\r\nFit a model with no intercept, \\(Y = mX + \\varepsilon\\).\r\nFinally, we use the last fitted model to construct a “naive 95%”\r\nconfidence interval \\((\\hat m_-, \\hat m_+)\\) for the slope \\(m\\).\r\nThis is defined by:\r\n\\[\r\n\\hat m_\\pm = \\hat m\\pm t_{0.975, \\,N-d} \\cdot \\hat \\sigma _\\hat m\\qquad (95\\%\\,\\text {C.L.}).\r\n\\tag{2}\r\n\\]\r\nHere \\(t_{0.975,\\, N-d}\\) is the 97.5%-quantile of the \\(t\\)-student\r\ndistribution with \\(N-d\\) degrees of freedom, and \\(d\\) is the number of\r\nestimated parameters, (\\(2\\) or \\(1\\), according to where we stopped in the\r\nmodeling procedure). \\(\\hat m\\) and \\(\\hat \\sigma _{\\hat m}\\) are the\r\nOrdinary Least Squares (OLS) estimates of the slope and its standard\r\ndeviation, respectively. These are the classical confidence intervals\r\nreported by the lm() function in R.\r\nAt a first glance, this procedure might look reasonable. After all, both\r\nintervals we may end up constructing do have a genuine 95% coverage probability,\r\nwhen constructed unconditionally… and by selecting the “best” model we’re\r\nsupposedly choosing the “best” confidence interval. In spite of this qualitative\r\nargument, we inquire:\r\n… does it work?\r\nNow, the question is: how often do the naive CIs (2)\r\ncover the true parameter \\(m\\) of Eq. (1)? The answer\r\nbetter be “at least 95% of the times” for our confidence claim in Eq.\r\n(2) to be valid!\r\nWe can check the actual coverage of (2) through a simulation.\r\nHere I’ll assume \\(m = \\sigma = 1\\), and that the\r\ndataset consists of \\(N=10\\) independent observations of \\(Y\\) at fixed points\r\n\\(X = (1, \\,2, \\,\\dots ,\\, 10)\\).\r\n\r\n\r\nm <- sigma <- 1  # True parameters\r\nx <- 1:10  # x covariate, assumed fixed\r\n\r\n\r\nThe following function generates observations of \\(Y\\) according to the distribution (1):\r\n\r\n\r\ngenerate_y <- function(x, m, sigma) {\r\n  eps <- rnorm(length(x), mean = 0, sd = sigma)\r\n  return(m * x + eps)\r\n  }\r\n\r\n\r\nFor example:\r\n\r\n\r\nset.seed(840)\r\nplot(x, generate_y(x, m, sigma), xlab = \"X\", ylab = \"Y\")\r\n\r\n\r\n\r\nBelow we generate \\(B=10^4\\) such \\((X,Y)\\) datasets, for each of which we fit a linear model according to the procedure specified above, and check how many\r\ntimes the true slope \\(m = 1\\) falls in the confidence interval defined by Eq. (2).\r\n\r\n\r\n# Simulation parameters\r\nB <- 1e4  # Number of replications\r\n\r\n# Preallocate logical vectors to be assigned for each replica - for efficiency. \r\nq_dropped <- logical(B)  # Was the intercept term 'q' dropped? \r\nm_covered <- logical(B)  # Was the true parameter 'm' covered?\r\n\r\n# Set seed for reproducibility\r\nset.seed(841)\r\n\r\n# Logging\r\ntime_start <- Sys.time()  \r\n\r\n# Start the simulation\r\nfor (b in 1:B) {\r\n  y <- generate_y(x, m, sigma)\r\n  \r\n  # Fit full model (including intercept 'q')\r\n  fit <- lm(y ~ x + 1)  \r\n  q_pval <- summary(fit)$coefficients[1, 4]\r\n  \r\n  # Is 'q' term \"significant\"? If not, drop 'q' and fit a simpler model\r\n  if (q_pval > 0.32)  { \r\n    q_dropped[[b]] <- TRUE\r\n    fit <- lm(y ~ x - 1) \r\n  } else {\r\n    q_dropped[[b]] <- FALSE\r\n  }\r\n  \r\n  # Construct CI for 'm',  using the selected model's fit\r\n  m_ci <- confint(fit, 'x', level = 0.95)\r\n  m_covered[[b]] <- m_ci[[1]] < m && m < m_ci[[2]]\r\n}\r\n\r\ntime_end <- Sys.time()\r\ncat(\"Done :) Took \", as.numeric(time_end - time_start), \" seconds.\")\r\n\r\nDone :) Took  12.12071  seconds.\r\n\r\nThe variable m_covered[[b]] is TRUE if the slope \\(m\\) fell in the\r\nnaive CI \\((m_-, m_+)\\) defined by Eq. (2) in the\r\nb-th replica of the simulation. Hence, the actual coverage fraction of\r\nthe CI is given by:\r\n\r\n\r\nmean(m_covered)  # Actual coverage of naive \"95%\" CIs.\r\n\r\n[1] 0.9172\r\n\r\n92%! If this difference from the nominal 95% coverage guarantee does not\r\nstrike you as enormous, think about it in these terms: the naive CIs\r\n(2) fail to cover the true parameter about 8% of the\r\ntimes; This is a relative +60% of failures with respect to an honest 95%\r\nCI.\r\nWhat’s going on\r\nWe can understand a bit better what’s happening here by decomposing the\r\ncoverage probability as follows:\r\n\\[\r\n\\text {Pr}(m \\in \\text{CI})  = \\text {Pr}(m \\in \\text{CI}_{q \\text{ dropped}}\\,\\vert\\,q \\text{ dropped})\\cdot \\text {Pr}(q \\text{ dropped}) +\\\\ +\\text {Pr}(m \\in \\text{CI}_{q  \\text{ kept}}\\,\\vert\\,q \\text{ kept})\\cdot \\text {Pr}(q \\text{ kept})\r\n\\tag{3}\r\n\\]\r\nThe right hand side of this equation shows how our selective modeling\r\nprocedure alters the probability \\(\\text{Pr}(m\\in \\text{CI})\\). There are\r\ntwo contributing factors here: the probability of dropping the intercept\r\nterm, and the covering probabilities of the CIs constructed in the two\r\ncases (\\(\\text{CI}_{q \\text{ dropped}}\\) and\r\n\\(\\text{CI}_{q \\text{ kept}}\\)). We can estimate all these\r\nprobabilities as:\r\n\r\n\r\nmean(q_dropped)  # Pr(q dropped)\r\n\r\n[1] 0.6782\r\n\r\nmean(m_covered[q_dropped])  # Pr(m covered | q dropped)\r\n\r\n[1] 0.9510469\r\n\r\nmean(m_covered[!q_dropped])  # Pr(m covered | q kept)\r\n\r\n[1] 0.845867\r\n\r\nThe first result directly follows from our procedure, which uses a\r\nhypothesis test with significance \\(\\alpha = 32\\%\\) to test the (true)\r\nnull hypothesis \\(q = 0\\). It is a bit harder but in fact possible to\r\nprove that4\r\n\\(\\text {Pr}(m \\in \\text{CI}_{q \\text{ dropped}}\\,\\vert\\,q \\text{ dropped}) = 95\\%\\),\r\nas the second estimate would seem to suggest. The third result is\r\nfinally what invalidates the naive coverage guarantee in Eq.\r\n(2).\r\nConcluding Remarks\r\nTo summarize:\r\nWe started with two linear models for \\(Y\\) vs. \\(X\\), which were in fact both well-specified (that is, correct).\r\nWe stipulated to choose one of the two models by testing the null hypothesis \\(q = 0\\).\r\nAfter selection, we constructed \\(95\\%\\) confidence intervals for the slope\r\n\\(\\hat m\\) using the selected model, as if this had been fixed in advance.\r\nA simulation shows that such intervals have a true coverage probability of\r\n\\(\\approx 92\\%\\).\r\nThe mathematical explanation of the last result is provided by Eq. (3), while the (hopefully) plain English one in the introductory part of this post. I will conclude with a few parenthetical remarks.\r\nFirst, the selective procedure proposed here would likely hardly be applied in practice in such a simple situation5. However, one could easily think of a more complex scenario with multiple covariates, where eliminating redundant ones could turn out to be beneficial for interpretation (if not compulsory, if the number of covariates exceeds the sample size).\r\nSecond, in order to avoid cluttering the discussion with too much\r\ntechnicalities, I have deliberately chosen a quite special point in true-model space (\\(q = 0\\)). This implies that both fits with and without intercept estimate the same slope \\(m\\); this is a peculiar property of \\(q = 0\\), which would not be true in the general case \\(q \\in \\mathbb R\\). In general, we would have to carefully define the inferential targets for the \\(q=0\\) and \\(q \\in \\mathbb R\\) cases, in a differential manner.\r\nConclusion\r\nThat was all for today. In the next post, I will discuss some mathematical details\r\nregarding the formulation of the Selective Inference problem in model-building.\r\nFor those surviving down to the bottom of the funnel, my future plan is to\r\nreview some (valid) selective inference methods I found interesting, including:\r\nBenjamini-Yekutieli control of False Coverage Rate (Benjamini and Yekutieli 2005),\r\nPOSI bounds for marginal coverage (Berk et al. 2013),\r\nData Fission, an elegant generalization of good old data splitting (Leiner et al. 2021).\r\n…whatever cool stuff I may discover in the meantime.\r\nCiao!\r\n\r\n\r\n\r\nBenjamini, Yoav, and Daniel Yekutieli. 2005. “False Discovery Rate–Adjusted Multiple Confidence Intervals for Selected Parameters.” Journal of the American Statistical Association 100 (469): 71–81.\r\n\r\n\r\nBerk, Richard, Lawrence Brown, Andreas Buja, Kai Zhang, and Linda Zhao. 2013. “Valid Post-Selection Inference.” The Annals of Statistics, 802–37.\r\n\r\n\r\nIsidori, Gino, Davide Lancierini, Patrick Owen, and Nicola Serra. 2021. “On the Significance of New Physics in b→ Sℓ+ ℓ- Decays.” Physics Letters B 822: 136644.\r\n\r\n\r\nLeiner, James, Boyan Duan, Larry Wasserman, and Aaditya Ramdas. 2021. “Data Fission: Splitting a Single Data Point.” arXiv. https://doi.org/10.48550/ARXIV.2112.11079.\r\n\r\n\r\nShalizi, C. R. 2020. “Post-Model-Selection Inference.” 2020. http://bactra.org/notebooks/post-model-selection-inference.html.\r\n\r\n\r\nVrbik, Jan. 2020. “Regression Analysis (Lecture Notes).” 2020. http://spartan.ac.brocku.ca/~jvrbik/MATH3P82/notes.pdf.\r\n\r\n\r\nHere, in the “extended family of models”, I’m also implicitly\r\naccounting for the multiplicity introduced by continuous model\r\nparameters and training parameters (also known as hyper-parameters).↩︎\r\nThe preferential method according to (Shalizi 2020), from which\r\nI borrowed the “a-theoretical” description, and which I recommend as a starting point for literature review.↩︎\r\nThis is not to say that correctly accounting for Selective Inference is\r\nthe default in scientific practice. A relevant example from the field I come\r\nfrom (Particle Physics), is documented in this stimulating reference:\r\n(Isidori et al. 2021).↩︎\r\nI’m always amazed by the great deal of theory one can learn by\r\nrunning a dumb simulation, and trying to explain a posteriori what\r\nseems to be a too perfect result. Technically, this follows from the fact that the slope estimate\r\n\\(\\hat m\\) and residual sum of squares \\(\\text{RSS}\\) of the reduced\r\nmodel, and the \\(F\\)-statistic used to test \\(q = 0\\), are all\r\nindependent random variables under the same null hypothesis, here\r\ntrue by construction. All these facts are in turn consequences of\r\ngeneral theorems from linear model theory, see for example\r\n(Vrbik 2020, chap. 4)… and, to be sure, it took me more than a single\r\nnight without sleep to figure all this out.↩︎\r\nAnd I’m actually not sure that, after properly taking into account Selective Inference, it would lead to a substantial gain in estimation accuracy, compared to simply fitting the possibly redundant model with intercept.↩︎\r\n",
    "preview": "posts/2022-10-18-posi/posi_files/figure-html5/unnamed-chunk-3-1.png",
    "last_modified": "2024-02-07T13:33:20+01:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2021-11-13-kgrams-v012-released/",
    "title": "kgrams v0.1.2 on CRAN",
    "description": "kgrams: Classical k-gram Language Models in R.",
    "author": [
      {
        "name": "Valerio Gherardi",
        "url": "https://vgherard.github.io"
      }
    ],
    "date": "2021-11-13",
    "categories": [
      "Natural Language Processing",
      "R"
    ],
    "contents": "\r\nSummary\r\nVersion v0.1.2 of my R package kgrams was just accepted by CRAN. This package provides tools for training and evaluating k-gram language models in R, supporting several probability smoothing techniques, perplexity computations, random text generation and more.\r\nShort demo\r\n\r\n\r\nlibrary(kgrams)\r\n# Get k-gram frequency counts from Shakespeare's \"Much Ado About Nothing\"\r\nfreqs <- kgram_freqs(kgrams::much_ado, N = 4)\r\n\r\n# Build modified Kneser-Ney 4-gram model, with discount parameters D1, D2, D3.\r\nmkn <- language_model(freqs, smoother = \"mkn\", D1 = 0.25, D2 = 0.5, D3 = 0.75)\r\n\r\n# Sample sentences from the language model at different temperatures\r\nset.seed(840)\r\nsample_sentences(model = mkn, n = 3, max_length = 10, t = 1)\r\n\r\n[1] \"i have studied eight or nine truly by your office [...] (truncated output)\"\r\n[2] \"ere you go : <EOS>\"                                                        \r\n[3] \"don pedro welcome signior : <EOS>\"                                         \r\n\r\nsample_sentences(model = mkn, n = 3, max_length = 10, t = 0.1)\r\n\r\n[1] \"i will not be sworn but love may transform me [...] (truncated output)\" \r\n[2] \"i will not fail . <EOS>\"                                                \r\n[3] \"i will go to benedick and counsel him to fight [...] (truncated output)\"\r\n\r\nsample_sentences(model = mkn, n = 3, max_length = 10, t = 10)\r\n\r\n[1] \"july cham's incite start ancientry effect torture tore pains endings [...] (truncated output)\"   \r\n[2] \"lastly gallants happiness publish margaret what by spots commodity wake [...] (truncated output)\"\r\n[3] \"born all's 'fool' nest praise hurt messina build afar dancing [...] (truncated output)\"          \r\n\r\nNEWS\r\nOverall Software Improvements\r\nThe package’s test suite has been greatly extended.\r\nImproved error/warning conditions for wrong arguments.\r\nRe-enabled compiler diagnostics as per CRAN policy (#19)\r\nAPI Changes\r\nverbose arguments now default to FALSE.\r\nprobability(), perplexity() and sample_sentences() are restricted to\r\naccept only language_model class objects as their model argument.\r\nNew features\r\nas_dictionary(NULL) now returns an empty dictionary.\r\nBug Fixes\r\nFixed bug causing .preprocess and .tknz_sent arguments to be ignored in process_sentences().\r\nFixed previously wrong defaults for max_lines and batch_size arguments in kgram_freqs.connection().\r\nAdded print method for class dictionary.\r\nFixed bug causing invalid results in dictionary() with batch processing and\r\nnon-trivial size constraints on vocabulary size.\r\nOther\r\nMaintainer’s email updated\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2024-02-07T13:33:20+01:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-07-25-r-client-for-r-universe-apis/",
    "title": "R Client for R-universe APIs",
    "description": "{runi}, an R package to interact with R-universe repository APIs",
    "author": [
      {
        "name": "Valerio Gherardi",
        "url": "https://vgherard.github.io"
      }
    ],
    "date": "2021-07-25",
    "categories": [
      "R"
    ],
    "contents": "\r\nIntroduction\r\nFollowing my previous post on how to use your R-universe API to automatically generate a list of the packages on your R-universe, I started working on a simple R client to interact with such APIs.\r\nFor those who missed it, R-universe is a new project from rOpenSci that allows you to mantain a personal CRAN-like repository, which automatically syncs with the GitHub repositories hosting your projects.\r\nAmong other features, each repository has associated a RESTful API with which users can interact for managing and retrieving informations about packages in the repo. Quoting R-universe:\r\n\r\nThe package server provides REST APIs for managing package submissions and querying information about individual packages as well as on the repository level. These data can be accessed programmatically or displayed in a front-end dashboard.\r\n\r\n{runi}\r\nI started playing around to implement an R client for R-universe APIs. The package is called runi and the code is here. Up to now, only a small subset of the full API features are available. You can peek at the development version from GitHub, using:\r\nremotes::install_github(\"vgherard/runi\")\r\nFor instance, the procedure for obtaining your packages DESCRIPTION outlined in\r\nmy previous post is performed by:\r\n\r\n\r\ndf <- runi::runi_stats_descriptions(\"vgherard\") # 'vgherard' is my R-universe name.\r\n\r\n\r\ndf is a dataframe containing all the entries of the DESCRIPTION files of my packages:\r\n\r\n\r\ndf[, c(\"Package\", \"Title\")]\r\n\r\n# A tibble: 6 × 2\r\n  Package  Title                                            \r\n  <chr>    <chr>                                            \r\n1 scribblr A Notepad Inside RStudio                         \r\n2 kgrams   Classical k-gram Language Models                 \r\n3 fcci     Feldman-Cousins Confidence Intervals             \r\n4 r2r      R-Object to R-Object Hash Maps                   \r\n5 gsample  Efficient Weighted Sampling Without Replacement  \r\n6 sbo      Text Prediction via Stupid Back-Off N-Gram Models\r\n\r\ndf[1, \"Description\"] |> strtrim(60) |> paste(\"[...]\")\r\n\r\n[1] \"A project aware notepad inside RStudio, for taking quick\\nproj [...]\"\r\n\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2024-02-07T13:33:20+01:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-07-21-automatically-resume-your-r-package-portfolio-using-the-r-universe-api/",
    "title": "Automatic resumes of your R-developer portfolio from your R-Universe",
    "description": "Create automatic resumes of your R packages using the R-Universe API.",
    "author": [
      {
        "name": "Valerio Gherardi",
        "url": "https://vgherard.github.io"
      }
    ],
    "date": "2021-07-21",
    "categories": [
      "R"
    ],
    "contents": "\r\nHi R-bloggers 👋\r\nStarting from today, all posts from this blog in the R category will also appear on R-bloggers. I would like to thank Tal for aggregating my blog, and say “hi!” to all R-bloggers readers. I’m a particle physicist with a passion for R, Statistics and Machine Learning. If you want to find out something more about me, you can take a look at my website, and links therein.\r\nIntroduction\r\nR-universe is a cool initiative from rOpenSci, which allows you to create your own CRAN-like repository. The latter is synced with the GitHub repositories (main or specific branches, or releases) associated to your R packages, so that using an R-universe is a very effortless way to organize and share your personal package ecosystem.\r\nIf you want to setup your own R-universe, follow the instructions in this blog post. In this post, I assume that you have created your own R-universe, and show you how to retrieve metadata on your packages using the R-universe API.\r\nRetrieving packages descriptions from your R-universe API\r\nOnce you will have it set up, your R-universe will be available at the URL your-user-name.r-universe.dev. For instance, mine is vgherard.r-universe.dev. From your R-universe home page, you can access the documentation of the API. We will use the command:\r\nGET /stats/descriptions\r\n    NDJSON stream with data from package DESCRIPTION files.\r\nThe JSON stream can be read with jsonlite, as follows:\r\n\r\n\r\ncon <- url(\"https://vgherard.r-universe.dev/stats/descriptions\")\r\npkgs <- jsonlite::stream_in(con)\r\n\r\n\r\n Found 6 records...\r\n Imported 6 records. Simplifying...\r\n\r\nThe result is a dataframe with alll the entries of your packages’ DESCRIPTION file, e.g.:\r\n\r\n\r\npkgs[, c(\"Package\", \"Title\", \"Version\")]\r\n\r\n   Package                                             Title Version\r\n1 scribblr                          A Notepad Inside RStudio   0.2.1\r\n2   kgrams                  Classical k-gram Language Models   0.2.0\r\n3     fcci              Feldman-Cousins Confidence Intervals   1.0.1\r\n4      r2r                    R-Object to R-Object Hash Maps   0.1.1\r\n5  gsample   Efficient Weighted Sampling Without Replacement   0.1.0\r\n6      sbo Text Prediction via Stupid Back-Off N-Gram Models   0.5.0\r\n\r\nI use this query on my personal website to automatically generate a resume of the packages available on my R-universe (this is combined with a GitHub Action scheduled workflow which periodically updates the Code section of my website). More precisely, I define an R string txt containing the Markdown code for my resume, and I inline it in R Markdown using the synthax `r `. This is the code I use on my website:\r\n\r\n\r\ntxt <- \"\"\r\nfor (i in seq_len(nrow(pkgs))) {\r\n  txt <- paste0(\r\n    txt, \r\n    \"### [`\", pkgs[i, \"Package\"], \"`](\", pkgs[i, \"RemoteUrl\"], \")\", \"\\n\",\r\n    \"[![CRAN status](https://www.r-pkg.org/badges/version/\", pkgs[i,\"Package\"],\r\n    \")](https://CRAN.R-project.org/package=\",pkgs[i, \"Package\"], \")\",\r\n    \"\\n\\n\",\r\n    \"*\", pkgs[i, \"Title\"], \".* \", pkgs[i, \"Description\"],\r\n    \"\\n\\n\"\r\n    )\r\n}\r\n\r\n\r\nand this is the output:\r\nscribblr\r\n\r\nA Notepad Inside RStudio. A project aware notepad inside RStudio, for taking quick\r\nproject-related notes without distractions. RStudio addin.\r\nkgrams\r\n\r\nClassical k-gram Language Models. Training and evaluating k-gram language models in R,\r\nsupporting several probability smoothing techniques, perplexity\r\ncomputations, random text generation and more.\r\nfcci\r\n\r\nFeldman-Cousins Confidence Intervals. Provides support for building Feldman-Cousins confidence\r\nintervals [G. J. Feldman and R. D. Cousins (1998)\r\ndoi:10.1103/PhysRevD.57.3873].\r\nr2r\r\n\r\nR-Object to R-Object Hash Maps. Implementation of hash tables (hash sets and hash maps) in\r\nR, featuring arbitrary R objects as keys, arbitrary hash and\r\nkey-comparison functions, and customizable behaviour upon\r\nqueries of missing keys.\r\ngsample\r\n\r\nEfficient Weighted Sampling Without Replacement. Sample without replacement using the Gumbel-Max trick\r\n(c.f. ).\r\nsbo\r\n\r\nText Prediction via Stupid Back-Off N-Gram Models. Utilities for training and evaluating text predictors\r\nbased on Stupid Back-Off N-gram models (Brants et al., 2007,\r\nhttps://www.aclweb.org/anthology/D07-1090/).\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2024-02-07T13:33:20+01:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-07-06-r2r/",
    "title": "{r2r} now on CRAN",
    "description": "Introducing {r2r}, an R implementation of hash tables.",
    "author": [
      {
        "name": "Valerio Gherardi",
        "url": "https://vgherard.github.io"
      }
    ],
    "date": "2021-07-06",
    "categories": [
      "Data Structures",
      "R"
    ],
    "contents": "\r\nIntroduction\r\nMy package {r2r} (v0.1.1) has been accepted by CRAN, and is now available for download from the public repository.\r\nr2r\r\n\r\n\r\n\r\n\r\n\r\nr2r provides a flexible implementation of hash tables in R, allowing for:\r\narbitrary R objects as keys and values,\r\narbitrary key comparison and hash functions,\r\ncustomizable behaviour (throw or return a default value) on missing key exceptions.\r\nInstallation\r\nYou can install the released version of r2r from CRAN with:\r\ninstall.packages(\"r2r\")\r\nand the development version from my R-universe repository, with:\r\ninstall.packages(\"r2r\", repos = \"https://vgherard.r-universe.dev\")\r\nUsage\r\n\r\n\r\nlibrary(r2r)\r\nm <- hashmap()\r\n\r\n# Insert and query a single key-value pair\r\nm[[ \"user\" ]] <- \"vgherard\"\r\nm[[ \"user\" ]]\r\n\r\n[1] \"vgherard\"\r\n\r\n# Insert and query multiple key-value pairs\r\nm[ c(1, 2, 3) ] <- c(\"one\", \"two\", \"three\")\r\nm[ c(1, 3) ]\r\n\r\n[[1]]\r\n[1] \"one\"\r\n\r\n[[2]]\r\n[1] \"three\"\r\n\r\n# Keys and values can be arbitrary R objects\r\nm[[ lm(mpg ~ wt, mtcars) ]] <- c(TRUE, FALSE, TRUE)\r\nm[[ lm(mpg ~ wt, mtcars) ]]\r\n\r\n[1]  TRUE FALSE  TRUE\r\n\r\nGetting help\r\nFor further details, including an introductory vignette illustrating the features of r2r hash maps, you can consult the r2r website. If you encounter a bug, want to suggest a feature or need further help, you can open a GitHub issue.\r\nComparison with hash\r\nCRAN package {hash} also offers an implementation of hash tables based on R environments. The two tables below offer a comparison between {r2r} and {hash} (for more details, see the benchmarks Vignette)\r\n\r\nTable 1: Features supported by {r2r} and {hash}.\r\nFeature\r\nr2r\r\nhash\r\nBasic data structure\r\nR environment\r\nR environment\r\nArbitrary type keys\r\nX\r\n\r\nArbitrary type values\r\nX\r\nX\r\nArbitrary hash function\r\nX\r\n\r\nArbitrary key comparison function\r\nX\r\n\r\nThrow or return default on missing keys\r\nX\r\n\r\nHash table inversion\r\n\r\nX\r\n\r\n\r\nTable 2: Performances of {r2r} and {hash} for basic hash table operations.\r\nTask\r\nComparison\r\nKey insertion\r\n{r2r} ~ {hash}\r\nKey query\r\n{r2r} < {hash}\r\nKey deletion\r\n{r2r} << {hash}\r\n\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2024-02-07T13:33:20+01:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-07-06-test-post/",
    "title": "Test post",
    "description": "A short description of the post.",
    "author": [
      {
        "name": "Valerio Gherardi",
        "url": "https://vgherard.github.io"
      }
    ],
    "date": "2021-07-06",
    "categories": [
      "Other"
    ],
    "contents": "\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2024-02-07T13:33:20+01:00",
    "input_file": {}
  }
]
