<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>vgherard</title>
<link>https://vgherard.github.io/#category=R</link>
<atom:link href="https://vgherard.github.io/index-r.xml" rel="self" type="application/rss+xml"/>
<description>Valerio Gherardi&#39;s Personal Website</description>
<generator>quarto-1.5.57</generator>
<lastBuildDate>Thu, 16 May 2024 22:00:00 GMT</lastBuildDate>
<item>
  <title>AIC in the well-specified linear model: theory and simulation</title>
  <dc:creator>Valerio Gherardi</dc:creator>
  <link>https://vgherard.github.io/posts/2024-05-09-aic-in-the-well-specified-linear-model-theory-and-simulation/aic-in-the-well-specified-linear-model-theory-and-simulation.html</link>
  <description><![CDATA[ 





<section id="theory" class="level2">
<h2 class="anchored" data-anchor-id="theory">Theory</h2>
<section id="aic" class="level3">
<h3 class="anchored" data-anchor-id="aic">AIC</h3>
<p>Consider the AIC for the usual linear model <img src="https://latex.codecogs.com/png.latex?Y%20=%20X%5Cbeta%20+%20%5Cvarepsilon">:</p>
<p><span id="eq-aic"><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BAIC%7D%20=%20%5Cfrac%7B1%7D%7B2%7D%5Cln(2%5Cpi%20e%5Chat%20%5Csigma%5E2)+%5Cfrac%7Bp+1%7D%7BN%7D%0A%5Ctag%7B1%7D"></span></p>
<p>where <img src="https://latex.codecogs.com/png.latex?p"> is the dimension of the covariate vector <img src="https://latex.codecogs.com/png.latex?X"> and <img src="https://latex.codecogs.com/png.latex?%5Chat%20%5Csigma%20%5E2"> is the ML estimate of the <img src="https://latex.codecogs.com/png.latex?Y%5Cvert%20X"> conditional variance. The expectation of Equation&nbsp;1 under model assumptions can be found by using the fact that, for a <img src="https://latex.codecogs.com/png.latex?%5Cchi%5E2"> random variable with <img src="https://latex.codecogs.com/png.latex?%5Cnu"> degrees of freedom<sup>1</sup>:</p>
<p><span id="eq-expec-log-X2"><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbb%20E(%5Cln%5Cchi%20%5E2%20)=%5Cln2+%20%5Cpsi(%5Cfrac%7B%5Cnu%7D%7B2%7D)%0A%5Ctag%7B2%7D"></span></p>
<p>where: <span id="eq-psi-fun"><img src="https://latex.codecogs.com/png.latex?%0A%5Cpsi(x)%5Cequiv%5Cfrac%7B%5Ctext%20d%7D%7B%5Ctext%20d%20x%7D%5Cln%20%5CGamma(x)%20%5Capprox%20%5Cln%20x-%5Cfrac%7B1%7D%7B2x%7D%0A%5Ctag%7B3%7D"></span></p>
<p>and the second equality results from the Stirling approximation <img src="https://latex.codecogs.com/png.latex?%5CGamma(x)%20=%20%5Csqrt%7B2%5Cpi%7Dx%5E%7Bx-%5Cfrac%7B1%7D%7B2%7D%7De%5E%7B-x%7D">. We obtain:</p>
<p><span id="eq-expec-aic"><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbb%20E(%5Ctext%7BAIC%7D)%20=%20%5Cfrac%7B%5Cln%20%5Cleft%5B2%5Cpi%20e%5Cmathbb%20V(Y%5Cvert%20X)%5Cright%5D%20%7D%7B2%7D+%5Cfrac%7B1%7D%7B2%7D%5Cln%5Cleft(%5Cfrac%7BN-p%7D%7B2%7D%5Cright)-%5Cfrac%7B1%7D%7B2%7D%5Cfrac%7B1%7D%7BN-p%7D+%5Cfrac%7Bp+1%7D%7BN%7D,%0A%5Ctag%7B4%7D"></span></p>
<p>where, according to standard assumptions, <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20V(Y%20%5Cvert%20X)"> is assumed to be constant in <img src="https://latex.codecogs.com/png.latex?X">.</p>
<p>Now consider two such models, with different covariate vectors <img src="https://latex.codecogs.com/png.latex?X_1"> and <img src="https://latex.codecogs.com/png.latex?X_2">, of dimension <img src="https://latex.codecogs.com/png.latex?p_1"> and <img src="https://latex.codecogs.com/png.latex?p_2"> respectively, both assumed to be well specified. Denote, as before:</p>
<p><span id="eq-aic-i"><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BAIC%7D_i%20=%5Cfrac%7B1%7D%7B2%7D%5Cln(2%5Cpi%20e%5Chat%20%5Csigma%5E2_i)+%5Cfrac%7Bp_i+1%7D%7BN%7D%0A%5Ctag%7B5%7D"></span></p>
<p>for <img src="https://latex.codecogs.com/png.latex?i%20=%201,%5C,2">. Equation&nbsp;4 gives the unconditional expectation of <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BAIC%7D"> for both models<sup>2</sup>, so that:</p>
<p><span id="eq-delta-expec-aic"><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbb%20E(%5Ctext%7BAIC%7D_1%20-%20%5Ctext%7BAIC%7D_2)%20=%20%5Cfrac%7B1%7D%7B2%7D%5Cln%5Cleft(%5Cfrac%7B%5Cmathbb%20V(Y%5Cvert%20X_1)%7D%7B%5Cmathbb%20V(Y%5Cvert%20X_2)%7D%5Cright)+%5Cfrac%7Bp_1-p_2%7D%7B2N%7D+%5Cmathcal%20O(N%5E%7B-2%7D).%0A%5Ctag%7B6%7D"></span></p>
<p>Assuming, without loss of generality, that <img src="https://latex.codecogs.com/png.latex?p_1%20%5Cleq%20p_2">, we have:</p>
<p><span id="eq-aic-condition"><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbb%20E(%5Ctext%7BAIC%7D_1%20-%20%5Ctext%7BAIC%7D_2)%20%3C%200%20%5Ciff%20N%20%3C%20%5Cfrac%7Bp_2-p_1%7D%7B%5Cln%5Cleft(%5Cfrac%7B%5Cmathbb%20V(Y%5Cvert%20X_1)%7D%7B%5Cmathbb%20V(Y%5Cvert%20X_2)%7D%5Cright)%7D.%0A%5Ctag%7B7%7D"></span></p>
<p>To gain some intuition, suppose that the set of variables contained in <img src="https://latex.codecogs.com/png.latex?X_1"> is a subset of those contained in <img src="https://latex.codecogs.com/png.latex?X_2">, so that the two corresponding models are nested. Equation&nbsp;7 tells us that, for <img src="https://latex.codecogs.com/png.latex?N"> below a certain threshold, AIC will prefer the more “parsimonious” model involving <img src="https://latex.codecogs.com/png.latex?X_1"> only. In particular, if <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20V(Y%5Cvert%20X_1)%5Capprox%20%5Cmathbb%20V(Y%5Cvert%20X_2)">, we can make a first-order approximation in the RHS of Equation&nbsp;7, that yields:</p>
<p><span id="eq-aic-condition-approx"><img src="https://latex.codecogs.com/png.latex?%0AN%20%5Clesssim%20%5Cfrac%7B%5Cmathbb%20V(Y%5Cvert%20X_2)%7D%7B%5Cmathbb%20V(Y%5Cvert%20X_1)-%5Cmathbb%20V(Y%5Cvert%20X_2)%7D(p_2-p_1).%0A%5Ctag%7B8%7D"></span></p>
</section>
<section id="cross-entropy" class="level3">
<h3 class="anchored" data-anchor-id="cross-entropy">Cross-entropy</h3>
<p>In parallel to AIC, we can consider the exact “information criterion” provided by the model in-sample cross-entropy under the true data generating process. For a single linear model, the in-sample cross-entropy is:</p>
<p><span id="eq-in-sample-cross-entropy"><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BCE%7D_%7B%5Ctext%20%7Bin%7D%7D%20=%20%5Cfrac%7B1%7D%7B2%7D%5Cln(2%5Cpi%20e%20%5Chat%20%5Csigma%20%5E2)%20+%5Cfrac%7B1%7D%7B2%7D%5Cfrac%7B%5Csigma%20%5E2-%5Chat%20%5Csigma%20%5E2+%5Cfrac%7B1%7D%7BN%7D(%5Cbeta-%5Chat%7B%5Cbeta%7D)%5E%7BT%7D%5Cmathbf%7BX%7D%5E%7BT%7D%5Cmathbf%7BX%7D(%5Cbeta-%5Chat%7B%5Cbeta%7D)%7D%7B%5Chat%20%5Csigma%20%5E2%7D.%0A%5Ctag%7B9%7D"></span></p>
<p>(“in-sample” refers to the fact that we fix, <em>i.e.</em> condition, on the covariate vector of the training sample, <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%20X">.) The <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%20X"> conditional expectation of <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BCE%7D_%7B%5Ctext%20%7Bin%7D%7D">, again under model assumptions, can be computed by noticing two facts:</p>
<ul>
<li>The numerator and denominator are conditionally independent <img src="https://latex.codecogs.com/png.latex?%5Cchi%5E2"> variables with <img src="https://latex.codecogs.com/png.latex?p"> and <img src="https://latex.codecogs.com/png.latex?N-p"> degrees of freedom respectively. This can be seen by rewriting these as <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%20%5Cepsilon%20%5ET%20%5Cmathbf%20H%20%5Cboldsymbol%20%5Cepsilon">, and <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%20%5Cepsilon%20%5ET%20(1-%5Cmathbf%20H)%20%5Cboldsymbol%20%5Cepsilon">, respectively, where <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%20H%20=%20%5Cmathbf%20X%20(%5Cmathbf%20X%20%5ET%20%5Cmathbf%20X)%5E%7B-1%7D%20%5Cmathbf%20X%20%5ET"> as usual.</li>
<li>For a <img src="https://latex.codecogs.com/png.latex?%5Cchi%20%5E2"> random variable with <img src="https://latex.codecogs.com/png.latex?%5Cnu"> degrees of freedom we have <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20E(%5Cfrac%7B1%7D%7B%5Cchi%20%5E2%7D)=%5Cfrac%7B1%7D%7B%5Cnu%20-%202%7D">.</li>
</ul>
<p>Using these results, we can show that:</p>
<p><span id="eq-aic-vs-ce"><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbb%20E(%5Ctext%7BCE%7D_%7B%5Ctext%20%7Bin%7D%7D%5Cvert%20%5Cmathbf%20X)=%5Cmathbb%20E(%5Ctext%7BAIC%7D%5Cvert%20%5Cmathbf%20X)+%5Cmathcal%20O(N%5E%7B-2%7D)%0A%5Ctag%7B10%7D"></span></p>
<p>(an equation which is true by design of AIC).</p>
<p>Before rushing to the (wrong) conclusion that <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BAIC%7D_1%20-%20%5Ctext%7BAIC%7D_2"> will correspondingly estimate a difference of expected cross-entropies, let us notice that the relevant in-sample cross-entropy to be considered for model evaluation is Equation&nbsp;9 with <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%20X"> <em>corresponding to the full covariate vector</em>: this is the target we should try to estimate (at least to the extent that our goal is predicting <img src="https://latex.codecogs.com/png.latex?Y"> given <img src="https://latex.codecogs.com/png.latex?X">). For this reason, strictly speaking, Equation&nbsp;10 is exact only if our model is well specified as a model of <img src="https://latex.codecogs.com/png.latex?Y%20%5Cvert%20X">. Otherwise, in order to estimate consistently <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20E(%5Ctext%7BCE%7D_%7B%5Ctext%20%7Bin%7D%7D%5Cvert%20%5Cmathbf%20X)">, we should use Takeuchi’s Information Criterion (TIC) rather than AIC.</p>
<p>A bit more pragmatically, in the real world we could assume the remainder of Equation&nbsp;10 to be <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20O%20(N%5E%7B-1%7D)"> (rather than <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20O%20(N%5E%7B-2%7D)">), but generally small with respect the leading order AIC correction (<img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Bp+1%7D%7BN%7D">). This will be the case if the models being compared are approximately well specified.</p>
</section>
</section>
<section id="simulation" class="level2">
<h2 class="anchored" data-anchor-id="simulation">Simulation</h2>
<section id="setup" class="level3">
<h3 class="anchored" data-anchor-id="setup">Setup</h3>
<p>We take the data generating process to be:</p>
<p><span id="eq-dgp-sim"><img src="https://latex.codecogs.com/png.latex?%0AY%20=%20m%20X%20+%20q%20+%20%5Cvarepsilon,%0A%5Ctag%7B11%7D"></span></p>
<p>with:</p>
<p><span id="eq-dgp-sim-2"><img src="https://latex.codecogs.com/png.latex?%0AX%20%5Csim%20%5Cmathcal%20N%20(0,%5C,1),%5Cquad%20%5Cvarepsilon%20%5Csim%20%5Cmathcal%20N(0,%5C,1),%5Cquad%20%5Cvarepsilon%20%5Cperp%20X.%0A%5Ctag%7B12%7D"></span></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">m <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb1-2">q <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-3"></span>
<span id="cb1-4">rxy <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(n) {</span>
<span id="cb1-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb1-6">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb1-7">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> m <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> q <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-8">        )</span>
<span id="cb1-9">}</span></code></pre></div>
</div>
<p>We compare the model with <em>vs.</em> without slope term (<img src="https://latex.codecogs.com/png.latex?m%20=%200"> <em>vs.</em> <img src="https://latex.codecogs.com/png.latex?m%20%5Cneq%200">), which we will denote by suffixes <img src="https://latex.codecogs.com/png.latex?1"> and <img src="https://latex.codecogs.com/png.latex?1%5Coplus%20X">, respectively. The functions below compute AIC and in-sample cross-entropy from the corresponding <code>lm</code> objects. We also define a “Naive Information Criterion” <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BNIC%7D%20%5Cequiv%20%5Clog(%5Chat%20%5Csigma)">.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">nic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(fit) {</span>
<span id="cb2-2">    p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coef</span>(fit))</span>
<span id="cb2-3">    n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nobs</span>(fit)</span>
<span id="cb2-4">    sigma_hat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sigma</span>(fit) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>((n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n)</span>
<span id="cb2-5">    </span>
<span id="cb2-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(sigma_hat)</span>
<span id="cb2-7">}</span>
<span id="cb2-8"></span>
<span id="cb2-9">aic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(fit) {</span>
<span id="cb2-10">    p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coef</span>(fit))</span>
<span id="cb2-11">    n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nobs</span>(fit)</span>
<span id="cb2-12">    sigma_hat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sigma</span>(fit) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>((n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n)</span>
<span id="cb2-13">    </span>
<span id="cb2-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(sigma_hat) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>pi))</span>
<span id="cb2-15">}</span>
<span id="cb2-16"></span>
<span id="cb2-17">ce <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(fit, data) {</span>
<span id="cb2-18">    p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coef</span>(fit))</span>
<span id="cb2-19">    n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nobs</span>(fit)</span>
<span id="cb2-20">    sigma_hat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sigma</span>(fit) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>((n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n)</span>
<span id="cb2-21">    y_hat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fitted</span>(fit)</span>
<span id="cb2-22">    mu <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> m <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> q</span>
<span id="cb2-23">    </span>
<span id="cb2-24">    res <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-25">    res <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> res <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (sigma_hat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb2-26">    res <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> res <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(sigma_hat)</span>
<span id="cb2-27">    res <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> res <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (y_hat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mu)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (sigma_hat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb2-28">    res <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> res <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pi)</span>
<span id="cb2-29"></span>
<span id="cb2-30">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(res)</span>
<span id="cb2-31">}</span></code></pre></div>
</div>
<p>From our results above, we expect:</p>
<p><span id="eq-delta-expec-aic-sim"><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbb%20E(%5Ctext%7BAIC%7D_%7B1%5Coplus%20X%7D-%5Ctext%7BAIC%7D_%7B1%7D%20)%3C0%20%5Ciff%20N%20%5Cgeq%20%5Cfrac%7B1%7D%7B%5Cln(1+m%5E2)%7D%5Cleft(1+%5Cmathcal%20O(m%5E2%20)%5Cright)%0A%5Ctag%7B13%7D"></span></p>
<p>The expected in-sample cross-entropies cannot be computed explicitly, but for relatively small <img src="https://latex.codecogs.com/png.latex?m%5E2"> we expect (<em>cf.</em> Equation&nbsp;10):</p>
<p><span id="eq-aic-vs-ce-sim"><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbb%20E((%5Ctext%7BCE%7D_%7B%5Ctext%20%7Bin%7D%7D)_i)=%5Cmathbb%20E(%5Ctext%7BAIC%7D_i)+%5Cmathcal%20O(N%5E%7B-2%7D,%5C,m%5E2N%5E%7B-1%7D),%0A%5Ctag%7B14%7D"></span></p>
<p>I will use tidyverse for plotting results.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span></code></pre></div>
</div>
<p>In order to make results reproducible let’s:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">840</span>)</span></code></pre></div>
</div>
</section>
<section id="results" class="level3">
<h3 class="anchored" data-anchor-id="results">Results</h3>
<p>We simulate fitting models <img src="https://latex.codecogs.com/png.latex?1"> and <img src="https://latex.codecogs.com/png.latex?1%5Coplus%20X"> at different sample sizes from the data generating process described above.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">fits <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tidyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expand_grid</span>(</span>
<span id="cb5-2">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">b =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e3</span></span>
<span id="cb5-3">        ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(n, rxy)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(n, b, data) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-6">    tidyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expand</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">model =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ungroup</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb5-9">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fit =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_number</span>(), \(i) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(model[[i]], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> data[[i]])),</span>
<span id="cb5-10">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ce =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_number</span>(), \(i) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ce</span>(fit[[i]], data[[i]])),</span>
<span id="cb5-11">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">aic =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(fit, aic),</span>
<span id="cb5-12">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nic =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(fit, nic),</span>
<span id="cb5-13">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">model =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(model)</span>
<span id="cb5-14">        ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-15">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(fit, data))</span></code></pre></div>
</div>
<p>The plots below show the dependence from sample size of <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20E(%5CDelta%5Ctext%7BAIC%7D)"> and <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20E(%5CDelta%5Ctext%7BCE%7D_%5Ctext%7Bin%7D)">, as well as AIC selection frequencies. Notice that for <img src="https://latex.codecogs.com/png.latex?N%20=%20%5Cfrac%7B1%7D%7Bm%5E2%7D">, even though <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20E(%5CDelta%5Ctext%7BAIC%7D)%20=%200">, the selection frequency of the “complex” model <img src="https://latex.codecogs.com/png.latex?1%5Coplus%20X"> is still below <img src="https://latex.codecogs.com/png.latex?%5Ctext%7B50%20%25%7D">. This is because the distribution of <img src="https://latex.codecogs.com/png.latex?%5CDelta%5Ctext%7BAIC%7D"> is asymmetric, as seen in the second plot, and <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20E(%5CDelta%5Ctext%7BAIC%7D)%20%3C%20%5Ctext%20%7Bmedian%7D(%5CDelta%5Ctext%7BAIC%7D)">.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">fits <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb6-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb6-3">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">is_baseline =</span> model <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y ~ 1"</span>,</span>
<span id="cb6-4">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delta_ce =</span> ce <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ce[is_baseline], </span>
<span id="cb6-5">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delta_aic =</span> aic <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> aic[is_baseline],</span>
<span id="cb6-6">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delta_nic =</span> nic <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> nic[is_baseline],</span>
<span id="cb6-7">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(n, b),</span>
<span id="cb6-8">        ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb6-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>is_baseline) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb6-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(</span>
<span id="cb6-11">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">E( ΔCE )</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(delta_ce), </span>
<span id="cb6-12">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">E( ΔAIC )</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(delta_aic),</span>
<span id="cb6-13">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">E( ΔNIC )</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(delta_nic),</span>
<span id="cb6-14">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> n</span>
<span id="cb6-15">        ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb6-16">    tidyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(</span>
<span id="cb6-17">        <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"metric"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span></span>
<span id="cb6-18">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb6-19">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> value, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> metric)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-20">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-21">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-22">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_hline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yintercept =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dashed"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-23">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_vline</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xintercept =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> m<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dotted"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-24">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_log10</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sample Size"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-25">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_cartesian</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.025</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.025</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ylab</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expression</span>(IC)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-26">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-27">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggtitle</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AIC vs. in-sample cross-entropy"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Expected values"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-28">        <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vgherard.github.io/posts/2024-05-09-aic-in-the-well-specified-linear-model-theory-and-simulation/aic-in-the-well-specified-linear-model-theory-and-simulation_files/figure-html/aic_exp-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">fits <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb7-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(aic <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(aic), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(n, b)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb7-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">count =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(n, model)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb7-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> model, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> count)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb7-5">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_col</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb7-6">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_log10</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sample Size"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-7">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ylab</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Count"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-8">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-9">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggtitle</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AIC model selection frequencies"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vgherard.github.io/posts/2024-05-09-aic-in-the-well-specified-linear-model-theory-and-simulation/aic-in-the-well-specified-linear-model-theory-and-simulation_files/figure-html/aic_freq-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">fits <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb8-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb8-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delta_aic =</span> aic <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> aic[model <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y ~ 1"</span>], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(n, b)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb8-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(model <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y ~ 1"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb8-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expec =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> m<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb8-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> delta_aic, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.factor</span>(n))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-7">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_density</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-8">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_cartesian</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-9">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ΔAIC"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Density"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sample Size"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-10">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggtitle</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ΔAIC probability density"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vgherard.github.io/posts/2024-05-09-aic-in-the-well-specified-linear-model-theory-and-simulation/aic-in-the-well-specified-linear-model-theory-and-simulation_files/figure-html/aic_density-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Finally, here is something I have no idea where it comes from. The plot below shows the scatterplot of in-sample cross-entropy differences <em>vs.</em> the AIC differences. It is well known that AIC only estimates the expectation of these differences, averaged over potential training samples. One may ask whether AIC has anything to say about the actual cross-entropy difference for the estimated models, conditional on the realized training sample.</p>
<p>Assuming I have made no errors here, the tilted-U shape of this scatterplot is a clear negative answer. What’s especially interesting is that, apparently, these differences have a negative correlation. I fail to see where do the negative correlation and the U-shape come from.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">fits <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb9-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb9-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb9-4">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">is_baseline =</span> model <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y ~ 1"</span>,</span>
<span id="cb9-5">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delta_ce =</span> ce <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ce[is_baseline], </span>
<span id="cb9-6">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delta_aic =</span> aic <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> aic[is_baseline],</span>
<span id="cb9-7">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(n, b),</span>
<span id="cb9-8">        ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb9-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>is_baseline) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb9-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> delta_aic, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> delta_ce)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-11">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-12">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lims</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.02</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-13">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ΔAIC"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ΔCE"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-14">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggtitle</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AIC vs. in-sample cross-entropy"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Point values for N = 100"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-15">        <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vgherard.github.io/posts/2024-05-09-aic-in-the-well-specified-linear-model-theory-and-simulation/aic-in-the-well-specified-linear-model-theory-and-simulation_files/figure-html/aic_vs_ce_2-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>


</section>
</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>See <em>e.g.</em> <a href="https://arxiv.org/pdf/1503.06266">1503.06266</a>↩︎</p></li>
<li id="fn2"><p>The same equation actually gives the expectation of <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BAIC%7D"> conditional to the in-sample covariate vector <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20X">. Since this conditioning differs for the two different models involving <img src="https://latex.codecogs.com/png.latex?X_1"> and <img src="https://latex.codecogs.com/png.latex?X_2">, in our comparison of expected values we must interpret this as unconditional expectations, in general.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{gherardi2024,
  author = {Gherardi, Valerio},
  title = {AIC in the Well-Specified Linear Model: Theory and
    Simulation},
  date = {2024-05-17},
  url = {https://vgherard.github.io/posts/2024-05-09-aic-in-the-well-specified-linear-model-theory-and-simulation/aic-in-the-well-specified-linear-model-theory-and-simulation.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-gherardi2024" class="csl-entry quarto-appendix-citeas">
Gherardi, Valerio. 2024. <span>“AIC in the Well-Specified Linear Model:
Theory and Simulation.”</span> May 17, 2024. <a href="https://vgherard.github.io/posts/2024-05-09-aic-in-the-well-specified-linear-model-theory-and-simulation/aic-in-the-well-specified-linear-model-theory-and-simulation.html">https://vgherard.github.io/posts/2024-05-09-aic-in-the-well-specified-linear-model-theory-and-simulation/aic-in-the-well-specified-linear-model-theory-and-simulation.html</a>.
</div></div></section></div> ]]></description>
  <category>Model Selection</category>
  <category>Linear Models</category>
  <category>Regression</category>
  <category>Statistics</category>
  <category>R</category>
  <guid>https://vgherard.github.io/posts/2024-05-09-aic-in-the-well-specified-linear-model-theory-and-simulation/aic-in-the-well-specified-linear-model-theory-and-simulation.html</guid>
  <pubDate>Thu, 16 May 2024 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Grammar as a biometric for Authorship Verification</title>
  <dc:creator>Valerio Gherardi</dc:creator>
  <link>https://vgherard.github.io/posts/2024-04-25-grammar-as-a-biometric-for-authorship-verification/grammar-as-a-biometric-for-authorship-verification.html</link>
  <description><![CDATA[ 





<p>About a month ago we finally managed to drop <span class="citation" data-cites="nini2024authorship">(Nini et al. 2024)</span>, <em>“Authorship Verification based on the Likelihood Ratio of Grammar Models”</em>, on the arXiv. Delving into topics such as authorship verification, grammar and forensics, was quite a detour for me, and I’d like to summarize here some of the ideas and learnings I got from working with all this new and interesting material.</p>
<p>The main qualitative idea put forward by Ref. <span class="citation" data-cites="nini2024authorship">(Nini et al. 2024)</span> is that <em>grammar is a fundamentally personal and unique trait of an individual</em>, therefore providing a sort of “behavioural biometric”. One first goal of this work was to put this general principle under test, by applying it to the problem of Authorship Verification (AV): the process of validating whether a certain document was written by a claimed author. Concretely, we built an algorithm for AV that relies entirely on the grammatical features of the examined textual data, and compared it with the state-of-the-art methods for AV.</p>
<p>The results were very encouraging. In fact, our method actually turned out to be generally superior to the previous state-of-the-art on the benchmarks we examined. This is a notable result, keeping also into account that our method uses <em>less</em> textual information (only the grammar part) than other methods to perform its inferences.</p>
<section id="the-algorithm" class="level2">
<h2 class="anchored" data-anchor-id="the-algorithm">The algorithm</h2>
<p>I sketch here a pseudo-implementation of our method in R. For the fit of <img src="https://latex.codecogs.com/png.latex?k">-gram models and perplexity computations, I use my package <a href="https://vgherard.github.io/kgrams/"><code>{kgrams}</code></a>, which can be installed from CRAN. Model (hyper)parameters such as number of impostors, order of the <img src="https://latex.codecogs.com/png.latex?k">-gram models, etc. are hardcoded, see <span class="citation" data-cites="nini2024authorship">(Nini et al. 2024)</span> for details.</p>
<p>This is just for illustrating the essence of the method. For practical reasons, in the code chunk below I’m not reproducing the definition of the function <code>extract_grammar()</code>, which in our work is embodied by the POS-noise algorithm. This function should transform a regular sentence, such as “He wrote a sentence”, to its underlying grammatical structure, say “[Pronoun] [verb] a [noun]”.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param q_doc character. Text document whose authorship is questioned.</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param auth_corpus character. Text corpus of claimed author.</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param imp_corpus character. Text corpus of impostors.</span></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param n_imp a positive number. Number of "impostor" simulations.</span></span>
<span id="cb1-5"></span>
<span id="cb1-6">score <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(q_doc, auth_corpus, imp_corpus, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_imp =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) </span>
<span id="cb1-7">{</span>
<span id="cb1-8">    q_doc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">extract_grammar</span>(q_doc)</span>
<span id="cb1-9">    auth_corpus <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">extract_grammar</span>(auth_corpus)</span>
<span id="cb1-10">    imp_corpus <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">extract_grammar</span>(imp_corpus)</span>
<span id="cb1-11"></span>
<span id="cb1-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute perplexity based on claimed author's language model.</span></span>
<span id="cb1-13">    auth_mod <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">train_language_model</span>(auth_corpus)</span>
<span id="cb1-14">  auth_perp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> kgrams<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">perplexity</span>(q_doc, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">model =</span> auth_mod)</span>
<span id="cb1-15">  </span>
<span id="cb1-16">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute perplexity based on impostor language models.</span></span>
<span id="cb1-17">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb1-18">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Each impostor is trained on a synthetic corpus obtained by sampling from</span></span>
<span id="cb1-19">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the impostor corpus the same number of sentences as the corpus of the </span></span>
<span id="cb1-20">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># claimed author.</span></span>
<span id="cb1-21">  n_sents_auth <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(kgrams<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tknz_sent</span>(auth_corpus))</span>
<span id="cb1-22">  imp_corpus_sentences <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> kgrams<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tknz_sent</span>(imp_corpus)</span>
<span id="cb1-23">  imp_mod <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replicate</span>(n_imp, {</span>
<span id="cb1-24">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(imp_corpus_sentences, n_sents_auth) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">train_language_model</span>()</span>
<span id="cb1-25">  })</span>
<span id="cb1-26">  imp_perp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(imp_mod, \(m) kgrams<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">perplexity</span>(q_doc, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">model =</span> m))</span>
<span id="cb1-27">  </span>
<span id="cb1-28">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Score is the fraction of impostor models that perform worse (higher </span></span>
<span id="cb1-29">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># perplexity) than the proposed authors language model</span></span>
<span id="cb1-30">  score <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(auth_perp <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> imp_perp)</span>
<span id="cb1-31">  </span>
<span id="cb1-32">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(score)</span>
<span id="cb1-33">}</span>
<span id="cb1-34"></span>
<span id="cb1-35">train_language_model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(text)</span>
<span id="cb1-36">{</span>
<span id="cb1-37">  text <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb1-38">    kgrams<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kgram_freqs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">N =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.tknz_sent =</span> kgrams<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>tknz_sent) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-39">    kgrams<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">language_model</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">smoother =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"kn"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">D =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>)</span>
<span id="cb1-40">}</span>
<span id="cb1-41"></span>
<span id="cb1-42">extract_grammar <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> identity  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Just a placeholder - see above.</span></span></code></pre></div>
</div>
<p>To be used as follows:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">q_doc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a a b a. b a. c b a. b a b. a."</span> </span>
<span id="cb2-2">auth_corpus <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a a b a b. b c b. a b c a. b a. b c a."</span> </span>
<span id="cb2-3">imp_corpus <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a a. b. a. b a. b a. c. a b a. d. a b. a d. a b a b c b a."</span></span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">840</span>)</span>
<span id="cb2-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">score</span>(q_doc, auth_corpus, imp_corpus)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.89</code></pre>
</div>
</div>
<p>The “score” computed by this algorithm turns out to be a good truthfulness predictor for the claimed authorship, higher scores being correlated with true attributions. <em>If</em> the impostor corpus is fixed once and for all, and <em>if</em> the pairs <code>q_doc</code> and <code>auth_corpus</code> are randomly sampled from a fixed joint distribution, we can set a threshold for score in such a way that the attribution criterion <code>score &gt; threshold</code> maximizes some objective such as accuracy. This is, more or less, what we studied quantitatively in our paper.</p>
</section>
<section id="reflections-on-in-silico-authorship-verification" class="level2">
<h2 class="anchored" data-anchor-id="reflections-on-in-silico-authorship-verification">Reflections on <em>in silico</em> Authorship Verification</h2>
<p>The various <em>ifs</em> at the end of the previous sections led me to reflexionate on the applicability of machine-learning approaches, such as the one we discussed in our work, to real-life contexts.</p>
<p>As implied above, in order for a metric such as accuracy to represent a sensible measure of predictive performance, we should be able to regard the AV problems encountered in our favorite practical use case as random samples from some <em>fixed</em> population. In other words, we consider a stationary source of random authorship claims, and assume that our trained model is routinely used to verify claims from this source.</p>
<p>Now, while there are many circumstances in which the above assumptions make total sense, I think there are also interesting AV applications in which one is not interested in the long-run properties of the method but, rather, in a single inference. The real case of the poem “Shall I die?”, controversially attributed to Shakespeare in 1985, is an example of this kind. An approach to this case based on empirical Bayes is discussed in <span class="citation" data-cites="efron2021computer">(Efron and Hastie 2021, vol. 6, sec. 6.2)</span>. Although we may be able to build a reasonable impostor corpus to be used with this problem, it is not clear how one should come up with a relevant testing dataset of AV problems to empirically quantify uncertainty.</p>
<p>For cases such as the “Shall I die?” controversy, the machine-learning setting considered in our study is just an <em>in silico</em> model of real AV. As such, I believe it still provides useful indications on what could be good authorship indicators and work in general, but we must acknowledge the practical limitations in our way to quantify uncertainty. Other approaches, such as classical null hypothesis testing, may be more suited to this specific kind of AV problems.</p>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-efron2021computer" class="csl-entry">
Efron, Bradley, and Trevor Hastie. 2021. <em>Computer Age Statistical Inference, Student Edition: Algorithms, Evidence, and Data Science</em>. Vol. 6. Cambridge University Press.
</div>
<div id="ref-nini2024authorship" class="csl-entry">
Nini, Andrea, Oren Halvani, Lukas Graner, Valerio Gherardi, and Shunichi Ishihara. 2024. <span>“Authorship Verification Based on the Likelihood Ratio of Grammar Models.”</span> <a href="https://arxiv.org/abs/2403.08462">https://arxiv.org/abs/2403.08462</a>.
</div>
</div></section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{gherardi2024,
  author = {Gherardi, Valerio},
  title = {Grammar as a Biometric for {Authorship} {Verification}},
  date = {2024-04-25},
  url = {https://vgherard.github.io/posts/2024-04-25-grammar-as-a-biometric-for-authorship-verification/grammar-as-a-biometric-for-authorship-verification.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-gherardi2024" class="csl-entry quarto-appendix-citeas">
Gherardi, Valerio. 2024. <span>“Grammar as a Biometric for Authorship
Verification.”</span> April 25, 2024. <a href="https://vgherard.github.io/posts/2024-04-25-grammar-as-a-biometric-for-authorship-verification/grammar-as-a-biometric-for-authorship-verification.html">https://vgherard.github.io/posts/2024-04-25-grammar-as-a-biometric-for-authorship-verification/grammar-as-a-biometric-for-authorship-verification.html</a>.
</div></div></section></div> ]]></description>
  <category>Authorship Verification</category>
  <category>Natural Language Processing</category>
  <category>Forensic Science</category>
  <category>Machine Learning</category>
  <category>Statistics</category>
  <category>R</category>
  <guid>https://vgherard.github.io/posts/2024-04-25-grammar-as-a-biometric-for-authorship-verification/grammar-as-a-biometric-for-authorship-verification.html</guid>
  <pubDate>Wed, 24 Apr 2024 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Interpreting the Likelihood Ratio cost</title>
  <dc:creator>Valerio Gherardi</dc:creator>
  <link>https://vgherard.github.io/posts/2023-11-15-interpreting-the-likelihood-ratio-cost/interpreting-the-likelihood-ratio-cost.html</link>
  <description><![CDATA[ 





<section id="intro" class="level2">
<h2 class="anchored" data-anchor-id="intro">Intro</h2>
<p>During the last few months, I’ve been working on a machine learning algorithm with applications in <a href="https://en.wikipedia.org/wiki/Forensic_science">Forensic Science</a>, a.k.a. Criminalistics. In this field, one common task for the data analyst is to present the <em>trier-of-fact</em> (the person or people who determine the facts in a legal proceeding) with a numerical assessment of the strength of the evidence provided by available data towards different hypotheses. In more familiar terms, the forensic expert is responsible of computing the likelihoods (or likelihood ratios) of data under competing hypotheses, which are then used by the trier-of-fact to produce Bayesian posterior probabilities for the hypotheses in question<sup>1</sup>.</p>
<p>In relation to this, forensic scientists have developed a bunch of techniques to evaluate the performance of a likelihood ratio model in discriminating between two alternative hypothesis. In particular, I have come across the so called <em>Likelihood Ratio Cost</em>, usually defined as:</p>
<p><span id="eq-cllr"><img src="https://latex.codecogs.com/png.latex?%0AC_%7B%5Ctext%7BLLR%7D%7D%20=%20%5Cfrac%7B1%7D%7B2N_1%7D%20%5Csum%20_%7BY_i=1%7D%20%5Clog(1+r(X_i)%20%5E%7B-1%7D)+%5Cfrac%7B1%7D%7B2N_0%7D%20%5Csum%20_%7BY_i=0%7D%20%5Clog(1+r(X_i)),%0A%5Ctag%7B1%7D"></span> where we assume we have data consisting of <img src="https://latex.codecogs.com/png.latex?N_1+N_0"> independent identically distributed observations <img src="https://latex.codecogs.com/png.latex?(X_i,%5C,Y_i)">, with binary <img src="https://latex.codecogs.com/png.latex?Y">; <img src="https://latex.codecogs.com/png.latex?N_1"> and <img src="https://latex.codecogs.com/png.latex?N_0"> stand for the number of positive (<img src="https://latex.codecogs.com/png.latex?Y=1">) and negative (<img src="https://latex.codecogs.com/png.latex?Y=0">) cases; and <img src="https://latex.codecogs.com/png.latex?r(X)"> is a model for the likelihood ratio <img src="https://latex.codecogs.com/png.latex?%5CLambda(X)%20%5Cequiv%20%5Cfrac%7B%5Ctext%7BPr%7D(X%5Cvert%20Y%20=%201)%7D%7B%5Ctext%7BPr%7D(X%5Cvert%20Y%20=%200)%7D">.</p>
<p>The main reason for writing this note was to understand a bit better what it means to optimize Equation&nbsp;1, which does not look immediately obvious to me from its definition<sup>2</sup>. In particular: is the population minimizer of Equation&nbsp;1 the actual likelihood ratio? And in what sense is a model with lower <img src="https://latex.codecogs.com/png.latex?C_%5Ctext%7BLLR%7D"> better than one with a correspondingly higher value?</p>
<p>The short answers to these questions are: yes; and: <img src="https://latex.codecogs.com/png.latex?C_%5Ctext%7BLLR%7D"> optimization seeks for the model with the best predictive performance in a Bayesian inference setting with uninformative prior on <img src="https://latex.codecogs.com/png.latex?Y">, assuming that this prior actually reflects reality (<em>i.e.</em> <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BPr%7D(Y=1)%20=%20%5Ctext%7BPr%7D(Y=0)%20=%20%5Cfrac%7B1%7D%7B2%7D">). The mathematical details are given in the rest of the post.</p>
<!-- Strictly speaking, there are several aspects to what I have simply referred to as the "performance of a likelihood ratio model". First of all, there is the -->
<!-- left-over uncertainty on $Y$ after measuring $X$, which is an intrinsic property of the data and is independent of modeling. Second, $X$ may not correspond to raw data, but rather be the result of some data-processing/summary, which will in general reduce the amount of available information on $Y$. Finally, in the general case, the likelihood ratio $r(X)$ will not be an exact model, but only an approximation estimated from data. All this aspects get captured and mixed by @ref(eq:CLLR), luckily in a way that can be actually decomposed (see below). -->
</section>
<section id="cross-entropy-with-random-weights" class="level2">
<h2 class="anchored" data-anchor-id="cross-entropy-with-random-weights">Cross-entropy with random weights</h2>
<p>We start with a mathematical digression, which will turn out useful for further developments. Let <img src="https://latex.codecogs.com/png.latex?%5C%7B(X_i,%5C,Y_i)%5C%7D_%7Bi=1,%5C,2,%5C,%5Cdots,N%7D"> be independent draws from a joint distribution, with binary <img src="https://latex.codecogs.com/png.latex?Y_i%20%5Cin%20%5C%7B0,%5C,1%5C%7D">. Given a function <img src="https://latex.codecogs.com/png.latex?w=w(%5Cboldsymbol%20Y)"> that is symmetric in its arguments<sup>3</sup>, we define the random functional:</p>
<p><span id="eq-weighted-loss"><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathcal%20L_N%5Ew%5Bf%5D%20=%20-%5Cfrac%7B1%7D%7BN%7D%5Csum_%7Bi=1%7D%20%5EN%20%5Cleft%5Bw(%5Cboldsymbol%20Y)Y_i%20%5Clog(f(X_i))+%20w(%7B%5Cboldsymbol%20Y%7D%5Ec)(%20Y_i%5Ec)%20%5Clog(f(X_i)%5Ec)%5Cright%5D,%0A%5Ctag%7B2%7D"></span></p>
<p>where <img src="https://latex.codecogs.com/png.latex?f=f(X)"> is any function satisfying <img src="https://latex.codecogs.com/png.latex?f(X)%5Cin%20%5B0,%5C,1%5D"> for all <img src="https://latex.codecogs.com/png.latex?X">, and we let <img src="https://latex.codecogs.com/png.latex?q%5Ec%20=%201-q"> for any number <img src="https://latex.codecogs.com/png.latex?q%20%5Cin%20%5B0,%5C,1%5D">. Notice that for <img src="https://latex.codecogs.com/png.latex?w(%5Cboldsymbol%7BY%7D)%20%5Cequiv%201">, this is just the usual cross-entropy loss.</p>
<p>We now look for the population minimizer of Equation&nbsp;2, <em>i.e.</em> the function <img src="https://latex.codecogs.com/png.latex?f_*"> that minimizes the functional <img src="https://latex.codecogs.com/png.latex?f%20%5Cmapsto%20%5Cmathbb%20E(%5Cmathcal%20L%20_N%20%5Ew%20%5Bf%5D)"><sup>4</sup>. Writing the expectation as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbb%20E(%5Cmathcal%20L%20_N%20%5Ew%20%5Bf%5D)%20=%20-%5Cfrac%7B1%7D%7BN%7D%5Csum%20_%7Bi=1%7D%20%5EN%20%5Cmathbb%20E%5Cleft%5B%20%5Cmathbb%20E(Y_i%5Ccdot%20w(%5Cboldsymbol%20Y)%5Cvert%20X_i)%5Ccdot%20%5Clog(f(X_i))+E(Y_i%5Ec%5Ccdot%20w(%5Cboldsymbol%20Y%20%5Ec)%5Cvert%20X_i)%5Ccdot%20%5Clog(f%5Ec(X_i))%5Cright%5D,%0A"> we can easily see that <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20E(%5Cmathcal%20L%20_N%20%5Ew%20%5Bf%5D)"> is a convex functional with a unique minimum given by:</p>
<p><span id="eq-pop-minimizer"><img src="https://latex.codecogs.com/png.latex?%0Af_*(X_i)%20=%20%5Cfrac%7B1%7D%7B1+r(X_i)%5E%7B-1%7D%7D,%5Cquad%20r_*(X_i)%20=%20%5Cdfrac%7BE(Y_i%5Ccdot%20w(%5Cboldsymbol%20Y)%5Cvert%20X_i)%7D%7BE(Y_i%5Ec%5Ccdot%20w(%5Cboldsymbol%20Y%5Ec)%5Cvert%20X_i)%7D.%0A%5Ctag%7B3%7D"></span></p>
<p>The corresponding expected loss is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbb%20E(%5Cmathcal%20L%20_N%20%5Ew%20%5Bf_*%5D)%20=%20%5Cmathbb%20E%5Cleft%5B%20%5Cmathbb%20E(Y_i%5Ccdot%20w(%5Cboldsymbol%20Y)%20+%20Y_i%5Ec%5Ccdot%20w(%5Cboldsymbol%20Y%5Ec)%5Cvert%20X_i)%5Ccdot%20%5Cmathcal%20H(f_*(X_i))%5Cright%5D,%0A"> where <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20H(p)%20=%20-p%20%5Clog%20(p)%20-(1-p)%20%5Clog(1-p)"> is the entropy of a binary random variable <img src="https://latex.codecogs.com/png.latex?Z"> with probability <img src="https://latex.codecogs.com/png.latex?p%20=%20%5Ctext%7BPr%7D(Z=1)"> (the index <img src="https://latex.codecogs.com/png.latex?i"> in the previous expression can be any index, since data points are assumed to be identically distributed).</p>
<p>Before looking at values of <img src="https://latex.codecogs.com/png.latex?f"> other than <img src="https://latex.codecogs.com/png.latex?f_*">, we observe that the previous expectation can be succintly expressed as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbb%20E(%5Cmathcal%20L%20_N%20%5Ew%20%5Bf_*%5D)%20=%20k%20%5Ccdot%20H%5E%5Cprime(Y%5Cvert%20X),%0A"></p>
<p>where</p>
<p><span id="eq-def-kappa"><img src="https://latex.codecogs.com/png.latex?%0Ak%20=%20%5Cmathbb%20E(Y_i%5Ccdot%20w(%5Cboldsymbol%20Y)%20+%20Y_i%5Ec%5Ccdot%20w(%5Cboldsymbol%20Y%5Ec))%0A%5Ctag%7B4%7D"></span></p>
<p>and <img src="https://latex.codecogs.com/png.latex?H'(Y%5Cvert%20X)"> is the conditional entropy of <img src="https://latex.codecogs.com/png.latex?Y%5Cvert%20X"> with respect to a <em>different</em> probability measure <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BPr%7D%5E%5Cprime">, defined by:</p>
<p><span id="eq-def-pr-prime"><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BPr%7D%5E%5Cprime(E)%20=%20t%20%5Ccdot%20%5Ctext%20%7BPr%7D(E%20%5Cvert%20Y%20=%201)%20+%20(1-t)%5Ccdot%20%5Ctext%20%7BPr%7D(E%20%5Cvert%20Y%20=%200),%0A%5Ctag%7B5%7D"></span></p>
<p>where <img src="https://latex.codecogs.com/png.latex?t=%5Ctext%7BPr%7D%5E%5Cprime(Y=1)%5Cin%20%5B0,%5C,1%5D"> is fixed by the requirement<sup>5</sup>:</p>
<p><span id="eq-def-pr-prime-2"><img src="https://latex.codecogs.com/png.latex?%0A%5Cdfrac%7B%5Ctext%20%7BPr%7D%5E%5Cprime%20(Y=1)%7D%7B%5Ctext%7BPr%7D%5E%5Cprime%20(Y=0)%7D=%5Cdfrac%7B%5Ctext%20%7BPr%7D%20(Y=1)%7D%7B%5Ctext%7BPr%7D%20(Y=0)%7D%5Ccdot%5Cdfrac%7B%5Cmathbb%20E(w(%5Cboldsymbol%20Y)%5Cvert%20%5Csum%20_i%20Y_i%20%3E0)%7D%7B%5Cmathbb%20E(w(%5Cboldsymbol%20Y%5Ec)%5Cvert%20%5Csum%20_i%20Y_i%5Ec%20%3E0)%7D.%0A%5Ctag%7B6%7D"></span></p>
<p>In terms of <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BPr%7D%5E%5Cprime">, the population minimizers <img src="https://latex.codecogs.com/png.latex?f_*"> and <img src="https://latex.codecogs.com/png.latex?r_*"> in Equation&nbsp;3 can be simply expressed as:</p>
<p><span id="eq-pop-minimizer-2"><img src="https://latex.codecogs.com/png.latex?%0Ar_*(X)=%5Cdfrac%7B%5Ctext%20%7BPr%7D%5E%5Cprime(Y=1%5Cvert%20X)%7D%7B%5Ctext%20%7BPr%7D%5E%5Cprime(Y=0%5Cvert%20X)%7D,%5Cqquad%20f_*(X)=%5Ctext%20%7BPr%7D%5E%5Cprime(Y=1%5Cvert%20X).%0A%5Ctag%7B7%7D"></span></p>
<p>If now <img src="https://latex.codecogs.com/png.latex?f"> is an arbitrary function, we have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bsplit%7D%0A%5Cmathbb%20E(%5Cmathcal%20L%20_N%20%5Ew%20%5Bf%5D)%20-%20%5Cmathbb%20E(%5Cmathcal%20L%20_N%20%5Ew%20%5Bf_*%5D)%20&amp;=%20%5Cmathbb%20E%5Cleft%5B%20%5Cmathbb%20E(Y_i%5Ccdot%20w(%5Cboldsymbol%20Y)%20+%20Y_i%5Ec%5Ccdot%20w(%5Cboldsymbol%20Y%5Ec)%5Cvert%20X_i)%5Ccdot%20%5Cmathcal%20D(f_*(X_i)%5Cvert%20%5Cvert%20f(X_i))%5Cright%5D%0A&amp;=%20k%5Ccdot%20D(%5Ctext%7BPr%7D%5E%5Cprime%5Cvert%20%5Cvert%20%5Ctext%7BPr%7D%5E%5Cprime%20_f)%0A%5Cend%7Bsplit%7D%0A"> where <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20D(p%5Cvert%20%5Cvert%20q)%20=%20p%20%5Clog%20(%5Cfrac%7Bp%7D%7Bq%7D)%20+%20(1-p)%20%5Clog%20(%5Cfrac%7B1-p%7D%7B1-q%7D)">, and <img src="https://latex.codecogs.com/png.latex?D(%5Ctext%7BPr%7D%5E%5Cprime%5Cvert%20%5Cvert%20%5Ctext%7BPr%7D%5E%5Cprime%20_f)"> is the Kullback-Liebler divergence between the measure <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BPr%7D%5E%5Cprime"> and the measure <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BPr%7D%5E%5Cprime%20_f"> defined by:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BPr%7D%5E%5Cprime%20_f(Y%20=%201%5Cvert%20X)=f(X),%5Cqquad%20%5Ctext%7BPr%7D%5E%5Cprime%20_f(X)=%5Ctext%7BPr%7D%5E%5Cprime(X)%0A"> (notice that <img src="https://latex.codecogs.com/png.latex?%5Ctext%20%7BPr%7D%20%5E%7B%5Cprime%7D%20_%7Bf_*%7D%20%5Cequiv%20%5Ctext%7BPr%7D%20%5E%7B%5Cprime%7D"> by definition). Finally, suppose that <img src="https://latex.codecogs.com/png.latex?X%20=%20g(%5Cwidetilde%20X)"> for some random variable <img src="https://latex.codecogs.com/png.latex?%5Cwidetilde%20X">, and define the corresponding functional:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cwidetilde%7B%5Cmathcal%20L%7D%20_N%5Ew%5B%5Cwidetilde%20f%5D%20%20=%20-%5Cfrac%7B1%7D%7BN%7D%5Csum_%7Bi=1%7D%20%5EN%20%5Cleft%5Bw(%5Cboldsymbol%20Y)Y_i%20%5Clog(%5Cwidetilde%20f(%5Cwidetilde%20X))+%20w(%7B%5Cboldsymbol%20Y%7D%5Ec)(%20Y_i%5Ec)%20%5Clog(%5Cwidetilde%20f(%5Cwidetilde%20X)%5Ec)%5Cright%5D.%0A"> Then <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20L%20_N%20%5Ew%20%5Bf%5D%20=%20%5Cwidetilde%7B%5Cmathcal%20L%7D%20_N%5Ew%5Bf%20%5Ccirc%20g%5D">. If <img src="https://latex.codecogs.com/png.latex?%5Cwidetilde%20f%20%20_*%20="> is the population minimizer of <img src="https://latex.codecogs.com/png.latex?%5Cwidetilde%7B%5Cmathcal%20L%7D%20_N%5Ew">, it follows that <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20E%20(%5Cwidetilde%7B%5Cmathcal%20L%7D%20_N%5Ew%5B%5Cwidetilde%20f%20_*%5D)%20%5Cleq%20%5Cmathbb%20E(%5Cmathcal%20L%20_N%20%5Ew%20%5Bf_*%5D)">.</p>
<p>Putting everything together, we can decompose the expected loss for a function <img src="https://latex.codecogs.com/png.latex?f=f(X)">, where <img src="https://latex.codecogs.com/png.latex?X=%20g(%5Cwidetilde%20X)">, in the following suggestive way:</p>
<p><span id="eq-decomposition-weighted-loss"><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bsplit%7D%0A%5Cmathbb%20E(%5Cmathcal%20L%20_N%20%5Ew%20%5Bf%5D)%20&amp;=%20(L_N%20%5Ew)_%5Ctext%7Bmin%7D+(L_N%20%5Ew)_%5Ctext%7Bproc%7D%20+(L_N%20%5Ew)_%5Ctext%7Bmissp%7D,%5C%5C%0A(L_N%20%5Ew)_%5Ctext%7Bmin%7D&amp;%5Cequiv%5Cmathbb%20E(%5Cwidetilde%7B%5Cmathcal%20L%7D%20_N%5Ew%5B%7B%5Cwidetilde%20f%7D%20_*%5D)%20%20%5C%5C%20&amp;=%0A%5Cmathbb%20E%5Cleft%5B%20%5Cmathbb%20E(Y_i%5Ccdot%20w(%5Cboldsymbol%20Y)%20+%20Y_i%5Ec%5Ccdot%20w(%5Cboldsymbol%20Y%5Ec)%5Cvert%20%5Cwidetilde%20X%20_i)%5Ccdot%20%5Cmathcal%20H(%7B%5Cwidetilde%20f%7D%20_*(%5Cwidetilde%20X%20_i))%5Cright%5D%5C%5C%0A&amp;=k%5Ccdot%20H%5E%5Cprime(Y%5Cvert%20%5Cwidetilde%20X),%5C%5C%0A(L_N%20%5Ew)_%5Ctext%7Bproc%7D&amp;%5Cequiv%5Cmathbb%20E(%5Cmathcal%20L%20_N%20%5Ew%20%5Bf_*%5D-%5Cwidetilde%7B%5Cmathcal%20L%7D%20_N%5Ew%5B%5Cphi_*%5D)%20%20%5C%5C&amp;%20=%0A%5Cmathbb%20E%5Cleft%5B%20%5Cmathbb%20E(Y_i%5Ccdot%20w(%5Cboldsymbol%20Y)%20+%20Y_i%5Ec%5Ccdot%20w(%5Cboldsymbol%20Y%5Ec)%5Cvert%20X_i)%5Ccdot%20%20%5Cmathcal%20H(f_*(X_i))%0A%5Cright%5D-%20(L_N%20%5Ew)_%5Ctext%7Bmin%7D%5C%5C%0A&amp;%20=%20k%5Ccdot%20I%5E%5Cprime(Y;%20%5Cwidetilde%20X%5Cvert%20X),%5C%5C%0A(L_N%20%5Ew)_%5Ctext%7Bmissp%7D%20&amp;%20%5Cequiv%20%5Cmathbb%20E(%5Cmathcal%20L%20_N%20%5Ew%20%5Bf%5D)%20-%20%5Cmathbb%20E(%5Cmathcal%20L%20_N%20%5Ew%20%5Bf_*%5D)%20%5C%5C&amp;=%20%5Cmathbb%20E%5Cleft%5B%20%5Cmathbb%20E(Y_i%5Ccdot%20w(%5Cboldsymbol%20Y)%20+%20Y_i%5Ec%5Ccdot%20w(%5Cboldsymbol%20Y%5Ec)%5Cvert%20X_i)%5Ccdot%20%20%5Cmathcal%20%20D(f_*(X_i)%5Cvert%20%5Cvert%20f(X_i))%5Cright%5D%5C%5C%20&amp;=k%5Ccdot%20D(%5Ctext%20%7BPr%7D%5E%5Cprime%5Cvert%20%5Cvert%20%5Ctext%20%7BPr%7D%5E%5Cprime%20_f),%0A%5Cend%7Bsplit%7D%0A%5Ctag%7B8%7D"></span></p>
<p>where <img src="https://latex.codecogs.com/png.latex?k"> is defined in Equation&nbsp;4. In the equation for <img src="https://latex.codecogs.com/png.latex?(L%5Ew%20_N)_%5Ctext%7Bproc%7D"> we introduced the conditional mutual information (with respect to the measure <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BPr%7D%5E%5Cprime">), that satisfies [<span class="citation" data-cites="Cover2006">Cover and Thomas (2006)</span>]:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AI(%5Cwidetilde%20X;Y%5Cvert%20X)%20=%20I(%5Cwidetilde%20X,Y)-I(X,Y)%20=%20H(Y%5Cvert%20X)-H(Y%5Cvert%20%5Cwidetilde%20X).%0A"></p>
<p>The three components in Equation&nbsp;8 can be interpreted as follows: <img src="https://latex.codecogs.com/png.latex?(L_N%20%5Ew)_%5Ctext%7Bmin%7D"> represents the minimum expected loss achievable, given the data available <img src="https://latex.codecogs.com/png.latex?%5Cwidetilde%20X">; <img src="https://latex.codecogs.com/png.latex?(L_N%20%5Ew)_%5Ctext%7Bproc%7D"> accounts for the information lost in the processing transformation <img src="https://latex.codecogs.com/png.latex?X=g(%5Cwidetilde%20X)">; finally <img src="https://latex.codecogs.com/png.latex?(L_N%20%5Ew)_%5Ctext%7Bmissp%7D"> is due to misspecification, <em>i.e.</em> the fact that the model <img src="https://latex.codecogs.com/png.latex?f(X)"> for the true posterior probability <img src="https://latex.codecogs.com/png.latex?f_*(X)"> is an approximation.</p>
<p>All the information-theoretic quantities (and their corresponding operative interpretations hinted in the previous paragraph) make reference to the measure <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BPr%7D%5E%5Cprime"> defined by Equation&nbsp;5 and Equation&nbsp;6. This is merely the result of altering the proportion of positive (<img src="https://latex.codecogs.com/png.latex?Y=1">) and negative (<img src="https://latex.codecogs.com/png.latex?Y=0">) examples in the <img src="https://latex.codecogs.com/png.latex?X">-<img src="https://latex.codecogs.com/png.latex?Y"> joint distribution by a factor dictated by the weight function <img src="https://latex.codecogs.com/png.latex?w"> - while keeping conditional distributions such as <img src="https://latex.codecogs.com/png.latex?X%5Cvert%20Y"> unchanged.</p>
</section>
<section id="a-familiar-case-cross-entropy-loss" class="level2">
<h2 class="anchored" data-anchor-id="a-familiar-case-cross-entropy-loss">A familiar case: cross-entropy loss</h2>
<p>For <img src="https://latex.codecogs.com/png.latex?w(%5Cboldsymbol%20%7BY%7D)%20=%201">, the functional <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%20%7BL%7D%20_%7BN%7D%20%5E%7Bw%7D%5Bf%5D"> coincides with the usual cross-entropy loss<sup>6</sup>:</p>
<p><span id="eq-cross-entropy-loss"><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BCE%7D%5Bf%5D%20=%20-%5Cfrac%7B1%7D%7BN%7D%5Csum_%7Bi=1%7D%20%5EN%20%5Cleft%5BY_i%20%5Clog(f(X_i))+%20(1-Y_i)%20%5Clog(1-f(X_i))%5Cright%5D.%0A%5Ctag%7B9%7D"></span></p>
<p>From Equation&nbsp;6 we see that the measure <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BPr%7D%5E%7B%5Cprime%7D"> coincides with the original <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BPr%7D">, so that by Equation&nbsp;3 the population minimizer of Equation&nbsp;9 is <img src="https://latex.codecogs.com/png.latex?f_%7B*%7D(X)%20=%20%5Ctext%7BPr%7D(Y=1%5Cvert%20X)"> (independently of sample size). Since <img src="https://latex.codecogs.com/png.latex?k%20=%201"> (<em>cf.</em> Equation&nbsp;4), the decomposition Equation&nbsp;8 reads:</p>
<p><span id="eq-decomposition-ce"><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bsplit%7D%0A%5Cmathbb%20E(%5Ctext%7BCE%7D%20%5Bf%5D)%20&amp;=%20(%5Ctext%7BCE%7D)_%5Ctext%7Bmin%7D+(%5Ctext%7BCE%7D)_%5Ctext%7Bproc%7D%20+(%5Ctext%7BCE%7D)_%5Ctext%7Bmissp%7D,%5C%5C%0A(%5Ctext%7BCE%7D)_%5Ctext%7Bmin%7D&amp;=H(Y%5Cvert%20%5Cwidetilde%20X),%5C%5C%0A(%5Ctext%7BCE%7D)_%5Ctext%7Bproc%7D&amp;=%20I(Y;%20%5Cwidetilde%20X%5Cvert%20X),%5C%5C%0A(%5Ctext%7BCE%7D)_%5Ctext%7Bmissp%7D%20&amp;=D(%5Ctext%20%7BPr%7D%5Cvert%20%5Cvert%20%5Ctext%20%7BPr%7D%20_%7Bf%7D),%0A%5Cend%7Bsplit%7D%0A%5Ctag%7B10%7D"></span></p>
<p>where conditional entropy <img src="https://latex.codecogs.com/png.latex?H">, mutual information <img src="https://latex.codecogs.com/png.latex?I"> and relative entropy <img src="https://latex.codecogs.com/png.latex?D"> now simply refer to the original measure <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BPr%7D">.</p>
</section>
<section id="the-likelihood-ratio-cost" class="level2">
<h2 class="anchored" data-anchor-id="the-likelihood-ratio-cost">The Likelihood Ratio Cost</h2>
<p>The quantity <img src="https://latex.codecogs.com/png.latex?C_%7B%5Ctext%7BLLR%7D%7D"> defined in Equation&nbsp;1 can be put in the general form Equation&nbsp;2, if we let <img src="https://latex.codecogs.com/png.latex?f(X)%20=%20(1+r(X)%5E%7B-1%7D)%5E%7B-1%7D"> and<sup>7</sup>:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Aw(%5Cboldsymbol%20Y)%20=%20%5Cleft(%5Cdfrac%7B2%7D%7BN%7D%5Csum%20_%7Bi%20=%201%7D%5E%7BN%7DY_j%20%5Cright)%5E%7B-1%7D%0A"> In what follows, I will consider a slight modification of the usual <img src="https://latex.codecogs.com/png.latex?C_%5Ctext%7BLLR%7D">, defined by the weight function:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Aw(%5Cboldsymbol%20Y)%20=%20%5Cdfrac%7B1%7D%7B2(N-1)%7D%5Csum%20_%7Bi%20=%201%7D%5E%7BN%7D(1-Y_j).%0A"> This yields Equation&nbsp;1 multiplied by <img src="https://latex.codecogs.com/png.latex?%5Cdfrac%7BN_1N_0%7D%7BN(N-1)%7D">, which I will keep denoting as <img src="https://latex.codecogs.com/png.latex?C_%5Ctext%7BLLR%7D">, with a slight abuse of notation.</p>
<p>We can easily compute<sup>8</sup>:</p>
<p><span id="eq-prior-cllr"><img src="https://latex.codecogs.com/png.latex?%0A%5Cdfrac%7B%5Ctext%20%7BPr%7D%5E%5Cprime%20(Y=1)%7D%7B%5Ctext%7BPr%7D%5E%5Cprime%20(Y=0)%7D=1,%0A%5Ctag%7B11%7D"></span></p>
<p>so that, by Equation&nbsp;3, the population minimizer of <img src="https://latex.codecogs.com/png.latex?C_%5Ctext%7BLLR%7D"> is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ar_*(X)%20=%20%5CLambda%20(X),%5Cquad%20f_*(X)=%5Cdfrac%7B1%7D%7B1+%5CLambda(X)%5E%7B-1%7D%7D,%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5CLambda(X)"> denotes the <em>likelihood-ratio</em> of <img src="https://latex.codecogs.com/png.latex?X">, schematically:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5CLambda(X)%5Cequiv%20%5Cdfrac%7B%5Ctext%7BPr%7D(X%5Cvert%20Y%20=%201)%7D%7B%5Ctext%7BPr%7D(X%5Cvert%20Y%20=%200)%7D.%0A"></p>
<p>The constant <img src="https://latex.codecogs.com/png.latex?k"> in Equation&nbsp;4 is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ak%20=%20%5Ctext%7BPr%7D(Y%20=%201)%5Ctext%7BPr%7D(Y%20=%200)=%5Ctext%7BVar%7D(Y)%0A"></p>
<p>The general decomposition Equation&nbsp;8 becomes: <span id="eq-decomposition-ce"><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bsplit%7D%0A%5Cmathbb%20E(C_%5Ctext%7BLLR%7D%20%5Bf%5D)%20&amp;=%20(C_%5Ctext%7BLLR%7D)_%5Ctext%7Bmin%7D+(C_%5Ctext%7BLLR%7D)_%5Ctext%7Bproc%7D%20+(C_%5Ctext%7BLLR%7D)_%5Ctext%7Bmissp%7D,%5C%5C%0A(C_%5Ctext%7BLLR%7D)_%5Ctext%7Bmin%7D&amp;=%5Ctext%7BVar%7D(Y)%5Ccdot%20H%5E%7B%5Cprime%7D(Y%5Cvert%20%5Cwidetilde%20X),%5C%5C%0A(C_%5Ctext%7BLLR%7D)_%5Ctext%7Bproc%7D&amp;=%20%5Ctext%7BVar%7D(Y)%5Ccdot%20I%5E%7B%5Cprime%7D(Y;%20%5Cwidetilde%20X%5Cvert%20X),%5C%5C%0A(C_%5Ctext%7BLLR%7D)_%5Ctext%7Bmissp%7D%20&amp;=%5Ctext%7BVar%7D(Y)%5Ccdot%20D%5E%7B%5Cprime%7D(%5Ctext%20%7BPr%7D%5Cvert%20%5Cvert%20%5Ctext%20%7BPr%7D%20_%7Bf%7D),%0A%5Cend%7Bsplit%7D%0A%5Ctag%7B12%7D"></span></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BPr%7D%5E%5Cprime"> is now given by Equation&nbsp;11.</p>
</section>
<section id="discussion" class="level2">
<h2 class="anchored" data-anchor-id="discussion">Discussion</h2>
<p>The table below provides a comparison between cross-entropy and likelihood-ratio cost, summarizing the results from previous sections.</p>
<table class="caption-top table">
<colgroup>
<col style="width: 33%">
<col style="width: 33%">
<col style="width: 33%">
</colgroup>
<thead>
<tr class="header">
<th></th>
<th>Cross-entropy</th>
<th>Likelihood Ratio Cost</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><img src="https://latex.codecogs.com/png.latex?f_*(X)"></td>
<td><img src="https://latex.codecogs.com/png.latex?%5Ctext%7BPr%7D(Y%20=%201%5Cvert%20X)"></td>
<td><img src="https://latex.codecogs.com/png.latex?(1+%5CLambda(X)%5E%7B-1%7D)%5E%7B-1%7D"></td>
</tr>
<tr class="even">
<td><img src="https://latex.codecogs.com/png.latex?r_*(X)">`</td>
<td>Posterior odds ratio</td>
<td>Likelihood ratio</td>
</tr>
<tr class="odd">
<td>Minimum Loss</td>
<td><img src="https://latex.codecogs.com/png.latex?H(Y%5Cvert%20%5Cwidetilde%20X)"></td>
<td><img src="https://latex.codecogs.com/png.latex?%5Ctext%7BVar%7D(Y)%20%5Ccdot%20H%5E%5Cprime(Y%5Cvert%20%5Cwidetilde%20X)"></td>
</tr>
<tr class="even">
<td>Processing Loss</td>
<td><img src="https://latex.codecogs.com/png.latex?I(Y;%20%5Cwidetilde%20X%5Cvert%20X)"></td>
<td><img src="https://latex.codecogs.com/png.latex?%5Ctext%7BVar%7D(Y)%20%5Ccdot%20I%5E%5Cprime(Y;%20%5Cwidetilde%20X%5Cvert%20X)"></td>
</tr>
<tr class="odd">
<td>Misspecification Loss</td>
<td><img src="https://latex.codecogs.com/png.latex?D(f_*%5Cvert%5Cvert%20f)"></td>
<td><img src="https://latex.codecogs.com/png.latex?%5Ctext%7BVar%7D(Y)%20%5Ccdot%20D%5E%5Cprime(f_*%5Cvert%5Cvert%20f)"></td>
</tr>
<tr class="even">
<td>Reference measure</td>
<td><img src="https://latex.codecogs.com/png.latex?%5Ctext%7BPr%7D"></td>
<td><img src="https://latex.codecogs.com/png.latex?%5Ctext%7BPr%7D%5E%7B%5Cprime%7D%20=%20%5Cfrac%7B%5Ctext%7BPr%7D(%5Ccdot%20%5Cvert%20Y%20=%201)+%5Ctext%7BPr%7D(%5Ccdot%20%5Cvert%20Y%20=%200)%7D%7B2%7D"></td>
</tr>
</tbody>
</table>
<p>The objective of <img src="https://latex.codecogs.com/png.latex?C_%5Ctext%7BLLR%7D"> is found to be the likelihood ratio, as terminology suggests. The interpretation of model selection according to <img src="https://latex.codecogs.com/png.latex?C_%5Ctext%7BLLR%7D"> minimization turns out to be slightly more involved, compared to cross-entropy, which we first review.</p>
<p>Suppose we are given a set of predictive models <img src="https://latex.codecogs.com/png.latex?%5C%7B%5Cmathcal%20M_i%5C%7D_%7Bi%5Cin%20I%7D">, each of which consists of a processing transformation, <img src="https://latex.codecogs.com/png.latex?%5Cwidetilde%20X%20%5Cmapsto%20X">, and an estimate of the posterior probability <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BPr%7D(Y%20=%201%5Cvert%20X)">. When the sample size <img src="https://latex.codecogs.com/png.latex?N%20%5Cto%20%5Cinfty">, cross-entropy minimization will almost certainly select the model that minimizes <img src="https://latex.codecogs.com/png.latex?I(Y;%20%5Cwidetilde%20X%5Cvert%20X)%20+%20D(f_*%5Cvert%20%5Cvert%20f)">. Following standard Information Theory arguments, we can interpret this model as the statistically optimal compression algorithm for <img src="https://latex.codecogs.com/png.latex?Y">, assuming <img src="https://latex.codecogs.com/png.latex?X"> to be available at both the encoding and decoding ends.</p>
<p>The previous argument carries over <em>mutatis mutandi</em> to <img src="https://latex.codecogs.com/png.latex?C_%5Ctext%7BLLR%7D"> minimization, with an important qualification: optimal average compression is now achieved for data distributed according to a different probability measure <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BPr%7D'(%5Ccdot)%20=%20%5Cfrac%7B1%7D%7B2%7D%5Ctext%20%7BPr%7D(%5Ccdot%5Cvert%20Y%20=%201)%20+%20%5Cfrac%7B1%7D%7B2%7D%5Ctext%20%7BPr%7D(%5Ccdot%5Cvert%20Y%20=%200)">. In particular, according to <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BPr%7D'">, the likelihood ratio coincides with the posterior odds ratio, and <img src="https://latex.codecogs.com/png.latex?(1+%5CLambda(X)%5E%7B-1%7D)%5E%7B-1%7D"> coincides with posterior probability, which clarifies why we can measure differences from the true likelihood-ratio through the Kullback-Liebler divergence.</p>
<p>The measure <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BPr%7D'"> is not just an abstruse mathematical construct: it is the result of balanced sampling from the original distribution, <em>i.e.</em> taking an equal number of positive and negative cases<sup>9</sup>. If the <img src="https://latex.codecogs.com/png.latex?(X,%5C,Y)"> distribution is already balanced, either by design or because of some underlying symmetry in the data generating process, our analysis implies that likelihood-ratio cost and cross-entropy minimization are essentially equivalent for <img src="https://latex.codecogs.com/png.latex?N%5Cto%20%5Cinfty">. In general, with <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BPr%7D%20(Y=1)%20%5Cneq%20%5Ctext%7BPr%7D%20(Y=0)">, this is not the case<sup>10</sup>.</p>
<p>The fact that <img src="https://latex.codecogs.com/png.latex?C_%5Ctext%7BLLR%7D"> seeks for optimal predictors according to the balanced measure <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BPr%7D'"> is, one could argue, not completely crazy from the point of view of forensic science, where “<img src="https://latex.codecogs.com/png.latex?Y%5Cin%5C%7B0,1%5C%7D">” often stands for a sort verdict (guilty <em>vs.</em> not guilty, say). Indeed, optimizing with respect to <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BPr%7D%5E%5Cprime"> means that our predictions are designed to be optimal in a world in which the verdict could be <em>a priori</em> <img src="https://latex.codecogs.com/png.latex?Y=0"> or <img src="https://latex.codecogs.com/png.latex?Y=1"> with equal probability - which is what an unbiased trier-of-fact should ideally assume. Minimizing <img src="https://latex.codecogs.com/png.latex?C_%5Ctext%7BLLR%7D">, we guard ourselves against any bias that may be implicit in the training dataset, extraneous to the <img src="https://latex.codecogs.com/png.latex?X">-<img src="https://latex.codecogs.com/png.latex?Y"> relation and not explicitly modeled, a feature that may be regarded as desirable from a legal standpoint.</p>
</section>
<section id="simulated-example" class="level2">
<h2 class="anchored" data-anchor-id="simulated-example">Simulated example</h2>
<p>In general, the posterior odd ratio and likelihood ratio differ only by a constant, so it is reasonable to try to fit the same functional form to both of them. Let us illustrate with a simulated example of this type the differences between cross-entropy and <img src="https://latex.codecogs.com/png.latex?C_%7B%5Ctext%7BLLR%7D%7D"> optimization mentioned in the previous Section.</p>
<p>Suppose that <img src="https://latex.codecogs.com/png.latex?X%20%5Cin%20%5Cmathbb%20R"> has conditional density: <img src="https://latex.codecogs.com/png.latex?%0A%5Cphi(X%5Cvert%20Y)%20=%20(2%5Cpi%5Csigma%20_Y%5E2)%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7D%20%5Cexp(-%5Cfrac%7B(X-%5Cmu_Y)%5E2%7D%7B2%5Csigma%20_Y%5E2%7D)%0A"> and <img src="https://latex.codecogs.com/png.latex?Y"> has marginal probability <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BPr%7D(Y%20=%201)%20=%20%5Cpi">. The true likelihood-ratio and posterior odds ratio are respectively given by:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bsplit%7D%0A%5CLambda%20(X)%20&amp;%0A%20%20%20%20%5Cequiv%20%5Cfrac%7B%5Cphi(X%5Cvert%20Y=1)%7D%7B%5Cphi(X%5Cvert%20Y=0)%7D%0A%20%20%20%20=%20e%20%5E%20%7Ba%20X%5E2%20+%20bX%20+c%7D,%5C%5C%0A%5Crho%20(X)%20&amp;%0A%20%20%20%20%5Cequiv%20%5Cfrac%7B%5Ctext%7BPr%7D(Y%20=%201%5Cvert%20X)%7D%7B%5Ctext%7BPr%7D(Y%20=%200%5Cvert%20X)%7D%0A%20%20%20%20=%20e%20%5E%20%7Ba%20X%20%5E%202%20+%20bX%20+c+d%7D,%0A%5Cend%7Bsplit%7D%0A"> where we have defined:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Aa%20%20%5Cequiv%20%5Cdfrac%7B%5Csigma%20_1%20%5E2%20-%5Csigma_0%20%5E2%7D%7B2%5Csigma%20_0%20%5E2%5Csigma_1%20%5E2%7D,%5Cquad%0Ab%20%20%5Cequiv%20%5Cmu%20_1%20-%20%5Cmu%20_0,%20%5Cquad%0Ac%20%20%5Cequiv%20%5Cdfrac%7B%5Cmu_0%5E2%7D%7B2%5Csigma_0%5E2%7D%20-%5Cdfrac%7B%5Cmu_1%20%5E2%7D%7B2%5Csigma%20_1%5E2%7D+%5Cln(%5Cfrac%7B%5Csigma%20_0%20%7D%7B%5Csigma%20_1%20%7D),%5Cquad%0Ad%20%20%5Cequiv%20%5Cln%20(%5Cfrac%20%7B%5Cpi%7D%7B1-%5Cpi%7D)%20.%0A"></p>
<p>Suppose that we fit an exponential function <img src="https://latex.codecogs.com/png.latex?r(X)=e%5E%7BmX%20+q%7D"> to <img src="https://latex.codecogs.com/png.latex?%5CLambda(X)"> by likelihood-ratio cost minimization, and similarly <img src="https://latex.codecogs.com/png.latex?r'(X)=e%5E%7Bm'X+q'%7D"> to <img src="https://latex.codecogs.com/png.latex?%5Crho(X)"> by cross-entropy minimization<sup>11</sup>. Due to the previous discussion, one could reasonably expect the results of the two procedure to differ in some way, which is demonstrated below by simulation.</p>
<p>The chunk of R code below defines the function and data used for the simulation. In particular, I’m considering a heavily unbalanced case (<img src="https://latex.codecogs.com/png.latex?%5Ctext%7BPr%7D(Y%20=%201)%20=%200.1%5C%25">) in which negative cases give rise to a sharply localized <img src="https://latex.codecogs.com/png.latex?X"> peak around <img src="https://latex.codecogs.com/png.latex?X=0"> (<img src="https://latex.codecogs.com/png.latex?%5Cmu%20_0%20=%200">, <img src="https://latex.codecogs.com/png.latex?%5Csigma_0%20=%20.25">), while the few positive cases give rise to a broader signal centered at <img src="https://latex.codecogs.com/png.latex?X=1"> (<img src="https://latex.codecogs.com/png.latex?%5Cmu%20_1%20=%201">, <img src="https://latex.codecogs.com/png.latex?%5Csigma%20_1%20=%201">).</p>
<div class="cell" data-code_folding="true">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tidyverse facilities for plotting</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2) </span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loss functions</span></span>
<span id="cb1-6">weighted_loss <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(par, data, w) {</span>
<span id="cb1-7">    m <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> par[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb1-8">    q <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> par[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]]</span>
<span id="cb1-9">    x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x</span>
<span id="cb1-10">    y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y</span>
<span id="cb1-11">    </span>
<span id="cb1-12">    z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> m <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> q</span>
<span id="cb1-13">    p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exp</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>z))</span>
<span id="cb1-14">    </span>
<span id="cb1-15">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">w</span>(y) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(p) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>y) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">w</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>y) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>p))</span>
<span id="cb1-16">}</span>
<span id="cb1-17"></span>
<span id="cb1-18">cross_entropy <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(par, data) </span>
<span id="cb1-19">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">weighted_loss</span>(par, data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">w =</span> \(y) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-20"></span>
<span id="cb1-21">cllr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(par, data) </span>
<span id="cb1-22">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">weighted_loss</span>(par, data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">w =</span> \(y) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>y))</span>
<span id="cb1-23"></span>
<span id="cb1-24"></span>
<span id="cb1-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Data generating process</span></span>
<span id="cb1-26">rxy <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pi =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">001</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mu1 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mu0 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd1 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd0 =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>) { </span>
<span id="cb1-27">    y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> pi</span>
<span id="cb1-28">    x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> mu1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>y) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> mu0, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> sd1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>y) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> sd0)</span>
<span id="cb1-29">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y)</span>
<span id="cb1-30">}</span>
<span id="cb1-31">pi <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">formals</span>(rxy)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>pi</span>
<span id="cb1-32"></span>
<span id="cb1-33"></span>
<span id="cb1-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulation</span></span>
<span id="cb1-35"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">840</span>)</span>
<span id="cb1-36">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rxy</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e6</span>)</span>
<span id="cb1-37">par_cllr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">optim</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), cllr, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> data)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>par</span>
<span id="cb1-38">par_cross_entropy <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">optim</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), cross_entropy, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> data)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>par</span>
<span id="cb1-39">par_cross_entropy[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> par_cross_entropy[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(pi <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>pi))</span>
<span id="cb1-40"></span>
<span id="cb1-41"></span>
<span id="cb1-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Helpers to extract LLRs from models</span></span>
<span id="cb1-43">llr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, par)</span>
<span id="cb1-44">    par[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> par[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] </span>
<span id="cb1-45"></span>
<span id="cb1-46">llr_true <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) {</span>
<span id="cb1-47">    mu1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">formals</span>(rxy)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>mu1 </span>
<span id="cb1-48">    mu0 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">formals</span>(rxy)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>mu0 </span>
<span id="cb1-49">    sd1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">formals</span>(rxy)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sd1</span>
<span id="cb1-50">    sd0 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">formals</span>(rxy)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sd0</span>
<span id="cb1-51">        </span>
<span id="cb1-52">    a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (sd1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> sd0 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (sd1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> sd0 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-53">    b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mu1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (sd1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mu0 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (sd0<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-54">    c <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (mu0<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (sd0<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mu1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (sd1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(sd0 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> sd1)</span>
<span id="cb1-55">    a <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c</span>
<span id="cb1-56">}</span></code></pre></div>
</div>
<p>So, what do our best estimates look like? The plot below shows the best fit lines for the log-likelihood ratio from <img src="https://latex.codecogs.com/png.latex?C_%7B%5Ctext%7BLLR%7D%7D"> minimization (in solid red) and cross-entropy minimization (in solid blue). The true log-likelihood ratio parabola is the black line. Also shown are the <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BLLR%7D=0"> line (in dashed red) and the <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BLLR%7D=%5Cln(%5Cfrac%7B1-%5Cpi%7D%7B%5Cpi%7D)"> (in dashed blue), which are the appropriate Bayes thresholds for classifying a data point as positive (<img src="https://latex.codecogs.com/png.latex?Y=1">), assuming data comes from a balanced and unbalanced distribution, respectively.</p>
<div class="cell" data-code_folding="true">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb2-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">llr</span>(x, par_cllr), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb2-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">llr</span>(x, par_cross_entropy), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">llr_true</span>(x), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_hline</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yintercept =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dashed"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-6">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_hline</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yintercept =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(pi <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>pi))), </span>
<span id="cb2-7">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dashed"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-8">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ylim</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xlim</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xlab</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ylab</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Log-Likelihood Ratio"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vgherard.github.io/posts/2023-11-15-interpreting-the-likelihood-ratio-cost/interpreting-the-likelihood-ratio-cost_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>The reason why the lines differ is that they are designed to solve a different predictive problem: as we’ve argued above, minimizing <img src="https://latex.codecogs.com/png.latex?C_%5Ctext%7BLLR%7D"> looks for the best <img src="https://latex.codecogs.com/png.latex?Y%5Cvert%20X"> conditional probability estimate according to the balanced measure <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BPr%7D'">, whereas cross-entropy minimization does the same for the original measure <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BPr%7D">. This is how data looks like under the two measures (the histograms are stacked - in the unbalanced case, positive examples are invisible on the linear scale of the plot):</p>
<div class="cell" data-code_folding="true">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">test_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(</span>
<span id="cb3-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rxy</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pi =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Balanced"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">llr_thresh =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb3-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rxy</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e6</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unbalanced"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">llr_thresh =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(pi <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>pi)))</span>
<span id="cb3-4">    )</span>
<span id="cb3-5"></span>
<span id="cb3-6">test_data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb3-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> y)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb3-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bins =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_grid</span>(type <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> ., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free_y"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xlim</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vgherard.github.io/posts/2023-11-15-interpreting-the-likelihood-ratio-cost/interpreting-the-likelihood-ratio-cost_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>These differences are reflected in the misclassification rates of the resulting classifiers defined by <img src="https://latex.codecogs.com/png.latex?%5Chat%20Y(X)=I(%5Ctext%7BLLR%7D(X)%3E%5Ctext%7Bthreshold%7D)">, where the appropriate threshold is zero in the balanced case, and <img src="https://latex.codecogs.com/png.latex?%5Cln(%5Cfrac%7B1-%5Cpi%7D%7B%5Cpi%7D)"> in the unbalanced case. According to intuition, we see that the <img src="https://latex.codecogs.com/png.latex?C_%5Ctext%7BLLR%7D"> optimizer beats the cross-entropy optimizer on the balanced sample, while performing significantly worse on the unbalanced one.</p>
<div class="cell" data-code_folding="true">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">test_data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb4-3">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">llr_cllr =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">llr</span>(x, par_cllr),</span>
<span id="cb4-4">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">llr_cross_entropy =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">llr</span>(x, par_cross_entropy),</span>
<span id="cb4-5">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">llr_true =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">llr_true</span>(x)</span>
<span id="cb4-6">        ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(type) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(</span>
<span id="cb4-9">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cllr =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>((llr_cllr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> llr_thresh) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> y),</span>
<span id="cb4-10">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cross_entropy =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>((llr_cross_entropy <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> llr_thresh) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> y),</span>
<span id="cb4-11">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">true_llr =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>((llr_true <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> llr_thresh) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> y)</span>
<span id="cb4-12">        )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 4
  type           cllr cross_entropy true_llr
  &lt;chr&gt;         &lt;dbl&gt;         &lt;dbl&gt;    &lt;dbl&gt;
1 Balanced   0.166         0.185    0.140   
2 Unbalanced 0.000994      0.000637 0.000518</code></pre>
</div>
</div>
</section>
<section id="final-remarks" class="level2">
<h2 class="anchored" data-anchor-id="final-remarks">Final remarks</h2>
<p>Our main conclusion in a nutshell is that <img src="https://latex.codecogs.com/png.latex?C_%5Ctext%7BLLR%7D"> minimization is equivalent, <em>in the infinite sample limit</em>, to cross-entropy minimization on a balanced version of the original distribution. We haven’t discussed what happens for finite samples where variance starts to play a role, affecting the <em>efficiency</em> of loss functions as model optimization and selection criteria. For instance, for a well specified model of likelihood ratio, how do the convergence properties of <img src="https://latex.codecogs.com/png.latex?C_%7B%5Ctext%7BLLR%7D%7D"> and cross-entropy estimators compare to each other? I expect that answering questions like this would require a much more in-depth study than the one performed here (likely, with simulation playing a central role).</p>



</section>


<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-BRUMMER2006230" class="csl-entry">
Brümmer, Niko, and Johan du Preez. 2006. <span>“Application-Independent Evaluation of Speaker Detection.”</span> <em>Computer Speech &amp; Language</em> 20 (2): 230–75. https://doi.org/<a href="https://doi.org/10.1016/j.csl.2005.08.001">https://doi.org/10.1016/j.csl.2005.08.001</a>.
</div>
<div id="ref-Cover2006" class="csl-entry">
Cover, Thomas M., and Joy A. Thomas. 2006. <em>Elements of Information Theory 2nd Edition (Wiley Series in Telecommunications and Signal Processing)</em>. Hardcover; Wiley-Interscience.
</div>
</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>This is how I understood things should <em>theoretically</em> work, from discussions with friends who are actually working on this field. I have no idea on how much day-to-day practice comes close to this mathematical ideal, and whether there exist alternative frameworks to the one I have just described.↩︎</p></li>
<li id="fn2"><p>The Likelihood Ratio Cost was introduced in <span class="citation" data-cites="BRUMMER2006230">(Brümmer and du Preez 2006)</span>. The reference looks very complete, but I find its notation and terminology so unfamiliar that I decided to do my own investigation and leave this reading for a second moment.↩︎</p></li>
<li id="fn3"><p>That is to say, <img src="https://latex.codecogs.com/png.latex?w(Y_%7B%5Csigma(1)%7D,%5C,Y_%7B%5Csigma(2)%7D,%5Cdots,%5C,Y_%7B%5Csigma(N)%7D)=w(Y_1,%5C,Y_2,%5Cdots,%5C,Y_N)"> for any permutation <img src="https://latex.codecogs.com/png.latex?%5Csigma"> of the set <img src="https://latex.codecogs.com/png.latex?%5C%7B1,%5C,2,%5C,%5Cdots,%5C,N%5C%7D">.↩︎</p></li>
<li id="fn4"><p><em>Nota bene:</em> the function <img src="https://latex.codecogs.com/png.latex?f"> is here assumed to be fixed, whereas the randomness in the quantity <img src="https://latex.codecogs.com/png.latex?L%20_N%20%5Ew%20%5Bf%5D"> only comes from the paired observations <img src="https://latex.codecogs.com/png.latex?%5C%7B(X_i,%5C,Y_i)%5C%7D_%7Bi=1,%5C,2,%5C,%5Cdots,N%7D">.↩︎</p></li>
<li id="fn5"><p>Notice that, due to symmetry <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20E(w(%5Cboldsymbol%20Y)%5Cvert%20%5Csum%20_i%20Y_i%20%3E0)%20=%20%5Cmathbb%20E(w(%5Cboldsymbol%20Y)%5Cvert%20Y_1%20=%201)">, which might be easier to compute.↩︎</p></li>
<li id="fn6"><p>Here and below I relax a bit the notation, as most details should be clear from context.↩︎</p></li>
<li id="fn7"><p>The quantity <img src="https://latex.codecogs.com/png.latex?w(%5Cboldsymbol%20Y)"> is not defined when all <img src="https://latex.codecogs.com/png.latex?Y_i">’s are zero, as the right-hand side of Equation&nbsp;1 itself. In this case, we make the convention <img src="https://latex.codecogs.com/png.latex?w(%5Cboldsymbol%20Y)%20=%200">.↩︎</p></li>
<li id="fn8"><p>For the original loss in Equation&nbsp;1, without the modification discussed above, the result would have been <img src="https://latex.codecogs.com/png.latex?%5Cdfrac%7B%5Ctext%20%7BPr%7D%5E%5Cprime%20(Y=1)%7D%7B%5Ctext%7BPr%7D%5E%5Cprime%20(Y=0)%7D=%5Cdfrac%7B1-%5Ctext%20%7BPr%7D(Y=0)%5EN%7D%7B1-%5Ctext%20%7BPr%7D(Y=1)%5EN%7D.">↩︎</p></li>
<li id="fn9"><p>Formally, given an i.i.d. stochastic process <img src="https://latex.codecogs.com/png.latex?Z_i%20=%20(X_i,%5C,Y_i)">, we can define a new stochastic process <img src="https://latex.codecogs.com/png.latex?Z_i%20%5E%5Cprime%20=%20(X_i%5E%5Cprime,%5C,Y_i%5E%5Cprime)"> such that <img src="https://latex.codecogs.com/png.latex?Z_i%20%5E%5Cprime%20=%20Z_%7B2i%20-%201%7D"> if <img src="https://latex.codecogs.com/png.latex?Y_%7B2i-1%7D%5Cneq%20Y_%7B2i%7D">, and <img src="https://latex.codecogs.com/png.latex?Z_i%20%5E%5Cprime%20=%20%5Cperp"> (not defined) otherwise. Discarding <img src="https://latex.codecogs.com/png.latex?%5Cperp"> values, we obtain an i.i.d. stochastic process whose individual observations are distributed according to <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BPr%7D%5E%5Cprime">.↩︎</p></li>
<li id="fn10"><p>There is another case in which <img src="https://latex.codecogs.com/png.latex?C_%7B%5Ctext%7BLLR%7D%7D"> and cross-entropy minimization converge to the same answer as <img src="https://latex.codecogs.com/png.latex?N%5Cto%20%5Cinfty">: when used for model selection among a class of models for the likelihood or posterior odds ratio that contains their correct functional form.↩︎</p></li>
<li id="fn11"><p>This is just logistic regression. It could be a reasonable approximation if <img src="https://latex.codecogs.com/png.latex?%5Csigma_0%20%5E2%5Capprox%20%5Csigma_1%20%5E2">, which however I will assume below to be badly violated.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{gherardi2023,
  author = {Gherardi, Valerio},
  title = {Interpreting the {Likelihood} {Ratio} Cost},
  date = {2023-11-15},
  url = {https://vgherard.github.io/posts/2023-11-15-interpreting-the-likelihood-ratio-cost/interpreting-the-likelihood-ratio-cost.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-gherardi2023" class="csl-entry quarto-appendix-citeas">
Gherardi, Valerio. 2023. <span>“Interpreting the Likelihood Ratio
Cost.”</span> November 15, 2023. <a href="https://vgherard.github.io/posts/2023-11-15-interpreting-the-likelihood-ratio-cost/interpreting-the-likelihood-ratio-cost.html">https://vgherard.github.io/posts/2023-11-15-interpreting-the-likelihood-ratio-cost/interpreting-the-likelihood-ratio-cost.html</a>.
</div></div></section></div> ]]></description>
  <category>Forensic Science</category>
  <category>Bayesian Methods</category>
  <category>Information Theory</category>
  <category>Probability Theory</category>
  <category>R</category>
  <guid>https://vgherard.github.io/posts/2023-11-15-interpreting-the-likelihood-ratio-cost/interpreting-the-likelihood-ratio-cost.html</guid>
  <pubDate>Tue, 14 Nov 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>AB tests and repeated checks</title>
  <dc:creator>Valerio Gherardi</dc:creator>
  <link>https://vgherard.github.io/posts/2023-07-24-ab-tests-and-repeated-checks/ab-tests-and-repeated-checks.html</link>
  <description><![CDATA[ 





<section id="intro" class="level2">
<h2 class="anchored" data-anchor-id="intro">Intro</h2>
<blockquote class="blockquote">
<p>“How is the experiment going?”</p>
</blockquote>
<p>Also:</p>
<blockquote class="blockquote">
<p>“Do we already see something?”</p>
</blockquote>
<p>And my favorite one:</p>
<blockquote class="blockquote">
<p>“Did we already hit significance, or do we need more data?”</p>
</blockquote>
<p>If you have dealt with experiments with relatively high outcome expectations, you will likely have received (or perhaps asked yourself) similar questions from time to time.</p>
<p>In many data analysis contexts, including but not limited to for-profit ones, researchers are always trying to come up with positive results as fast as they can. Therefore, it is not at all surprising to see questions such as the ones above regularly arise during the course of an experiment. This is natural and not a problem <em>per se</em>. What I want to highlight and quantify in this post is how, if not done carefully, such “real-time” monitoring schedules can seriously invalidate data analysis - by inflating false positive and false negative rates.</p>
<p>Generally speaking, repeated and ad-hoc checks lead to problems of selective/simultaneous inference (a topic which I have touched in <a href="https://vgherard.github.io/#category:Selective_Inference">other places in this blog</a>). Avoiding them is not the only valid solution - if you want to learn about some proper method you may give a look into <a href="https://en.wikipedia.org/wiki/Sequential_analysis">Sequential Hypothesis Testing</a>, a topic that I may explore in future posts. Here my goal is to understand the <em>consequences of naive repeated checking</em>, which can be easily found out through simulation.</p>
</section>
<section id="whats-the-matter-with-repeated-checks" class="level2">
<h2 class="anchored" data-anchor-id="whats-the-matter-with-repeated-checks">What’s the matter with repeated checks?</h2>
<p>To understand why problems can arise, recall that the classical Frequentist framework <sup>1</sup> operates by providing <em>a priori</em> guarantees (bounds) on the probabilities of <sup>2</sup>:</p>
<ul>
<li>A false positive outcome in the absence of any signal: rejecting the null hypothesis when this is actually true.</li>
<li>A false negative outcome in the presence of some (well-defined) signal.</li>
</ul>
<p>The <em>a priori</em> nature of these guarantees means that they are stipulated before running the experiment and assuming a certain experimental <em>schedule</em> <sup>3</sup>. This implies that any departure from the original schedule can in principle invalidate the claimed False Positive Rate (FPR) and False Negative Rate (FNR).</p>
<p>For instance, the most basic experimental schedule (actually the one implicitly assumed by virtually all <a href="https://www.google.com/search?q=sample+size+calculator">sample size calculators</a> ) is:</p>
<ol type="1">
<li>Collect data until reaching a prefixed sample size.</li>
<li>Run an hypothesis test (with a prefixed significance threshold for claiming a signal).</li>
</ol>
<p>Common examples of departures from the original schedule include:</p>
<ul>
<li>Running several tests on partial data (before reaching the established sample size), to look for an early signal.</li>
<li>Stopping the experiment beforehand, because partial data doesn’t show any signal.</li>
<li>Prolonging the experiment after reaching the established sample size, because there’s a “hint” to a signal, but the significance threshold was not reached.</li>
</ul>
<p>In what follows, I will focus on the first behavior, whose result is to inflate the FPR. Again, there are various ways to perform repeated checks while keeping the FPR under control, but that’s not the focus of this post. Instead, I want to understand how FPR is affected when <em>the same test is repeated several times</em> on partial data.</p>
</section>
<section id="example" class="level2">
<h2 class="anchored" data-anchor-id="example">Example</h2>
<p>Let me illustrate the idea with an imaginary marketing experiment. Suppose you are optimizing an advertising campaign, say you want to test whether a new ad design performs better than the existing one in terms of click through rates. You start sending batches of two thousands ads<sup>4</sup> to randomized users, half using the new design and half using the old one.</p>
<p>If the new design does actually perform better, you want to fully switch to it as soon as possible, so that after each batch send, you compare the click through rates of all ads sent so far, with the idea of switching <em>as soon as a statistically significant improvement is observed</em>.</p>
<p>Concretely, you propose to do the following:</p>
<ol type="1">
<li>At each step, calculate the click through rates for the new and old designs.</li>
<li>Compute a <img src="https://latex.codecogs.com/png.latex?p">-value for the hypothesis test<sup>5</sup> that tests whether the new design leads to an higher click through rate than the old one.</li>
<li>If the <img src="https://latex.codecogs.com/png.latex?p">-value is smaller than a certain fixed threshold <img src="https://latex.codecogs.com/png.latex?%5Calpha">, stop the experiment and declare the new design as the winner.</li>
<li>If no <img src="https://latex.codecogs.com/png.latex?p">-value smaller than <img src="https://latex.codecogs.com/png.latex?%5Calpha"> is observed after a certain number <img src="https://latex.codecogs.com/png.latex?n"> of iterations, stop the experiment and declare the old design as the winner.</li>
</ol>
<p>Now, the question is: how often would the above procedure declare the new design as the winner, if it doesn’t truly perform better than the old one? (<em>i.e.</em> what is the FPR of the whole procedure?)</p>
</section>
<section id="simulation" class="level2">
<h2 class="anchored" data-anchor-id="simulation">Simulation</h2>
<p>To compute the FPR, we assume that both the new and old designs have in fact the <em>same</em> click through rate <img src="https://latex.codecogs.com/png.latex?p%20=%2010%20%5C%25">. The following function generates a sequence of <img src="https://latex.codecogs.com/png.latex?n"> consecutive <img src="https://latex.codecogs.com/png.latex?p">-values, computed as described above, that one could observe under these circumstances:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">generate_p_values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># maximum number of iterations</span></span>
<span id="cb1-2">                                                            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e3</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ad sends per batch</span></span>
<span id="cb1-3">                                                            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">p =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># true common click through rate</span></span>
<span id="cb1-4">                                                            ) </span>
<span id="cb1-5">    {</span>
<span id="cb1-6">    successes_a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cumsum</span>( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbinom</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> size, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob =</span> p) )  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># clicks old ad</span></span>
<span id="cb1-7">    successes_b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cumsum</span>( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbinom</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> size, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob =</span> p) )  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># clicks new ad</span></span>
<span id="cb1-8">    </span>
<span id="cb1-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n, \(k) {</span>
<span id="cb1-10">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prop.test</span>(</span>
<span id="cb1-11">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(successes_a[k], successes_b[k]), </span>
<span id="cb1-12">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> k <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> size <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), </span>
<span id="cb1-13">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alternative =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"greater"</span>,</span>
<span id="cb1-14">            )<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>p.value</span>
<span id="cb1-15">    })</span>
<span id="cb1-16">}</span></code></pre></div>
</div>
<p>For instance:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">999</span>)</span>
<span id="cb2-2">( p_example <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">generate_p_values</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.4704229 0.3932333 0.1669308 0.2219066 0.2592812</code></pre>
</div>
</div>
<p>The function below evaluates such a sequence of <img src="https://latex.codecogs.com/png.latex?p">-values with a fixed threshold <img src="https://latex.codecogs.com/png.latex?%5Calpha">:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">evaluate_p_values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(p, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">checkpoints =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_along</span>(p)) {</span>
<span id="cb4-2">    p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> p[checkpoints]</span>
<span id="cb4-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.logical</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cumsum</span>(p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> alpha))</span>
<span id="cb4-4">}</span></code></pre></div>
</div>
<p>For instance, with <img src="https://latex.codecogs.com/png.latex?%5Calpha%20=%2020%5C%25">, the sequence above would lead to a (false) positive result, which would be claimed at the third check. Output looks as follows:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">evaluate_p_values</span>(p_example, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE FALSE  TRUE  TRUE  TRUE</code></pre>
</div>
</div>
<p>Let me now simulate a large number of such “experiments”. I will fix <img src="https://latex.codecogs.com/png.latex?%5Calpha%20=%205%5C%25">, a popular choice:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">840</span>)</span>
<span id="cb7-2">sim_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replicate</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e4</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">generate_p_values</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">evaluate_p_values</span>())</span></code></pre></div>
</div>
<p>The result is a matrix whose columns are logical vectors such as the one above:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">sim_data[,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [25] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [37] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [49] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [61] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [73] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [85] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [97] FALSE FALSE FALSE FALSE</code></pre>
</div>
</div>
<p>(a true negative result). Hence, the averages of this matrix rows provide the false positive rates after <img src="https://latex.codecogs.com/png.latex?n"> checks:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">fpr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowMeans</span>(sim_data)</span>
<span id="cb10-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(fpr, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"l"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Checks"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"False Positive Rate"</span>)</span>
<span id="cb10-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">h =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lty =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dashed"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vgherard.github.io/posts/2023-07-24-ab-tests-and-repeated-checks/ab-tests-and-repeated-checks_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>The curve above shows how the FPR depends on the number of checks performed, according to the procedure described in the previous section. For a single check, this coincides with FPR of an individual binomial test<sup>6</sup>. However, allowing for repeated checks, we see that the overall FPR steadily increases with number of checks. With <img src="https://latex.codecogs.com/png.latex?n%20=%203"> checks, the FPR is already close to <img src="https://latex.codecogs.com/png.latex?10%20%5C%25">, almost twice the nominal FPR of each individual test:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">fpr[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.0929</code></pre>
</div>
</div>
<p>With <img src="https://latex.codecogs.com/png.latex?n%20%5Capprox%2040"> checks, the FPR is about <img src="https://latex.codecogs.com/png.latex?25%20%5C%25">, the same FPR of an experiment that involves tossing a coin twice, declaring it biased if the result is two consecutive “tails”.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">fpr[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.2471</code></pre>
</div>
</div>
<p>Here we are assuming that data is re-checked after the arrival of every single batch, but there are of course infinite alternative possibilities. For instance, the plot below shows what happens when checks are performed after the collection of <img src="https://latex.codecogs.com/png.latex?n%20=%201,%20%5C,4,%20%5C,16,%20%5C,64"> batches of data (at each checkpoint, the expected size of statistical fluctuations is reduced by a factor of <img src="https://latex.codecogs.com/png.latex?2">).</p>
<div class="cell" data-code_folding="true">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">checkpoints <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>)</span>
<span id="cb15-2"></span>
<span id="cb15-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">840</span>)</span>
<span id="cb15-4">fpr2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replicate</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e4</span>, </span>
<span id="cb15-5">                    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">generate_p_values</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb15-6">                        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">evaluate_p_values</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">checkpoints =</span> checkpoints)</span>
<span id="cb15-7">                    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb15-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowMeans</span>()</span>
<span id="cb15-9"></span>
<span id="cb15-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(fpr2, </span>
<span id="cb15-11">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, </span>
<span id="cb15-12">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Checks"</span>, </span>
<span id="cb15-13">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"False Positive Rate"</span>, </span>
<span id="cb15-14">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xaxt =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span></span>
<span id="cb15-15">         )</span>
<span id="cb15-16"></span>
<span id="cb15-17"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">h =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lty =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dashed"</span>)</span>
<span id="cb15-18"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">axis</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">at =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_along</span>(checkpoints))</span>
<span id="cb15-19"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">axis</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">at =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_along</span>(checkpoints), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(checkpoints, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"K"</span>))</span>
<span id="cb15-20"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mtext</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sample Size"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">side =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">line =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vgherard.github.io/posts/2023-07-24-ab-tests-and-repeated-checks/ab-tests-and-repeated-checks_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>As a third possible variation, we may think of applying different <img src="https://latex.codecogs.com/png.latex?p">-value thresholds at different checks (a scheme that can be actually made to work in practice, see for instance the Wikipedia article on the <a href="https://en.wikipedia.org/wiki/Haybittle%E2%80%93Peto_boundary">Haybittle–Peto boundary</a>). The following plot illustrates this, assuming three (equally spaced) checks after the collection of <img src="https://latex.codecogs.com/png.latex?n%20=%201,%5C,2,%5C,3"> data batches, using the significance thresholds <img src="https://latex.codecogs.com/png.latex?%5Calpha%20=%200.01,%20%5C,0.025,%20%5C,0.05">, respectively.</p>
<div class="cell" data-code_folding="true">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">840</span>)</span>
<span id="cb16-2"></span>
<span id="cb16-3">alpha <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.025</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>)</span>
<span id="cb16-4"></span>
<span id="cb16-5">fpr3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replicate</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e5</span>, </span>
<span id="cb16-6">                    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">generate_p_values</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb16-7">                        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">evaluate_p_values</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> alpha)</span>
<span id="cb16-8">                    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb16-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowMeans</span>()</span>
<span id="cb16-10"></span>
<span id="cb16-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(fpr3, </span>
<span id="cb16-12">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, </span>
<span id="cb16-13">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Checks"</span>, </span>
<span id="cb16-14">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"False Positive Rate"</span>, </span>
<span id="cb16-15">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xaxt =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span></span>
<span id="cb16-16">         )</span>
<span id="cb16-17"></span>
<span id="cb16-18"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">h =</span> alpha[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lty =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dashed"</span>)</span>
<span id="cb16-19"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">h =</span> alpha[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lty =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dashed"</span>)</span>
<span id="cb16-20"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">axis</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">at =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_along</span>(fpr3))</span>
<span id="cb16-21"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">axis</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">at =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_along</span>(fpr3), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> alpha)</span>
<span id="cb16-22"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mtext</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"p-value threshold"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">side =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">line =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vgherard.github.io/posts/2023-07-24-ab-tests-and-repeated-checks/ab-tests-and-repeated-checks_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="conclusions" class="level2">
<h2 class="anchored" data-anchor-id="conclusions">Conclusions</h2>
<p>This post illustrated quantitatively how the performance of repeated checks during the process of data collection can affect the overall False Positive Rate of an experimental analysis. The code provided above can be easily adapted to simulate other types of experiments and schemes for interim checks.</p>
<p>A question that may possibly arise is: <em>should I really care?</em> You could argue that what I’ve shown here represents a simple trade-off between FPR on one side, FNR and efficiency (speed) in detection of a signal on the other.</p>
<p>My answer is a resounding <em>yes</em>, irrespective of whether you are running experiments for purely scientific or utilitaristic purposes. If you are unable to characterize (at least approximately) the FPR and FNR of your analysis, the whole point of running a formal test looks very dubious to me. You may as well simply collect some data and draw an educated guess.</p>
<p>Other story is if you are able to tell <em>in advance</em> how interim checks affect FPR/FNR, and use this knowledge to optimize your analysis strategy. This note provides some clues on how to do so.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I move within this framework because it is the only one I’m reasonably comfortable with, and for which I have a decent understanding of the decision dynamics that follow from it. That said, I suspect that also Bayesian hypothesis testing can be affected by the kind of issues discussed here, although perhaps in a less transparent way, due to working with formal a posteriori probabilities.↩︎</p></li>
<li id="fn2"><p>The statistical jargon used to indicate these two types of errors, and the corresponding a priori guarantees on their probabilities, sounds very mysterious to me (Type I/II errors, size and power…). I like to think in terms of “False Positive” and “False Negative” rates, which is the same thing.↩︎</p></li>
<li id="fn3"><p>This is generally true, also in the aforementioned sequential settings. In that case, the difference is that the schedule takes into account that continuous and/or interim checks will be performed.↩︎</p></li>
<li id="fn4"><p>The actual numbers in this example may be totally unrealistic, but that’s beside the point.↩︎</p></li>
<li id="fn5"><p>Technically, this would be a two-sample, one-sided binomial test.↩︎</p></li>
<li id="fn6"><p>The fact that this is not exactly equal to <img src="https://latex.codecogs.com/png.latex?%5Calpha">, but in fact slightly smaller, is due to the discreteness of the underlying binomial distributions. The <img src="https://latex.codecogs.com/png.latex?p">-value of the binomial test is defined in such a way to satisfy <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BPr%7D(p%20%3C%20%5Calpha)%5Cleq%20%5Calpha">.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{gherardi2023,
  author = {Gherardi, Valerio},
  title = {AB Tests and Repeated Checks},
  date = {2023-07-27},
  url = {https://vgherard.github.io/posts/2023-07-24-ab-tests-and-repeated-checks/ab-tests-and-repeated-checks.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-gherardi2023" class="csl-entry quarto-appendix-citeas">
Gherardi, Valerio. 2023. <span>“AB Tests and Repeated Checks.”</span>
July 27, 2023. <a href="https://vgherard.github.io/posts/2023-07-24-ab-tests-and-repeated-checks/ab-tests-and-repeated-checks.html">https://vgherard.github.io/posts/2023-07-24-ab-tests-and-repeated-checks/ab-tests-and-repeated-checks.html</a>.
</div></div></section></div> ]]></description>
  <category>AB testing</category>
  <category>Sequential Hypothesis Testing</category>
  <category>Frequentist Methods</category>
  <category>Statistics</category>
  <category>R</category>
  <guid>https://vgherard.github.io/posts/2023-07-24-ab-tests-and-repeated-checks/ab-tests-and-repeated-checks.html</guid>
  <pubDate>Wed, 26 Jul 2023 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Testing functional specification in linear regression</title>
  <dc:creator>Valerio Gherardi</dc:creator>
  <link>https://vgherard.github.io/posts/2023-07-11-testing-functional-specification-in-linear-regression/testing-functional-misspecification-in-linear-regression.html</link>
  <description><![CDATA[ 





<p>Another one from the series on “misspecified regression models” (started with <a href="https://vgherard.github.io/posts/2023-05-14-model-misspecification-and-linear-sandwiches/">Model Misspecification and Linear Sandwiches</a>).</p>
<section id="intro" class="level2">
<h2 class="anchored" data-anchor-id="intro">Intro</h2>
<p>Lately I’ve been messing around with the <a href="https://cran.r-project.org/web/packages/lmtest/index.html"><code>{lmtest}</code></a> R package, a nice collection of hypothesis tests for classical linear model assumptions: <em>linearity</em> (of course) and <em>heteroskedasticity</em> (<img src="https://latex.codecogs.com/png.latex?X">-independence of the conditional variance).</p>
<p>Just to clarify, here the relevant “linearity” assumption is that the conditional mean <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20E%20(Y%5Cvert%20X)"> is given by a linear combination of <em>known functions</em> <img src="https://latex.codecogs.com/png.latex?f_i"> of <img src="https://latex.codecogs.com/png.latex?X">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbb%20E%20(Y%5Cvert%20X)%20=%20%5Csum%20_%7Bi%20=%201%7D%5Ep%20%5Calpha_if_i(X),%0A"> Testing “linearity” (or, as the title goes, “functional specification”) refers to testing that the chosen set of functions <img src="https://latex.codecogs.com/png.latex?%5C%7Bf_%7Bi%7D%5C%7D_%7Bi=1,%5Cdots,p%7D"> provide a valid description of the data generating process.</p>
</section>
<section id="first-attempt-residual-autocorrelation" class="level2">
<h2 class="anchored" data-anchor-id="first-attempt-residual-autocorrelation">First attempt: residual autocorrelation</h2>
<p>My initial intuition was that it should be possible to test functional specification through the following procedure:</p>
<ul>
<li>Perform linear regression with the specified functional form.</li>
<li>Order the residuals according to the corresponding values of <img src="https://latex.codecogs.com/png.latex?X"><sup>1</sup>.</li>
<li>Test for serial correlation (e.g.&nbsp;performing a Durbin-Watson test, <code>lmtest::dwtest</code>) on the series of ordered residuals.</li>
</ul>
<p>The idea is quite simple: if residuals exhibit some systematic pattern when plotted against <img src="https://latex.codecogs.com/png.latex?X">, then for close values of <img src="https://latex.codecogs.com/png.latex?X">, residuals should also tend to be close, leading to a positive correlation. For example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">840</span>)</span>
<span id="cb1-2">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e2</span>)</span>
<span id="cb1-3">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x))</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(x, y)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abline</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x))</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vgherard.github.io/posts/2023-07-11-testing-functional-specification-in-linear-regression/testing-functional-misspecification-in-linear-regression_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>This, I suspect, is the reason why functions such as <code>lmtest::dwtest()</code> have an <code>order.by</code> argument which precisely allows to sort residuals before performing the test.</p>
<p>Unfortunately, it turns out that such a method is not only sensitive to functional misspecification, but also to heteroskedasticity - as one can quickly verify by running a simulation using <code>lmtest::dwtest()</code>.</p>
<p>The overall idea is interesting, and works for homoskedastic noise, but the limitation to constant variance may be a bit too stringent. For this reason I turned to a second method, which also allows to take into account the possibility of heteroskedastic noise.</p>
</section>
<section id="second-attempt-reset-heteroskedastic-consistent-variance-estimates" class="level2">
<h2 class="anchored" data-anchor-id="second-attempt-reset-heteroskedastic-consistent-variance-estimates">Second attempt: RESET + Heteroskedastic Consistent variance estimates</h2>
<p>The idea of RESET tests (see <code>?lmtest::resettest()</code>) is also quite simple: if the linear model is correct, there should be relatively little gain in adding additional non-linear functions of the original covariates to the fit’s formula.</p>
<p>The statistical significance of these model adjustments can be tested through a standard <img src="https://latex.codecogs.com/png.latex?Z">-test (or <img src="https://latex.codecogs.com/png.latex?F">-test, for multiple adjustments at once), with an important catch: the covariance matrix of regression coefficients used in these tests can be chosen to be robust to heteroskedasticity (see <a href="https://vgherard.github.io/posts/2023-05-14-model-misspecification-and-linear-sandwiches/">Model Misspecification and Linear Sandwiches</a>).</p>
<p>The code that follows illustrates this procedure with an example dataset. The following section contains a more in-depth simulation study of the property of the RESET test.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">fit_cars <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(dist <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> speed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> cars)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> cars, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(speed, dist))</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abline</span>(fit_cars)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vgherard.github.io/posts/2023-07-11-testing-functional-specification-in-linear-regression/testing-functional-misspecification-in-linear-regression_files/figure-html/fit_cars-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">lmtest<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">resettest</span>(fit_cars, </span>
<span id="cb3-2">                                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"regressor"</span>, </span>
<span id="cb3-3">                                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">power =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb3-4">                                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vcov =</span> sandwich<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vcovHC</span>
<span id="cb3-5">                                    )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
    RESET test

data:  fit_cars
RESET = 2.32, df1 = 1, df2 = 48, p-value = 0.1344</code></pre>
</div>
</div>
<p>Unfortunately, the output of <code>lmtest::resettest</code> does not include the results of the extended fit, which can be useful to understand the <em>impact</em> of the omitted covariates on the overall model picture (independently of the RESET <img src="https://latex.codecogs.com/png.latex?p">-value under the null hypothesis). <sup>2</sup></p>
<p>In order to get some insight on the effect of misspecification, we need to manually perform the RESET fit and make the relevant comparisons:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">fit_cars_sq <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(dist <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> speed <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">I</span>(speed<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>speed), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> cars)</span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> cars, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(speed, dist))</span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abline</span>(fit_cars)</span>
<span id="cb5-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lines</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> cars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>speed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fitted</span>(fit_cars_sq), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vgherard.github.io/posts/2023-07-11-testing-functional-specification-in-linear-regression/testing-functional-misspecification-in-linear-regression_files/figure-html/fit_cars_sq-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="reset-hc-vcov-a-simulation-study" class="level2">
<h2 class="anchored" data-anchor-id="reset-hc-vcov-a-simulation-study">RESET + HC vcov: a simulation study</h2>
<p>We consider a univariate regression problem, with a regressor <img src="https://latex.codecogs.com/png.latex?X%20%5Csim%20%5Cmathcal%20N%20(0,1)">, a and a response <img src="https://latex.codecogs.com/png.latex?Y">. We will consider three ground truth distributions for <img src="https://latex.codecogs.com/png.latex?Y"> given <img src="https://latex.codecogs.com/png.latex?X">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bsplit%7D%0A%5Ctext%7BT1%7D:&amp;%20%5Cqquad%20Y=%5Cfrac%7B1%7D%7B5%7DX+Z%5C%5C%0A%5Ctext%7BT2%7D:&amp;%20%5Cqquad%20Y=%5Cfrac%7B1%7D%7B5%7DX%20+%20%5Cvert%20X%20%5Cvert%20Z%5C%5C%0A%5Ctext%7BT3%7D:&amp;%20%5Cqquad%20Y=%5Cfrac%7B1%7D%7B5%7DX%5E3%20+%20Z%0A%5Cend%7Bsplit%7D%0A"> where <img src="https://latex.codecogs.com/png.latex?Z%5Csim%20%5Cmathcal%20N%20(0,1)"> is independent from <img src="https://latex.codecogs.com/png.latex?X">. We will study, through simulation, the <img src="https://latex.codecogs.com/png.latex?p">-value distribution of the RESET test for linear regression based on the model <img src="https://latex.codecogs.com/png.latex?Y%20=%20q+m%20X%20+%20%5Cvarepsilon">, where <img src="https://latex.codecogs.com/png.latex?q"> and <img src="https://latex.codecogs.com/png.latex?m"> are unknown coefficients, and <img src="https://latex.codecogs.com/png.latex?%5Cepsilon"> is a noise term with unknown variance. It follows that the model is correctly specified with respect to <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BT1%7D">, has functional misspecification with respect to <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BT3%7D">, and potentially noise misspecification<sup>3</sup> with respect to <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BT2%7D">, if we model variance as being independent of <img src="https://latex.codecogs.com/png.latex?X">.</p>
<p>Data will consist of independent samples <img src="https://latex.codecogs.com/png.latex?(X_i,%20Y_i)"> from the joint distribution of <img src="https://latex.codecogs.com/png.latex?X"> and <img src="https://latex.codecogs.com/png.latex?Y">. To facilitate simulation, we define some helpers in the code chunk below.</p>
<div class="cell" data-code_folding="true">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Helper to generate data with prescribed: </span></span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' * Regressor distribution: `x`</span></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' * Response conditional mean: `f`</span></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' * Response conditional noise: `eps` </span></span>
<span id="cb6-5">dgp_fun <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, f, eps) {</span>
<span id="cb6-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(n) {</span>
<span id="cb6-7">        .x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span>(n)</span>
<span id="cb6-8">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> .x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(.x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eps</span>(.x))</span>
<span id="cb6-9">    }</span>
<span id="cb6-10">}</span>
<span id="cb6-11"></span>
<span id="cb6-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Helper to simulate results of linear regression, with prescribed:</span></span>
<span id="cb6-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' * Data generating process: `dgp`</span></span>
<span id="cb6-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' * Sample size of simulated datasets: `n`</span></span>
<span id="cb6-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' * Summary function (e.g. p-value of RESET test): `summarize_fun`</span></span>
<span id="cb6-16">lm_simulate <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(dgp, n, summarize_fun, nsim, simplify) {</span>
<span id="cb6-17">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replicate</span>(nsim, {</span>
<span id="cb6-18">        data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dgp</span>(n)</span>
<span id="cb6-19">        fit <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x, data)</span>
<span id="cb6-20">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize_fun</span>(fit)</span>
<span id="cb6-21">    }, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">simplify =</span> simplify)</span>
<span id="cb6-22">} </span>
<span id="cb6-23"></span>
<span id="cb6-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Helper to perform RESET test on a `lm` fit object, and plot the p-value</span></span>
<span id="cb6-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' distribution. The estimator for regression coefficients variance-covariance</span></span>
<span id="cb6-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' matrix can be set through the `vcov` argument.</span></span>
<span id="cb6-27">reset_pvalue <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(</span>
<span id="cb6-28">        dgp, n,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Data generating process params</span></span>
<span id="cb6-29">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">power =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"regressor"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vcov =</span> sandwich<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vcovHC,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># RESET params</span></span>
<span id="cb6-30">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nsim =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e3</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulation params</span></span>
<span id="cb6-31">        ) </span>
<span id="cb6-32">{</span>
<span id="cb6-33">    summarize_fun <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(fit)</span>
<span id="cb6-34">        lmtest<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">resettest</span>(fit, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">power =</span> power, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> type, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vcov =</span> vcov)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>p.value</span>
<span id="cb6-35">    </span>
<span id="cb6-36">    p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm_simulate</span>(</span>
<span id="cb6-37">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dgp =</span> dgp, </span>
<span id="cb6-38">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> n, </span>
<span id="cb6-39">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">summarize_fun =</span> summarize_fun, </span>
<span id="cb6-40">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nsim =</span> nsim,</span>
<span id="cb6-41">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">simplify =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb6-42">        )</span>
<span id="cb6-43">    </span>
<span id="cb6-44">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb6-45">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">p =</span> p,</span>
<span id="cb6-46">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dgp =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">deparse</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">substitute</span>(dgp)),</span>
<span id="cb6-47">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> n,</span>
<span id="cb6-48">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vcov =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">deparse</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">substitute</span>(vcov)),</span>
<span id="cb6-49">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nsim =</span> nsim</span>
<span id="cb6-50">    ))</span>
<span id="cb6-51">    </span>
<span id="cb6-52">}</span></code></pre></div>
</details>
</div>
<p>Furthermore, we will use:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span></code></pre></div>
</div>
<p>for plotting.</p>
<section id="data-generating-processes" class="level3">
<h3 class="anchored" data-anchor-id="data-generating-processes">Data generating processes</h3>
<p>The data generating processes can be defined as follows:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">dgp_t1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dgp_fun</span>(</span>
<span id="cb8-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> rnorm,</span>
<span id="cb8-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">f =</span> \(x) <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x,</span>
<span id="cb8-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">eps =</span> \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x))</span>
<span id="cb8-5">)</span>
<span id="cb8-6"></span>
<span id="cb8-7">dgp_t2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dgp_fun</span>(</span>
<span id="cb8-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> rnorm,</span>
<span id="cb8-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">f =</span> \(x) <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x,</span>
<span id="cb8-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">eps =</span> \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x))</span>
<span id="cb8-11">)</span>
<span id="cb8-12"></span>
<span id="cb8-13">dgp_t3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dgp_fun</span>(</span>
<span id="cb8-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> rnorm,</span>
<span id="cb8-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">f =</span> \(x) <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb8-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">eps =</span> \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x))</span>
<span id="cb8-17">)</span></code></pre></div>
</div>
<p>Data generated according to these three distributions looks as follows:</p>
<div class="cell" data-code_folding="true">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(</span>
<span id="cb9-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dgp_t1</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dgp =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dgp_t1"</span>),</span>
<span id="cb9-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dgp_t2</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dgp =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dgp_t2"</span>),</span>
<span id="cb9-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dgp_t3</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dgp =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dgp_t3"</span>),</span>
<span id="cb9-5">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb9-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-7">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-8">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">formula =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">se =</span> F) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-9">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_grid</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> dgp)</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vgherard.github.io/posts/2023-07-11-testing-functional-specification-in-linear-regression/testing-functional-misspecification-in-linear-regression_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="reset-p-value-distributions" class="level3">
<h3 class="anchored" data-anchor-id="reset-p-value-distributions">RESET <img src="https://latex.codecogs.com/png.latex?p">-value distributions</h3>
<p>The RESET <img src="https://latex.codecogs.com/png.latex?p">-value cumulative distributions for the three ground truths <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BT1%7D">, <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BT2%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BT3%7D"> are shown below <sup>4</sup>. The <img src="https://latex.codecogs.com/png.latex?y"> coordinates of these plots can be interpreted as follows:</p>
<ul>
<li><p>For the ground truths <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BT1%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BT2%7D">, <img src="https://latex.codecogs.com/png.latex?y"> represents the false positive rate (or Type I Error Rate) in rejecting the null hypothesis “no functional misspecification” at a given size of the test <img src="https://latex.codecogs.com/png.latex?x">. For a valid <img src="https://latex.codecogs.com/png.latex?p">-value, these curves should lie on or below the straight line <img src="https://latex.codecogs.com/png.latex?y%20=%20x">.</p></li>
<li><p>For the ground truth <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BT3%7D">, <img src="https://latex.codecogs.com/png.latex?y"> represents the Power (or one minus the Type II Error Rate) in detecting functional misspecification at a given size <img src="https://latex.codecogs.com/png.latex?x">. High values correspond to high sensitivity.</p></li>
</ul>
<div class="cell" data-code_folding="true">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">sim_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(</span>
<span id="cb10-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reset_pvalue</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dgp =</span> dgp_t1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vcov =</span> sandwich<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vcovHC),</span>
<span id="cb10-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reset_pvalue</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dgp =</span> dgp_t1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vcov =</span> sandwich<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vcovHC),</span>
<span id="cb10-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reset_pvalue</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dgp =</span> dgp_t1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vcov =</span> sandwich<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vcovHC),</span>
<span id="cb10-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reset_pvalue</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dgp =</span> dgp_t1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vcov =</span> sandwich<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vcovHC),</span>
<span id="cb10-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reset_pvalue</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dgp =</span> dgp_t1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vcov =</span> stats<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vcov),</span>
<span id="cb10-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reset_pvalue</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dgp =</span> dgp_t1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vcov =</span> stats<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vcov),</span>
<span id="cb10-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reset_pvalue</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dgp =</span> dgp_t1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vcov =</span> stats<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vcov),</span>
<span id="cb10-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reset_pvalue</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dgp =</span> dgp_t1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vcov =</span> stats<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vcov),</span>
<span id="cb10-10">    </span>
<span id="cb10-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reset_pvalue</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dgp =</span> dgp_t2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vcov =</span> sandwich<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vcovHC),</span>
<span id="cb10-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reset_pvalue</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dgp =</span> dgp_t2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vcov =</span> sandwich<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vcovHC),</span>
<span id="cb10-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reset_pvalue</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dgp =</span> dgp_t2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vcov =</span> sandwich<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vcovHC),</span>
<span id="cb10-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reset_pvalue</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dgp =</span> dgp_t2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vcov =</span> sandwich<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vcovHC),</span>
<span id="cb10-15">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reset_pvalue</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dgp =</span> dgp_t2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vcov =</span> stats<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vcov),</span>
<span id="cb10-16">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reset_pvalue</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dgp =</span> dgp_t2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vcov =</span> stats<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vcov),</span>
<span id="cb10-17">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reset_pvalue</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dgp =</span> dgp_t2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vcov =</span> stats<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vcov),</span>
<span id="cb10-18">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reset_pvalue</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dgp =</span> dgp_t2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vcov =</span> stats<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vcov),</span>
<span id="cb10-19">    </span>
<span id="cb10-20">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reset_pvalue</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dgp =</span> dgp_t3, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vcov =</span> sandwich<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vcovHC),</span>
<span id="cb10-21">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reset_pvalue</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dgp =</span> dgp_t3, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vcov =</span> sandwich<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vcovHC),</span>
<span id="cb10-22">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reset_pvalue</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dgp =</span> dgp_t3, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vcov =</span> sandwich<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vcovHC),</span>
<span id="cb10-23">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reset_pvalue</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dgp =</span> dgp_t3, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vcov =</span> sandwich<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vcovHC),</span>
<span id="cb10-24">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reset_pvalue</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dgp =</span> dgp_t3, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vcov =</span> stats<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vcov),</span>
<span id="cb10-25">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reset_pvalue</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dgp =</span> dgp_t3, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vcov =</span> stats<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vcov),</span>
<span id="cb10-26">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reset_pvalue</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dgp =</span> dgp_t3, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vcov =</span> stats<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vcov),</span>
<span id="cb10-27">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reset_pvalue</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dgp =</span> dgp_t3, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vcov =</span> stats<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vcov)</span>
<span id="cb10-28">)</span>
<span id="cb10-29"></span>
<span id="cb10-30">sim_data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb10-31">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_label =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>, n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" = "</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb10-32">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(p, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> vcov)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb10-33">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stat_ecdf</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb10-34">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_discrete</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vcov"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb10-35">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"p-value"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb10-36">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Empirical CDF"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb10-37">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_abline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">slope =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">intercept =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dashed"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb10-38">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_grid</span>(n_label <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> dgp, ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb10-39">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggtitle</span>(</span>
<span id="cb10-40">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"p-value distribution of RESET test"</span>,</span>
<span id="cb10-41">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nsim"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(sim_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>nsim), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" = "</span>)</span>
<span id="cb10-42">            )</span></code></pre></div>
</details>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vgherard.github.io/posts/2023-07-11-testing-functional-specification-in-linear-regression/testing-functional-misspecification-in-linear-regression_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>The plots illustrate qualitatively the behavior of the RESET test with and without the <code>vcov</code> correction for noise heteroskedasticity. Various remarks:</p>
<ol type="1">
<li><p>The test with the standard <code>stats::vcov</code> estimator is sensitive not only to pure functional misspecification (<img src="https://latex.codecogs.com/png.latex?%5Ctext%7BT3%7D">), but also to pure heteroskedastic noise (<img src="https://latex.codecogs.com/png.latex?%5Ctext%7BT2%7D">).</p></li>
<li><p>The <code>sandwich::vcovHC</code> estimator leads to an asymptotically correct Type I Error Rate in the <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BT2%7D"> case, but to a somewhat lower sensitivity (with respect to <code>stats::vcov</code>) in the <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BT3%7D"> case.</p></li>
<li><p>We need to keep in mind that <code>sandwich::vcovHC</code> only provides <em>asymptotically</em> correct variance-covariance estimates. Thus, for small <img src="https://latex.codecogs.com/png.latex?n">, the <img src="https://latex.codecogs.com/png.latex?p">-value distribution of the RESET test using the <code>sandwich::vcovHC</code> can also be distorted (even in the perfectly specified case <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BT1%7D">).</p></li>
</ol>
</section>
</section>
<section id="conclusions" class="level2">
<h2 class="anchored" data-anchor-id="conclusions">Conclusions</h2>
<p>This post explained how to perform model validation checks that are sensitive to functional misspecification, but relatively robust to heteroskedasticity.</p>
<p>The general idea is to extend the original model, allowing for more general functional forms in the conditional mean of the response, and test whether such extension significantly improves the fit. The catch is that, when performing the latter test, we need to somehow keep into account the possibility of heteroskedastic noise.</p>
<p>This idea is readily implemented with RESET tests for linear models: one can simply use a variance-covariance estimator for regression coefficients that is robust to heteroskedasticity. In R, this can be achieved with a single line of code, using <code>lmtest::resettest(vcov = sandwich::vcovHC)</code>.</p>
<p>With some effort, one may be able to generalize such a procedure to any parametric model fitted by Maximum Likelihood Estimation, since a sandwich estimator is available also in this more general case (see <em>e.g.</em> the presentation of sandwich estimators in this <a href="https://www.tandfonline.com/doi/abs/10.1198/000313006X152207">paper by D.A. Freedman</a>).</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Here I’m implicitly assuming that we have a single <img src="https://latex.codecogs.com/png.latex?X">, but a similar logic should also apply to multivariate regression.↩︎</p></li>
<li id="fn2"><p>With enough data, the RESET test would likely test positive for a variety of misspecifications, but that doesn’t mean that such misspecification are necessarily relevant from a modeling perspective. Here, for instance, a large coefficient for <img src="https://latex.codecogs.com/png.latex?%5Ctext%7B(speed)%7D%5E2"> with a <img src="https://latex.codecogs.com/png.latex?Z">-score of two <img src="https://latex.codecogs.com/png.latex?%5Csigma">s could be more worrying than a minuscule coefficient with a <img src="https://latex.codecogs.com/png.latex?Z">-score of five <img src="https://latex.codecogs.com/png.latex?%5Csigma">s.↩︎</p></li>
<li id="fn3"><p>Sometimes also referred to as “second order misspecification”.↩︎</p></li>
<li id="fn4"><p>The code is a bit unelegant 😬 but it works.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{gherardi2023,
  author = {Gherardi, Valerio},
  title = {Testing Functional Specification in Linear Regression},
  date = {2023-07-11},
  url = {https://vgherard.github.io/posts/2023-07-11-testing-functional-specification-in-linear-regression/testing-functional-misspecification-in-linear-regression.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-gherardi2023" class="csl-entry quarto-appendix-citeas">
Gherardi, Valerio. 2023. <span>“Testing Functional Specification in
Linear Regression.”</span> July 11, 2023. <a href="https://vgherard.github.io/posts/2023-07-11-testing-functional-specification-in-linear-regression/testing-functional-misspecification-in-linear-regression.html">https://vgherard.github.io/posts/2023-07-11-testing-functional-specification-in-linear-regression/testing-functional-misspecification-in-linear-regression.html</a>.
</div></div></section></div> ]]></description>
  <category>Statistics</category>
  <category>Model Misspecification</category>
  <category>Regression</category>
  <category>Linear Models</category>
  <category>R</category>
  <guid>https://vgherard.github.io/posts/2023-07-11-testing-functional-specification-in-linear-regression/testing-functional-misspecification-in-linear-regression.html</guid>
  <pubDate>Mon, 10 Jul 2023 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Linear regression with autocorrelated noise</title>
  <dc:creator>Valerio Gherardi</dc:creator>
  <link>https://vgherard.github.io/posts/2023-05-20-linear-regression-with-autocorrelated-noise/linear-regression-with-autocorrelated-noise.html</link>
  <description><![CDATA[ 





<p>Consider two time series <img src="https://latex.codecogs.com/png.latex?Y_t"> and <img src="https://latex.codecogs.com/png.latex?X_t"> such that:</p>
<p><span id="eq-y-vs-x"><img src="https://latex.codecogs.com/png.latex?%0AY_t%20=%20%20X_t%20%5Ccdot%20%5Cbeta+%5Ceta_t%0A%5Ctag%7B1%7D"></span></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Ceta_t"> is <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BAR%7D(1)"> noise:</p>
<p><span id="eq-ar1"><img src="https://latex.codecogs.com/png.latex?%0A%5Ceta_%7Bt+1%7D%20=%20%5Calpha%20%5Ceta_t%20+%20%5Cepsilon_t,%20%5Cqquad%20%5Cepsilon%20_t%20%5Csim%20%5Cmathcal%20N(0,%5Csigma%5E2_0)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%5Ctag%7B2%7D"></span></p>
<p>By iteration of Equation&nbsp;2, we see that <img src="https://latex.codecogs.com/png.latex?%5Ceta_t"> has gaussian <em>unconditional distribution</em>:</p>
<p><span id="eq-ar1-unconditional"><img src="https://latex.codecogs.com/png.latex?%0A%5Ceta_t%20%5Csim%20%5Cmathcal%20N%20(0,%20%5Csigma%20%5E2),%5Cqquad%20%5Csigma%5E2%20%5Cequiv%20%5Cfrac%7B%5Csigma%5E2_0%7D%7B1-%5Calpha%20%5E2%7D%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%5Ctag%7B3%7D"></span> so that individual observations of <img src="https://latex.codecogs.com/png.latex?(X_t,%5C,Y_t)"> are distributed according to a perfectly specified linear model.</p>
<p>This does <em>not</em> mean that, given observational data <img src="https://latex.codecogs.com/png.latex?%5C%7B(X_t,%5C,Y_t)%5C%7D_%7Bt%20=%201,%5C,2,%5C,%5Cdots,%5C,T%7D">, we are allowed to make standard linear model assumptions to perform valid inference on the parameters <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> and <img src="https://latex.codecogs.com/png.latex?%5Csigma"> of Equation&nbsp;1 and Equation&nbsp;3. Since the noise terms <img src="https://latex.codecogs.com/png.latex?%5Ceta%20_t"> are not independent draws from a single distribution, but are rather autocorrelated, the usual OLS variance estimate under linear model assumptions will be biased, as we show below <sup>1</sup>.</p>
<p>It is fairly easy to work out the consequences of autocorrelation. Suppose, more generally, that the error term <img src="https://latex.codecogs.com/png.latex?%5Ceta%20_t"> is a stationary time series with unconditional mean <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20E(%5Ceta_t)=0"> and unconditional variance <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BVar%7D(%5Ceta%20_t)=%5Csigma%20%5E2">. The OLS estimate of <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> is<sup>2</sup>:</p>
<p><span id="eq-ols-beta"><img src="https://latex.codecogs.com/png.latex?%0A%5Chat%20%5Cbeta%20=(%5Cmathbf%20X%5ET%5Cmathbf%20X)%5E%7B-1%7D%5Cmathbf%20X%5ET%5Cmathbf%20Y=%5Cbeta%20+%20(%5Cmathbf%20X%5ET%5Cmathbf%20X)%5E%7B-1%7D%20%5Cmathbf%20X%5ET%20%5Cmathbf%7B%CE%B7%7D,%0A%5Ctag%7B4%7D"></span></p>
<p>which is unbiased since <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20E%20(%5Cmathbf%7B%CE%B7%7D)%20=%200">. The estimate of the noise variance <img src="https://latex.codecogs.com/png.latex?%5Csigma%20%5E2">, on the other hand:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bsplit%7D%0A%5Chat%20%5Csigma%20%5E2%20%20&amp;%20=%20%5Cfrac%7B(%5Cmathbf%20Y%20-%20%5Cmathbf%20X%5Chat%20%5Cbeta)%5ET(%5Cmathbf%20Y%20-%20%5Cmathbf%20X%5Chat%20%5Cbeta)%7D%7BN-p%7D=%20%5Cfrac%7B%5Cmathbf%7B%CE%B7%7D%5ET(%5Cmathbf%201-%5Cmathbf%20H)%5Cmathbf%7B%CE%B7%7D%20%7D%7BN-p%7D%20%5C%5C%0A%5Cmathbb%20E%20(%5Chat%20%5Csigma%20%5E2)%20&amp;%20=%20%5Cdfrac%7B%5Ctext%20%7BTr%7D%5Cleft%5B(%5Cmathbf%201-%20%5Cmathbb%20E(%5Cmathbf%20H))%5Ccdot%20%20%5Ctext%20%7BCor%7D(%5Cmathbf%7B%CE%B7%7D)%5Cright%5D%7D%7BN-p%7D%5Csigma%20%5E2%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%5Cend%7Bsplit%7D%0A"> where <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%20H%20=%20%5Cmathbf%20X(%5Cmathbf%20X%5ET%5Cmathbf%20X)%5E%7B-1%7D%5Cmathbf%20X%5ET"> as usual, and we have used the fact that <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20%7BV%7D(%20%5Cmathbf%7B%CE%B7%7D%20)%20=%20%5Csigma%20%5E2%20%5Ccdot%20%5Ctext%20%7BCor%7D(%5Cmathbf%7B%CE%B7%7D)"> (since each <img src="https://latex.codecogs.com/png.latex?%5Ceta_t"> has the same unconditional variance <img src="https://latex.codecogs.com/png.latex?%5Csigma%20%5E2">). Hence the <img src="https://latex.codecogs.com/png.latex?%5Chat%20%5Csigma%20%5E2"> OLS estimate is biased if <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BCor%7D(%5Cmathbf%7B%CE%B7%7D)%5Cneq%20%5Cmathbf%201">.</p>
<p>Similarly, the variance-covariance matrix of the OLS <img src="https://latex.codecogs.com/png.latex?%5Chat%20%5Cbeta"> estimator is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbb%20V%20(%5Chat%20%5Cbeta)%20=%20%5Cmathbb%20E%5Cleft%5B(%5Cmathbf%20X%5ET%5Cmathbf%20X)%5E%7B-1%7D%5Cmathbf%20X%5ET%5Ctext%20%7BCor%7D(%5Cmathbf%7B%CE%B7%7D)%5Cmathbf%20X%20(%5Cmathbf%20X%5ET%5Cmathbf%20X)%5E%7B-1%7D%20%5Cright%5D%5Csigma%5E2%0A"> whereas its OLS estimate is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Chat%20%7B%5Cmathbb%20V%7D%20(%5Chat%20%5Cbeta)%20=%20(%5Cmathbf%20X%5ET%5Cmathbf%20X)%5E%7B-1%7D%20%5Chat%20%5Csigma%20%5E2%0A"> which is biased for <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BCor%7D(%5Cmathbf%7B%CE%B7%7D)%5Cneq%20%5Cmathbf%201">.</p>
<p>Even though the variance estimators are themselves biased, the biases could still vanish in the asymptotic limit. This is the case for <img src="https://latex.codecogs.com/png.latex?%5Chat%20%5Csigma%20%5E2">, as we can see by rewriting:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cdfrac%7B%5Cmathbb%20E%20(%5Chat%20%5Csigma%20%5E2)%7D%7B%5Csigma%20%5E2%7D-1%20=%20-%5Cdfrac%7B1%7D%7B%7BN-p%7D%7D%5Ctext%20%7BTr%7D%5Cleft%5B%5Cmathbb%20E(%5Cmathbf%20H)%5ET%5Ccdot(%5Ctext%20%7BCor%7D(%5Cmathbf%7B%CE%B7%7D)-%5Cmathbf%201)%5Ccdot%20%5Cmathbb%20E(%5Cmathbf%20H)%5Cright%5D%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A"> where we have used the projector properties of <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%20H"> to recast the trace in terms of a symmetric operator. In principle, nothing prevents the operator above to have <img src="https://latex.codecogs.com/png.latex?O(N)"> eigenvalues, which would make the <img src="https://latex.codecogs.com/png.latex?%5Chat%20%5Csigma%20%5E2"> estimator asymptotically biased<sup>3</sup>. In realistic cases, one expects the correlations <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BCor%7D(%5Ceta_t,%5Ceta_%7Bt'%7D)"> to decay exponentially with <img src="https://latex.codecogs.com/png.latex?%5Cvert%20t%20-%20t'%5Cvert"> <sup>4</sup> , in which case the trace is bounded to be of <img src="https://latex.codecogs.com/png.latex?O(p)">, and <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20E(%5Chat%20%5Csigma%20%5E2)%20%5Cto%20%5Csigma%20%5E2"> as <img src="https://latex.codecogs.com/png.latex?N%5Cto%20%5Cinfty">.</p>
<p>For <img src="https://latex.codecogs.com/png.latex?%5Chat%20%7B%5Cmathbb%20V%7D%20(%5Chat%20%5Cbeta)"> things are not so favorable. It is enough to consider a special case of a plain intercept term: <img src="https://latex.codecogs.com/png.latex?X=1">. In this case, we find with some manipulations:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bsplit%7D%0A%5Cmathbb%20V%20(%5Chat%20%5Cbeta)%20&amp;=%20%5Cfrac%7B%5Csigma%20%5E2%7D%7BN%7D%5Cleft(1+%5Cfrac%7B1%7D%7BN%7D%5Csum%20_%7Bt%5Cneq%20t'%7D%20%5Ctext%7BCor%7D(%5Ceta_t,%5Ceta_%7Bt'%7D)%5Cright),%5C%5C%0A%5Cmathbb%20E(%5Chat%20%7B%5Cmathbb%20V%7D%20(%5Chat%20%5Cbeta))%20&amp;%20=%20%5Cfrac%7B%5Csigma%20%5E2%7D%7BN%7D%5Cleft(1-%5Cfrac%7B1%7D%7BN(N-1)%7D%5Csum%20_%7Bt%5Cneq%20t'%7D%20%5Ctext%7BCor%7D(%5Ceta_t,%5Ceta_%7Bt'%7D)%5Cright)%0A%5Cend%7Bsplit%7D%0A"> Since <img src="https://latex.codecogs.com/png.latex?%5Csum%20_%7Bt%5Cneq%20t'%7D%5Ctext%7BCor%7D(%5Ceta_t,%5Ceta_%7Bt'%7D)=O(N)">, we see that:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Clim%20_%7BN%5Cto%20%5Cinfty%7D%20%5Cdfrac%7B%5Cmathbb%20E(%5Chat%20%7B%5Cmathbb%20V%7D%20(%5Chat%20%5Cbeta))%7D%7B%5Cmathbb%20V(%5Chat%20%5Cbeta)%7D%5Cneq%201%0A"> which amounts to say that <img src="https://latex.codecogs.com/png.latex?%5Chat%20%7B%5Cmathbb%20V%7D%20(%5Chat%20%5Cbeta)"> is asymptotically biased<sup>5</sup>.</p>
<section id="illustration" class="level3">
<h3 class="anchored" data-anchor-id="illustration">Illustration</h3>
<p>The (foldable) block below defines helpers to simulate the results of linear regression on data generated according to <img src="https://latex.codecogs.com/png.latex?Y_t%20=%20f(X_t)%20+%20%5Ceta%20_t">. These are the same functions used in my previous post on <a href="https://vgherard.github.io/posts/2023-05-14-model-misspecification-and-linear-sandwiches/">misspecification and sandwich estimators</a> - slightly adapted to the current case.</p>
<div class="cell" data-code_folding="true">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-3"></span>
<span id="cb1-4">rxy_fun <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(rx, f, reps) {</span>
<span id="cb1-5">    res <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(n) {</span>
<span id="cb1-6">        x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rx</span>(n)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># X has marginal distribution 'rx'</span></span>
<span id="cb1-7">        y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reps</span>(x)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Y has conditional mean 'f(x)' and noise 'reps(x)'</span></span>
<span id="cb1-8">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y))  </span>
<span id="cb1-9">    }</span>
<span id="cb1-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">structure</span>(res, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rxy"</span>))</span>
<span id="cb1-11">}</span>
<span id="cb1-12"></span>
<span id="cb1-13">plot.rxy <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">N =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">840</span>) {</span>
<span id="cb1-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb1-15">    </span>
<span id="cb1-16">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span>(N), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb1-17">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb1-18">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">se =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb1-19">}</span>
<span id="cb1-20"></span>
<span id="cb1-21">lmsim <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(rxy, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">N =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vcov =</span> stats<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vcov, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">B =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">840</span>) </span>
<span id="cb1-22">{ </span>
<span id="cb1-23">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb1-24">    </span>
<span id="cb1-25">    res <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb1-26">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">coef =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> B, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), </span>
<span id="cb1-27">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vcov =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vector</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"list"</span>, B),</span>
<span id="cb1-28">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma2 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(B)</span>
<span id="cb1-29">        )</span>
<span id="cb1-30">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(res<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>coef) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(Intercept)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>)</span>
<span id="cb1-31">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(res) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lmsim"</span></span>
<span id="cb1-32">                                </span>
<span id="cb1-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (b <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>B) {</span>
<span id="cb1-34">        .fit <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> ., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rxy</span>(N))</span>
<span id="cb1-35">        res<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>coef[b, ] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coef</span>(.fit)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Store intercept and slope in B x 2 matrix</span></span>
<span id="cb1-36">        res<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>vcov[[b]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vcov</span>(.fit)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Store vcov estimates in length B list.</span></span>
<span id="cb1-37">        res<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sigma2[[b]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sigma</span>(.fit) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-38">    }</span>
<span id="cb1-39">    </span>
<span id="cb1-40">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(res)</span>
<span id="cb1-41">}</span>
<span id="cb1-42"></span>
<span id="cb1-43">print.lmsim <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) </span>
<span id="cb1-44">{</span>
<span id="cb1-45">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Simulation results:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-46">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"* Model-trusting noise variance:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> "</span>)</span>
<span id="cb1-47">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sigma2) )</span>
<span id="cb1-48">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"* Model-trusting vcov of coefficient estimates:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-49">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>( avg_est_vcov <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Reduce</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"+"</span>, x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>vcov) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>vcov) )</span>
<span id="cb1-50">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">* Simulation-based vcov of coefficient estimates:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-51">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>( emp_vcov <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cov</span>(x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>coef))</span>
<span id="cb1-52">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">* Ratio (Model-trusting / Simulation):</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-53">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>( avg_est_vcov <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> emp_vcov )</span>
<span id="cb1-54">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(x))</span>
<span id="cb1-55">}</span></code></pre></div>
</details>
</div>
<p>We simulate linear regression on data generated according to:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bsplit%7D%0AY_t%20&amp;=%201%20+%20X_t+%5Ceta_t,%5C%5C%0AX_%7Bt+1%7D%20&amp;=%200.4%20%5Ccdot%20X_t+Z%5EX_t,%5C%5C%0A%5Ceta%20_%7Bt+1%7D%20&amp;=%20%5Cfrac%7B1%7D%7B%5Csqrt%202%7D%5Ceta%20_t%20+Z%5E%5Ceta_t%5C%5C%0A%5Cend%7Bsplit%7D%0A"> where <img src="https://latex.codecogs.com/png.latex?Z%5E%7BX,%5Ceta%7D_t%5Csim%20%5Cmathcal%20N(0,1)">. The noise <img src="https://latex.codecogs.com/png.latex?%5Ceta_t"> is <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BAR%7D(1)">, and results in the unconditional variance of the corresponding linear model <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BVar%7D%20(%5Ceta%20_t)%20=%202">, twice the conditional variance <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BVar%7D(%5Ceta%20_%7Bt+1%7D%5Cvert%20%5Ceta%20_t)=%5Cmathbb%20E(Z_t%20%5E2)=1">.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">rxy_01 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rxy_fun</span>(</span>
<span id="cb2-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rx =</span> \(n) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arima.sim</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">order =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ar =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> n),</span>
<span id="cb2-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">f =</span> \(x) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x,</span>
<span id="cb2-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">reps =</span> \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arima.sim</span>(</span>
<span id="cb2-5">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">order =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ar =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)), </span>
<span id="cb2-6">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x) </span>
<span id="cb2-7">        )</span>
<span id="cb2-8">)</span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(rxy_01)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vgherard.github.io/posts/2023-05-20-linear-regression-with-autocorrelated-noise/linear-regression-with-autocorrelated-noise_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>From the simulation below, we see that with <img src="https://latex.codecogs.com/png.latex?N=100"> serial observations, <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20E(%5Chat%20%5Csigma%20%5E2)"> is relatively close to <img src="https://latex.codecogs.com/png.latex?%5Csigma%20%5E2%20=%202">, but the <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20E(%5Chat%20%7B%5Cmathbb%20V%7D%20(%5Chat%20%5Cbeta))"> grossly underestimates all entries (as can be seen from the last line of the output of <code>lmsim()</code> below).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lmsim</span>(rxy_01, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">N =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Simulation results:

* Model-trusting noise variance:
 [1] 1.870606
* Model-trusting vcov of coefficient estimates:
            (Intercept)           x
(Intercept)  0.03583159 -0.01663739
x           -0.01663739  0.01659708

* Simulation-based vcov of coefficient estimates:
            (Intercept)           x
(Intercept)  0.15486131 -0.02665435
x           -0.02665435  0.02978162

* Ratio (Model-trusting / Simulation):
            (Intercept)         x
(Intercept)   0.2313786 0.6241905
x             0.6241905 0.5572928</code></pre>
</div>
</div>
<p>To correctly estimate <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20V%20(%5Chat%20%5Cbeta)">, we could try using the “autocorrelation-consistent” sandwich estimator <code>sandwich::vcovHAC()</code> <sup>6</sup>. It turns out that, even with a relatively simple example like the present one, the sample size required for the HAC estimator’s bias to die out is unreasonably large (see below). With such large samples, one can probably obtain much better results by leaving out some data for model building, performing inference on the remaining data with a proper time-series model.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lmsim</span>(rxy_01, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vcov =</span> sandwich<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vcovHAC, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">N =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Simulation results:

* Model-trusting noise variance:
 [1] 1.870606
* Model-trusting vcov of coefficient estimates:
            (Intercept)           x
(Intercept)  0.08787795 -0.02323242
x           -0.02323242  0.02339146

* Simulation-based vcov of coefficient estimates:
            (Intercept)           x
(Intercept)  0.15486131 -0.02665435
x           -0.02665435  0.02978162

* Ratio (Model-trusting / Simulation):
            (Intercept)         x
(Intercept)   0.5674623 0.8716182
x             0.8716182 0.7854329</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lmsim</span>(rxy_01, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vcov =</span> sandwich<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vcovHAC, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">N =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Simulation results:

* Model-trusting noise variance:
 [1] 1.974131
* Model-trusting vcov of coefficient estimates:
             (Intercept)            x
(Intercept)  0.023032270 -0.005723968
x           -0.005723968  0.005684149

* Simulation-based vcov of coefficient estimates:
             (Intercept)            x
(Intercept)  0.029600757 -0.005993161
x           -0.005993161  0.006152216

* Ratio (Model-trusting / Simulation):
            (Intercept)         x
(Intercept)   0.7780973 0.9550834
x             0.9550834 0.9239189</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lmsim</span>(rxy_01, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vcov =</span> sandwich<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vcovHAC, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">N =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Simulation results:

* Model-trusting noise variance:
 [1] 1.98033
* Model-trusting vcov of coefficient estimates:
             (Intercept)            x
(Intercept)  0.011878079 -0.002771484
x           -0.002771484  0.002849089

* Simulation-based vcov of coefficient estimates:
             (Intercept)            x
(Intercept)  0.015085291 -0.002844716
x           -0.002844716  0.002855522

* Ratio (Model-trusting / Simulation):
            (Intercept)         x
(Intercept)   0.7873948 0.9742566
x             0.9742566 0.9977471</code></pre>
</div>
</div>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>For the linear model assumptions to hold, the <img src="https://latex.codecogs.com/png.latex?(X_t,%5C,Y_t)"> pairs should come from <em>independent realizations</em> of the same time series, which is of course not the type of data we are usually presented with.↩︎</p></li>
<li id="fn2"><p>As usual we stack observations vertically in the <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%20X"> and <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%20Y"> matrices.↩︎</p></li>
<li id="fn3"><p>For an extreme case, suppose that <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%20X%20=%20%5Cmathbf%20e"> (no covariate except for an intercept term), and let the noise term be <img src="https://latex.codecogs.com/png.latex?%5Ceta%20_t%20=%20Z_0%20+%20Z_t">, where <img src="https://latex.codecogs.com/png.latex?Z_0"> and <img src="https://latex.codecogs.com/png.latex?%5C%7BZ_t%5C%7D_%7Bt=1,2,%5Cdots,T%7D"> are independent <img src="https://latex.codecogs.com/png.latex?Z">-scores. One can easily see that, in this setting, <img src="https://latex.codecogs.com/png.latex?%5Ctext%20%7BCor%7D(%5Ceta)%20=%20%5Cfrac%7B1%7D%7B2%7D(%5Cmathbf%201+%5Cmathbf%20e%20%5Cmathbf%20e%5ET%20)"> and <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BTr%7D(%5Ccdots)%20%5Capprox%20%5Cfrac%7BN%7D%7B2%7D">.↩︎</p></li>
<li id="fn4"><p>For instance, for the <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BAR%7D(1)"> noise of Eq. Equation&nbsp;2, we have <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BCor%7D(%5Ceta_t,%20%5Ceta_%7Bt'%7D)=%20%5Calpha%20%5E%7B%5Cvert%20t%20-%20t'%5Cvert%7D">.↩︎</p></li>
<li id="fn5"><p>The difference <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20E(%5Chat%20%7B%5Cmathbb%20V%7D%20(%5Chat%20%5Cbeta))-%5Cmathbb%20V(%5Chat%20%5Cbeta)"> decays as <img src="https://latex.codecogs.com/png.latex?O(N%5E%7B-1%7D)">, which is of the same order of the estimation target <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20V%20(%5Chat%20%5Cbeta)">. Not sure I’m using standard terminology here.↩︎</p></li>
<li id="fn6"><p>Disclaimer: I haven’t read any theory about the HAC estimator, so I may be misusing it here, but I would have expected it to work relatively well on such an “easy” example. For illustrations on how to use sandwich estimators for first- and second-order linear model misspecification, you can read <a href="https://vgherard.github.io/posts/2023-05-14-model-misspecification-and-linear-sandwiches/">this post of mine</a>.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{gherardi2023,
  author = {Gherardi, Valerio},
  title = {Linear Regression with Autocorrelated Noise},
  date = {2023-05-25},
  url = {https://vgherard.github.io/posts/2023-05-20-linear-regression-with-autocorrelated-noise/linear-regression-with-autocorrelated-noise.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-gherardi2023" class="csl-entry quarto-appendix-citeas">
Gherardi, Valerio. 2023. <span>“Linear Regression with Autocorrelated
Noise.”</span> May 25, 2023. <a href="https://vgherard.github.io/posts/2023-05-20-linear-regression-with-autocorrelated-noise/linear-regression-with-autocorrelated-noise.html">https://vgherard.github.io/posts/2023-05-20-linear-regression-with-autocorrelated-noise/linear-regression-with-autocorrelated-noise.html</a>.
</div></div></section></div> ]]></description>
  <category>Statistics</category>
  <category>Regression</category>
  <category>Time Series</category>
  <category>Linear Models</category>
  <category>Model Misspecification</category>
  <category>R</category>
  <guid>https://vgherard.github.io/posts/2023-05-20-linear-regression-with-autocorrelated-noise/linear-regression-with-autocorrelated-noise.html</guid>
  <pubDate>Wed, 24 May 2023 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Model Misspecification and Linear Sandwiches</title>
  <dc:creator>Valerio Gherardi</dc:creator>
  <link>https://vgherard.github.io/posts/2023-05-14-model-misspecification-and-linear-sandwiches/misspecification-and-linear-sandwiches.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Traditional linear models, such as the output of the R function <code>lm()</code>, are often loaded with a set of strong assumptions. Take univariate regression:</p>
<p><span id="eq-lm"><img src="https://latex.codecogs.com/png.latex?%0AY%20=%20q+mX+%5Cvarepsilon.%0A%5Ctag%7B1%7D"></span></p>
<p>This equation assumes that:</p>
<ol type="1">
<li>The conditional mean <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20E(Y%5Cvert%20X)%20=%20q%20+%20mX">, a linear function of <img src="https://latex.codecogs.com/png.latex?X">.</li>
<li>The conditional variance <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20%7BV%7D(Y%20%5Cvert%20X)=%5Cmathbb%7BV%7D(%5Cvarepsilon%5Cvert%20X)"> is independent of <img src="https://latex.codecogs.com/png.latex?X">.</li>
<li>The conditional distribution <img src="https://latex.codecogs.com/png.latex?Y%5Cvert%20X"> is gaussian.</li>
<li>In a set of measurements <img src="https://latex.codecogs.com/png.latex?%5Cleft%5C%7B%5Cleft(X_i,Y_i%5Cright)%5Cright%5C%7D_%7Bi%20=%201,%5C,%20%5Cdots,%20%5C,N%7D">, <img src="https://latex.codecogs.com/png.latex?Y_i"> and the set <img src="https://latex.codecogs.com/png.latex?%5Cleft%5C%7B%20X_j,%20Y_j%5Cright%5C%7D%20_%7Bj%5Cneq%20i%7D"> are conditionally independent of each other, given the value of the corresponding regressor <img src="https://latex.codecogs.com/png.latex?X_i">.<sup>1</sup></li>
</ol>
<p>The last assumption is satisfied in many practical situations, and we will take it here for granted<sup>2</sup>. What happens when the first three assumptions are violated (that is “frequently” to “almost always”, depending on context)?</p>
<p>A comprehensive discussion is provided by <span class="citation" data-cites="buja2019models">(Buja et al. 2019)</span>. These authors show that:</p>
<ul>
<li>If the conditional mean <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20E%20(Y%20%5Cvert%20X)"> is not linear (“first order misspecification”), then the Ordinary Least Squares (OLS) regression coefficients <img src="https://latex.codecogs.com/png.latex?%5Chat%20%5Cbeta"> consistently estimate: <span id="eq-target"><img src="https://latex.codecogs.com/png.latex?%0A%5Cbeta%20%5Cequiv%20%5Ctext%7Barg%20%7D%20%5Cmin%20_%7B%5Cbeta%5E%5Cprime%7D%20%5Cmathbb%20E((Y-X%5Cbeta%5E%5Cprime)%5E2)%0A%5Ctag%7B2%7D"></span></li>
</ul>
<p>which can be thought as the “best linear approximation of the response”<sup>3</sup>.</p>
<ul>
<li><p>Both non-linearity in the sense of the previous point, and <img src="https://latex.codecogs.com/png.latex?X">-dependence in <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BV%7D(Y%20%5Cvert%20X)"> (“second order misspecification”) affect the sampling distribution of <img src="https://latex.codecogs.com/png.latex?%5Chat%20%5Cbeta"> and, in particular, <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BV%7D(%5Chat%20%5Cbeta)">, which is the relevant quantity for inference in the large-sample limit.</p></li>
<li><p>Both problems can be efficiently addressed through the so-called “sandwich” estimators for the covariance matrix of <img src="https://latex.codecogs.com/png.latex?%5Chat%20%5Cbeta"> <span class="citation" data-cites="white1980heteroskedasticity">(White 1980)</span>, whose consistency is robust to both type of misspecification.</p></li>
</ul>
<p>Details can be found in the mentioned reference. The rest of the post illustrates with examples how to compute “sandwich” estimates in <code>R</code>, and why you may want to do so.</p>
</section>
<section id="fitting-misspecified-linear-models-in-r" class="level2">
<h2 class="anchored" data-anchor-id="fitting-misspecified-linear-models-in-r">Fitting misspecified linear models in R</h2>
<p>The <a href="https://CRAN.R-project.org/package=sandwich"><code>{sandwich}</code></a> package (available on CRAN) provides estimators for the regression coefficients’ variance-covariance matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20V%20(%5Chat%20%5Cbeta)"> that are robust to first and second order misspecification. These can be readily used with <code>lm</code> objects, as in the example below:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">fit <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> wt, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> mtcars)</span>
<span id="cb1-2"></span>
<span id="cb1-3">stats<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vcov</span>(fit)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># standard vcov (linear model trusting estimate)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>            (Intercept)        wt
(Intercept)    3.525484 -1.005693
wt            -1.005693  0.312594</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">sandwich<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vcovHC</span>(fit)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sandwich vcov (model-robust estimate)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>            (Intercept)         wt
(Intercept)    5.889249 -1.7418581
wt            -1.741858  0.5448011</code></pre>
</div>
</div>
<p>It is important to note that both functions <code>stats::vcov()</code> and <code>sandwich::vcovHC()</code> employ the same point estimates of regression coefficients<br>
to compute <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20V%20(%5Chat%20%5Cbeta)">:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">fit</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Call:
lm(formula = mpg ~ wt, data = mtcars)

Coefficients:
(Intercept)           wt  
     37.285       -5.344  </code></pre>
</div>
</div>
<p>The difference between these functions lies in the different assumptions they make on the linear model residuals, which leads to different estimates for <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BV%7D(%5Chat%20%5Cbeta)">.</p>
</section>
<section id="effects-of-misspecification" class="level2">
<h2 class="anchored" data-anchor-id="effects-of-misspecification">Effects of misspecification</h2>
<p>This section illustrates some consequences of model misspecification through simulation. The examples use:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span></code></pre></div>
</div>
<p>For convenience, we define some helpers to be used in the following examples. The function below returns random generators for the generic additive error model <img src="https://latex.codecogs.com/png.latex?Y%20=%20f(X)%20+%20%5Cvarepsilon">, where the distribution of the noise term <img src="https://latex.codecogs.com/png.latex?%5Cvarepsilon"> may in general depend on <img src="https://latex.codecogs.com/png.latex?X">. Both <img src="https://latex.codecogs.com/png.latex?X"> and <img src="https://latex.codecogs.com/png.latex?Y"> are assumed here and below to be 1-dimensional.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">rxy_fun <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(rx, f, reps) {</span>
<span id="cb8-2">    res <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(n) {</span>
<span id="cb8-3">        x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rx</span>(n)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># X has marginal distribution 'rx'</span></span>
<span id="cb8-4">        y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reps</span>(x)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Y has conditional mean 'f(x)' and noise 'reps(x)'</span></span>
<span id="cb8-5">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y))  </span>
<span id="cb8-6">    }</span>
<span id="cb8-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">structure</span>(res, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rxy"</span>))</span>
<span id="cb8-8">}</span>
<span id="cb8-9"></span>
<span id="cb8-10">plot.rxy <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">N =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">840</span>) {</span>
<span id="cb8-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb8-12">    </span>
<span id="cb8-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span>(N), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-14">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb8-15">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">se =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb8-16">}</span></code></pre></div>
</div>
<p>The following function simulates fitting the linear model <code>y ~ x</code> over multiple datasets generated according to a function <code>rxy()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">lmsim <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(rxy, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">N =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vcov =</span> stats<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vcov, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">B =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">840</span>) </span>
<span id="cb9-2">{ </span>
<span id="cb9-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb9-4">    </span>
<span id="cb9-5">    res <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">coef =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> B, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vcov =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vector</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"list"</span>, B))</span>
<span id="cb9-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(res<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>coef) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(Intercept)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>)</span>
<span id="cb9-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(res) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lmsim"</span></span>
<span id="cb9-8">                                </span>
<span id="cb9-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (b <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>B) {</span>
<span id="cb9-10">        .fit <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> ., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rxy</span>(N))</span>
<span id="cb9-11">        res<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>coef[b, ] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coef</span>(.fit)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Store intercept and slope in B x 2 matrix</span></span>
<span id="cb9-12">        res<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>vcov[[b]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vcov</span>(.fit)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Store vcov estimates in length B list. </span></span>
<span id="cb9-13">    }</span>
<span id="cb9-14">    </span>
<span id="cb9-15">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(res)</span>
<span id="cb9-16">}</span>
<span id="cb9-17"></span>
<span id="cb9-18">print.lmsim <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) </span>
<span id="cb9-19">{</span>
<span id="cb9-20">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Simulation results:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb9-21">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"* Model-trusting vcov (average of vcov estimates):</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb9-22">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>( avg_est_vcov <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Reduce</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"+"</span>, x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>vcov) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>vcov) )</span>
<span id="cb9-23">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">* Simulation-based vcov (vcov of coefficient estimates):</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb9-24">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>( emp_vcov <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cov</span>(x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>coef))</span>
<span id="cb9-25">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">* Ratio (1st / 2nd):</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb9-26">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>( avg_est_vcov <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> emp_vcov )</span>
<span id="cb9-27">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(x))</span>
<span id="cb9-28">}</span></code></pre></div>
</div>
<p>The print method defined above shows a comparison of the covariance matrices obtained by:</p>
<ol type="A">
<li>Averaging variance-covariance estimates from the various simulations, and</li>
<li>Taking the variance-covariance matrix of regression coefficients obtained in the simulations.</li>
</ol>
<p>The first one can be considered a “model-trusting” estimate (where the actual “model” is specified by the <code>vcov</code> argument of <code>lmsim()</code>, i.e.&nbsp;<code>stats::vcov</code> and <code>sandwich::vcovHC</code> for the traditional and sandwich estimates, respectively). The second one is a model-free simulation-based estimate of the true <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BV%7D(%5Chat%20%5Cbeta)">. The comparison between the two<sup>4</sup> provides a measure of the asymptotic bias of the model-trusting estimate.</p>
<section id="example-1-first-order-misspecification" class="level3">
<h3 class="anchored" data-anchor-id="example-1-first-order-misspecification">Example 1: First order misspecification</h3>
<p><img src="https://latex.codecogs.com/png.latex?%0AY%20=%20X%20%5E%202%20+%20%5Cvarepsilon,%5Cquad%20X%20%5Csim%20%5Ctext%7BUnif%7D%20(0,1),%5Cqquad%20%5Cvarepsilon%20%5Csim%20%5Cmathcal%20N%20(0,0.01)%0A"></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">rxy_01 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rxy_fun</span>(</span>
<span id="cb10-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rx =</span> runif,</span>
<span id="cb10-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">f =</span> \(x) x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb10-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">reps =</span> \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">01</span>)</span>
<span id="cb10-5">    )</span></code></pre></div>
</div>
<p>In this model, <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20E%20(Y%20%5Cvert%20X)"> is not linear in <img src="https://latex.codecogs.com/png.latex?X"> (first order misspecification), but the remaining assumptions of the linear model hold. This is how a typical linear fit of data generated from this model looks like:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(rxy_01, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">N =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vgherard.github.io/posts/2023-05-14-model-misspecification-and-linear-sandwiches/misspecification-and-linear-sandwiches_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Here the effect of misspecification on the variance-covariance model trusting estimates is to underestimate true covariance values (by a factor as large as 40%!):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lmsim</span>(rxy_01)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Simulation results:

* Model-trusting vcov (average of vcov estimates):
              (Intercept)             x
(Intercept)  0.0002277348 -0.0003417356
x           -0.0003417356  0.0006833282

* Simulation-based vcov (vcov of coefficient estimates):
              (Intercept)             x
(Intercept)  0.0003367876 -0.0005662584
x           -0.0005662584  0.0011488351

* Ratio (1st / 2nd):
            (Intercept)         x
(Intercept)   0.6761971 0.6034976
x             0.6034976 0.5948009</code></pre>
</div>
</div>
<p>This is fixed by the <code>sandwich::vcovHC()</code> estimators:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lmsim</span>(rxy_01, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vcov =</span> sandwich<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vcovHC)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Simulation results:

* Model-trusting vcov (average of vcov estimates):
              (Intercept)             x
(Intercept)  0.0003475834 -0.0005732957
x           -0.0005732957  0.0011443449

* Simulation-based vcov (vcov of coefficient estimates):
              (Intercept)             x
(Intercept)  0.0003367876 -0.0005662584
x           -0.0005662584  0.0011488351

* Ratio (1st / 2nd):
            (Intercept)         x
(Intercept)    1.032055 1.0124276
x              1.012428 0.9960916</code></pre>
</div>
</div>
</section>
<section id="example-2-second-order-misspecification" class="level3">
<h3 class="anchored" data-anchor-id="example-2-second-order-misspecification">Example 2: Second order misspecification</h3>
<p><img src="https://latex.codecogs.com/png.latex?%0AY%20=%20X%20+%20%5Cvarepsilon,%5Cquad%20X%20%5Csim%20%5Ctext%7BUnif%7D%20(0,1),%5Cqquad%20%5Cvarepsilon%20%5Csim%20%5Cmathcal%20N%20(0,X)%0A"></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">rxy_02 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rxy_fun</span>(</span>
<span id="cb16-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rx =</span> runif,</span>
<span id="cb16-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">f =</span> \(x) x,</span>
<span id="cb16-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">reps =</span> \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> x)</span>
<span id="cb16-5">    )</span>
<span id="cb16-6"></span>
<span id="cb16-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(rxy_02, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">N =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vgherard.github.io/posts/2023-05-14-model-misspecification-and-linear-sandwiches/misspecification-and-linear-sandwiches_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>This model is first-order consistent, but second-order misspecified (variance is not independent of <img src="https://latex.codecogs.com/png.latex?X">). The effects on vcov model-trusting estimates is mixed: some covariances are underestimated, some are overestimated.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lmsim</span>(rxy_02)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Simulation results:

* Model-trusting vcov (average of vcov estimates):
            (Intercept)           x
(Intercept)  0.01344466 -0.02014604
x           -0.02014604  0.04008595

* Simulation-based vcov (vcov of coefficient estimates):
             (Intercept)           x
(Intercept)  0.005456494 -0.01417346
x           -0.014173461  0.04834196

* Ratio (1st / 2nd):
            (Intercept)         x
(Intercept)    2.463974 1.4213920
x              1.421392 0.8292164</code></pre>
</div>
</div>
<p>Again, this large bias is corrected by the sandwich estimator:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lmsim</span>(rxy_02, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vcov =</span> sandwich<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vcovHC)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Simulation results:

* Model-trusting vcov (average of vcov estimates):
             (Intercept)           x
(Intercept)  0.005637138 -0.01451506
x           -0.014515056  0.04909868

* Simulation-based vcov (vcov of coefficient estimates):
             (Intercept)           x
(Intercept)  0.005456494 -0.01417346
x           -0.014173461  0.04834196

* Ratio (1st / 2nd):
            (Intercept)        x
(Intercept)    1.033106 1.024101
x              1.024101 1.015653</code></pre>
</div>
</div>
</section>
<section id="example-3-sample-size-effects" class="level3">
<h3 class="anchored" data-anchor-id="example-3-sample-size-effects">Example 3: sample size effects</h3>
<p>The sandwich estimators only become unbiased in the large sample limit. For instance, in our previous Example 1, the sandwich covariance estimates require sample sizes of <img src="https://latex.codecogs.com/png.latex?N%20%5Capprox%2050"> or larger, in order for their bias to be relatively contained (<img src="https://latex.codecogs.com/png.latex?%5Clesssim%2010%5C%25">). With a small sample size:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lmsim</span>(rxy_01, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">N =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vcov =</span> sandwich<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vcovHC)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Simulation results:

* Model-trusting vcov (average of vcov estimates):
             (Intercept)           x
(Intercept)  0.008253143 -0.01356350
x           -0.013563503  0.02691423

* Simulation-based vcov (vcov of coefficient estimates):
             (Intercept)            x
(Intercept)  0.005084963 -0.008573385
x           -0.008573385  0.017136158

* Ratio (1st / 2nd):
            (Intercept)        x
(Intercept)    1.623049 1.582048
x              1.582048 1.570611</code></pre>
</div>
</div>
<p>For such small sample sizes, however, one should probably also keep into account the <a href="https://vgherard.github.io/posts/2023-05-12-consistency-and-bias-of-ols-estimators/">bias in the point estimate <img src="https://latex.codecogs.com/png.latex?%5Chat%20%5Cbeta"> itself</a>, so that the bias in the variance <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20V%20(%5Chat%20%5Cbeta)"> becomes a kinda second-order problem.</p>
</section>
<section id="example-4-variance-underestimation-and-overestimation" class="level3">
<h3 class="anchored" data-anchor-id="example-4-variance-underestimation-and-overestimation">Example 4: variance underestimation and overestimation</h3>
<p>According to the heuristics of <span class="citation" data-cites="buja2019models">(Buja et al. 2019)</span>, the linear model trusting variances <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20V%20(%5Chat%20%5Cbeta)_%7Bii%7D"> tend to underestimate (overestimate) the true variances:</p>
<ul>
<li>In the presence of non-linearity, when the strong deviations from linearity are far away from (close to) the center of the regressor distribution.</li>
<li>In the presence of heteroskedasticity, when the regions of high variance are far away from the (close to) the center of the regressor distribution.</li>
</ul>
<p>We illustrate the second case. Consider the following two models:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AY%20=%20X%20+%20%5Cvarepsilon,%5Cquad%20X%20%5Csim%20%5Ctext%7BUnif%7D%20(0,1),%5Cqquad%20%5Cvarepsilon%20%5Csim%20%5Cmathcal%20N%20(0,%5Cvert%20X-%5Cfrac%7B1%7D%7B2%7D%5Cvert%20)%0A"></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">rxy_04a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rxy_fun</span>(</span>
<span id="cb23-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rx =</span> runif,</span>
<span id="cb23-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">f =</span> \(x) x,</span>
<span id="cb23-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">reps =</span> \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x))</span>
<span id="cb23-5">    )</span>
<span id="cb23-6"></span>
<span id="cb23-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(rxy_04a)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vgherard.github.io/posts/2023-05-14-model-misspecification-and-linear-sandwiches/misspecification-and-linear-sandwiches_files/figure-html/unnamed-chunk-14-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p><img src="https://latex.codecogs.com/png.latex?%0AY%20=%20X%20+%20%5Cvarepsilon,%5Cquad%20X%20%5Csim%20%5Ctext%7BUnif%7D%20(0,1),%5Cqquad%20%5Cvarepsilon%20%5Csim%20%5Cmathcal%20N%20(0,%5Cfrac%7B1%7D%7B2%7D-%5Cvert%20X-%5Cfrac%7B1%7D%7B2%7D%5Cvert%20)%0A"></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">rxy_04b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rxy_fun</span>(</span>
<span id="cb24-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rx =</span> runif,</span>
<span id="cb24-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">f =</span> \(x) x,</span>
<span id="cb24-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">reps =</span> \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x))</span>
<span id="cb24-5">    )</span>
<span id="cb24-6"></span>
<span id="cb24-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(rxy_04b)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vgherard.github.io/posts/2023-05-14-model-misspecification-and-linear-sandwiches/misspecification-and-linear-sandwiches_files/figure-html/unnamed-chunk-15-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>In agreement with the heuristics, we have, for the first model:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lmsim</span>(rxy_04a)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Simulation results:

* Model-trusting vcov (average of vcov estimates):
             (Intercept)            x
(Intercept)  0.003326042 -0.004989057
x           -0.004989057  0.009977552

* Simulation-based vcov (vcov of coefficient estimates):
             (Intercept)            x
(Intercept)  0.005390525 -0.009154439
x           -0.009154439  0.018296535

* Ratio (1st / 2nd):
            (Intercept)         x
(Intercept)   0.6170162 0.5449878
x             0.5449878 0.5453247</code></pre>
</div>
</div>
<p>and, for the second model:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lmsim</span>(rxy_04b)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Simulation results:

* Model-trusting vcov (average of vcov estimates):
             (Intercept)            x
(Intercept)  0.003420946 -0.005150512
x           -0.005150512  0.010300847

* Simulation-based vcov (vcov of coefficient estimates):
             (Intercept)            x
(Intercept)  0.001590907 -0.001503471
x           -0.001503471  0.003131620

* Ratio (1st / 2nd):
            (Intercept)        x
(Intercept)    2.150312 3.425748
x              3.425748 3.289303</code></pre>
</div>
</div>
<p>It is interesting to notice that, far away from the large-sample limit, the sandwich estimates also have a bias (as discussed in the previous example), but the bias leads to an overestimate of <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20V%20(%5Chat%20%5Cbeta)"> <em>in both cases</em><sup>5</sup>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lmsim</span>(rxy_04a, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">N =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vcov =</span> sandwich<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vcovHC)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Simulation results:

* Model-trusting vcov (average of vcov estimates):
            (Intercept)          x
(Intercept)  0.07714254 -0.1302820
x           -0.13028198  0.2595908

* Simulation-based vcov (vcov of coefficient estimates):
            (Intercept)          x
(Intercept)  0.05560994 -0.0957307
x           -0.09573070  0.1947398

* Ratio (1st / 2nd):
            (Intercept)        x
(Intercept)    1.387208 1.360922
x              1.360922 1.333013</code></pre>
</div>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lmsim</span>(rxy_04b, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">N =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vcov =</span> sandwich<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>vcovHC)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Simulation results:

* Model-trusting vcov (average of vcov estimates):
            (Intercept)           x
(Intercept)  0.05301354 -0.07223407
x           -0.07223407  0.13959714

* Simulation-based vcov (vcov of coefficient estimates):
            (Intercept)           x
(Intercept)  0.02725563 -0.03408101
x           -0.03408101  0.06735272

* Ratio (1st / 2nd):
            (Intercept)        x
(Intercept)    1.945049 2.119481
x              2.119481 2.072628</code></pre>
</div>
</div>
</section>
</section>
<section id="conclusions" class="level2">
<h2 class="anchored" data-anchor-id="conclusions">Conclusions</h2>
<p>Sandwich estimators provide valid inference for parameter covariances and standard errors in misspecified linear regression settings. These model-robust tools are available in R through <a href="https://CRAN.R-project.org/package=sandwich"><code>{sandwich}</code></a> (which also provides<br>
methods for more general <code>glm</code> objects).</p>
<p>For fairly large datasets, this model-robust approach can be coupled with data splitting, leading to a modeling procedure which I’m finding to be quite solid and versatile in practice:</p>
<ol type="1">
<li>Perform data exploration and model selection on a separate portion of data. This is to avoid <a href="https://vgherard.github.io/posts/2022-10-18-posi/">biasing inferential results with random selective procedures</a>.</li>
<li>Once a reasonable model is found, fit the model on the remaining data, adopting robust covariance estimates for model parameters.</li>
</ol>
<p>This works very well with independent data for which a (generalized) linear model can provide a useful parametric description. Generalizations may be discussed in a separate post.</p>



</section>


<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-buja2019models" class="csl-entry">
Buja, Andreas, Lawrence Brown, Richard Berk, Edward George, Emil Pitkin, Mikhail Traskin, Kai Zhang, and Linda Zhao. 2019. <span>“Models as Approximations i.”</span> <em>Statistical Science</em> 34 (4): 523–44.
</div>
<div id="ref-white1980heteroskedasticity" class="csl-entry">
White, Halbert. 1980. <span>“A Heteroskedasticity-Consistent Covariance Matrix Estimator and a Direct Test for Heteroskedasticity.”</span> <em>Econometrica: Journal of the Econometric Society</em>, 817–38.
</div>
</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>This is already somewhat implicit in Equation&nbsp;1, that models <img src="https://latex.codecogs.com/png.latex?Y"> and <img src="https://latex.codecogs.com/png.latex?X"> as single random variables. The reason for stating this condition in an apparently convoluted way, rather than a simpler <em>“data points* <img src="https://latex.codecogs.com/png.latex?(X_i,Y_i)"> are independent draws from the same joint distribution”, is that this formulation includes cases where the <img src="https://latex.codecogs.com/png.latex?X_i">’s are </em>not* independent, <em>cf.</em> the following note.↩︎</p></li>
<li id="fn2"><p>There are of course important exceptions, like time series or spatial data. Noteworthy, our formulation of strict linear model assumptions can also cover some cases of temporal or spatial dependence in the regressors <img src="https://latex.codecogs.com/png.latex?X_i">, provided that such dependence is not reflected on <img src="https://latex.codecogs.com/png.latex?Y_i%20%5Cvert%20X_i">.↩︎</p></li>
<li id="fn3"><p>According to an <img src="https://latex.codecogs.com/png.latex?L_2"> loss criterion.↩︎</p></li>
<li id="fn4"><p>I use an element-wise ratio, in order to avoid confusion from the different scales involved in the various entries of <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20V%20(%5Chat%20%5Cbeta)">.↩︎</p></li>
<li id="fn5"><p>I don’t know whether this result (that sandwich estimates are, at worst, overestimates) is a general one.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{gherardi2023,
  author = {Gherardi, Valerio},
  title = {Model {Misspecification} and {Linear} {Sandwiches}},
  date = {2023-05-14},
  url = {https://vgherard.github.io/posts/2023-05-14-model-misspecification-and-linear-sandwiches/misspecification-and-linear-sandwiches.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-gherardi2023" class="csl-entry quarto-appendix-citeas">
Gherardi, Valerio. 2023. <span>“Model Misspecification and Linear
Sandwiches.”</span> May 14, 2023. <a href="https://vgherard.github.io/posts/2023-05-14-model-misspecification-and-linear-sandwiches/misspecification-and-linear-sandwiches.html">https://vgherard.github.io/posts/2023-05-14-model-misspecification-and-linear-sandwiches/misspecification-and-linear-sandwiches.html</a>.
</div></div></section></div> ]]></description>
  <category>Statistics</category>
  <category>Regression</category>
  <category>Linear Models</category>
  <category>Model Misspecification</category>
  <category>R</category>
  <guid>https://vgherard.github.io/posts/2023-05-14-model-misspecification-and-linear-sandwiches/misspecification-and-linear-sandwiches.html</guid>
  <pubDate>Sat, 13 May 2023 22:00:00 GMT</pubDate>
</item>
<item>
  <title>How to get away with selection. Part I: Introduction</title>
  <dc:creator>Valerio Gherardi</dc:creator>
  <link>https://vgherard.github.io/posts/2022-10-18-posi/posi.html</link>
  <description><![CDATA[ 





<section id="prologue" class="level1">
<h1>Prologue</h1>
<p>A few months back, for undocumented circumstances, my browser’s search history was full of terms like <em>“parameter estimation with variable selection”</em>, or <em>“confidence intervals after cross-validation”</em>, or again <em>“linear model uncertainties after staring into the abyss”</em>, …</p>
<p>Sparing you my rock bottom, I eventually stumbled upon the right keywords, and started digging into the mathematical aspects of <strong>Selective Inference</strong>, or <strong>Post-Model Selection Inference</strong>. Now, while my hands are still full of dirt, I’ve decided it’s the right moment to write some notes about what I’ve learned - whose main recipient is the future me, which will otherwise inevitably forget what the present me thinks he knows. If you’re <em>not</em> the future me:</p>
<ol type="1">
<li>Welcome 👋</li>
<li>If you have detected some imprecision, or have suggestions for this or the next posts, you are more than welcome to <a href="https://github.com/vgherard/vgherard.github.io/issues/new">create an issue</a> on the source repository of this blog.</li>
</ol>
</section>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Broadly speaking, the problem of Selective Inference is that of performing valid statistical inferences when <em>the actual questions of the data analysis are not fixed in advance</em>, but rather <em>selected through data examination</em>. In model-based inference, this lack of pre-determination usually stems from the (often unavoidable) practice of using the same data to choose an adequate model for the data generating process <em>and</em> to perform inference. The intrinsic randomness of the selection process has important consequences on the probability of making different guesses about the selected questions, which, if not properly taken into account, can completely invalidate the analysis results.</p>
<p>If this sounds unfamiliar, think about machine-learning: when training a predictive model on a given dataset, you would usually consider the error on the same dataset as a poor (optimistic) estimate of the true model’s error rate, because the model was tuned to perform well on that data in the first place. There we go, Selective Inference! A selection from an extended family of models<sup>1</sup> is performed through data examination, and this event introduces a bias in the error estimate of the final model from training data.</p>
<p>The example from machine-learning also suggests a very simple-minded and relatively a-theoretical approach to Selective Inference: data-splitting<sup>2</sup>. According to this method, we would use only part of the available data to select the questions to be answered by the analysis, while the remaining part would be reserved to perform the actual inference. For this program to succeed, there are however two important requirements: first, we must have enough data to ensure decent statistics for both the selection and inference tasks; and second, we must be able to split data in two independent (or close to independent) sets. This can suppose problems with, <em>e.g.</em>, time-series data. If, on the other hand, these requirements cannot be met, we have to resort to more sophisticated methods.</p>
<p>At this point, I would like to stress that the conceptual problems I’ve just pointed out will probably look obvious to any reader with a decent intuition for probability<sup>3</sup>. What is less obvious, but in fact a <a href="https://arxiv.org/search/?query=%22selective+inference%22&amp;searchtype=all&amp;abstracts=show&amp;order=-announced_date_first&amp;size=50">fairly active research field in statistics</a>, is how to perform valid selective inferences when the “easy” solution of data-splitting I mentioned above is not available. This is where theory re-enters the game, and what I’m going to ramble about in this and the next posts.</p>
</section>
<section id="illustrations-of-selective-inference" class="level1">
<h1>Illustrations of Selective Inference</h1>
<p>Enough for the speech, let us see how selection can affect (and invalidate) classical inference with a simple-minded simulation.</p>
<section id="setting" class="level3">
<h3 class="anchored" data-anchor-id="setting">Setting</h3>
<p>To illustrate why naive classical inference can fail in the presence of selection, we consider a very simple regression problem involving a single regressor <img src="https://latex.codecogs.com/png.latex?X"> and a response <img src="https://latex.codecogs.com/png.latex?Y">, where <em>all the assumptions of the classical linear model hold</em>. In fact, we will assume the true data generating process to be:</p>
<p><span id="eq-y-gaussian"><img src="https://latex.codecogs.com/png.latex?%0AY%20=%20mX%20+%20%5Cvarepsilon,%20%5Cqquad%20%5Cvarepsilon%20%5Csim%20%5Cmathcal%20N%20(0,%20%5Csigma),%0A%5Ctag%7B1%7D"></span></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Cvarepsilon%20%5Csim%20%5Cmathcal%20N%20(0,%20%5Csigma)"> means “<img src="https://latex.codecogs.com/png.latex?%5Cvarepsilon"> follows a gaussian distribution with mean <img src="https://latex.codecogs.com/png.latex?0"> and standard deviation <img src="https://latex.codecogs.com/png.latex?%5Csigma">”.</p>
</section>
<section id="a-selective-modeling-procedure" class="level3">
<h3 class="anchored" data-anchor-id="a-selective-modeling-procedure">A selective modeling procedure</h3>
<p>Now, suppose we are given a dataset of <img src="https://latex.codecogs.com/png.latex?N"> independent observations <img src="https://latex.codecogs.com/png.latex?(y_i,%20x_i)_%7Bi%20=%201,%20%5C,2,%5C,%20%5Cdots,%5C,N%7D">, and we would like to study the dependence of <img src="https://latex.codecogs.com/png.latex?Y"> from <img src="https://latex.codecogs.com/png.latex?X">. Of course we don’t know the true law, Equation&nbsp;1, but by a stroke of luck (or by a Taylor expansion argument) we make the correct initial guess that such dependence is linear in <img src="https://latex.codecogs.com/png.latex?X">. We are, however, unsure whether it would be appropriate to also include an intercept term in the fit. We thus establish the following selective modeling procedure:</p>
<ul>
<li>Fit a linear model with intercept term, <img src="https://latex.codecogs.com/png.latex?Y%20=%20mX%20+%20q%20+%20%5Cvarepsilon">.</li>
<li>Stop if the intercept estimate is significantly different from zero (say, at the level of 1-<img src="https://latex.codecogs.com/png.latex?%5Csigma">, <img src="https://latex.codecogs.com/png.latex?p%5Ctext%7B-value%7D%3C32%5C%25">). Otherwise:</li>
<li>Fit a model with no intercept, <img src="https://latex.codecogs.com/png.latex?Y%20=%20mX%20+%20%5Cvarepsilon">.</li>
</ul>
<p>Finally, we <em>use the last fitted model</em> to construct a “naive 95%” confidence interval <img src="https://latex.codecogs.com/png.latex?(%5Chat%20m_-,%20%5Chat%20m_+)"> for the slope <img src="https://latex.codecogs.com/png.latex?m">. This is defined by:</p>
<p><span id="eq-naive-ci-slope"><img src="https://latex.codecogs.com/png.latex?%0A%5Chat%20m_%5Cpm%20=%20%5Chat%20m%5Cpm%20t_%7B0.975,%20%5C,N-d%7D%20%5Ccdot%20%5Chat%20%5Csigma%20_%5Chat%20m%5Cqquad%20(95%5C%25%5C,%5Ctext%20%7BC.L.%7D).%0A%5Ctag%7B2%7D"></span></p>
<p>Here <img src="https://latex.codecogs.com/png.latex?t_%7B0.975,%5C,%20N-d%7D"> is the 97.5%-quantile of the <img src="https://latex.codecogs.com/png.latex?t">-student distribution with <img src="https://latex.codecogs.com/png.latex?N-d"> degrees of freedom, and <img src="https://latex.codecogs.com/png.latex?d"> is the number of estimated parameters, (<img src="https://latex.codecogs.com/png.latex?2"> or <img src="https://latex.codecogs.com/png.latex?1">, according to where we stopped in the modeling procedure). <img src="https://latex.codecogs.com/png.latex?%5Chat%20m"> and <img src="https://latex.codecogs.com/png.latex?%5Chat%20%5Csigma%20_%7B%5Chat%20m%7D"> are the Ordinary Least Squares (OLS) estimates of the slope and its standard deviation, respectively. These are the classical confidence intervals reported by the <code>lm()</code> function in R.</p>
<p>At a first glance, this procedure might look reasonable. After all, both intervals we may end up constructing do have a genuine 95% coverage probability, when constructed unconditionally… and by selecting the “best” model we’re supposedly choosing the “best” confidence interval. In spite of this qualitative argument, we inquire:</p>
</section>
<section id="does-it-work" class="level3">
<h3 class="anchored" data-anchor-id="does-it-work">… does it work?</h3>
<p>Now, the question is: how often do the naive CIs Equation&nbsp;2 cover the true parameter <img src="https://latex.codecogs.com/png.latex?m"> of Equation&nbsp;1? The answer better be “at least 95% of the times” for our confidence claim in Equation&nbsp;2 to be valid!</p>
<p>We can check the actual coverage of Equation&nbsp;2 through a simulation. Here I’ll assume <img src="https://latex.codecogs.com/png.latex?m%20=%20%5Csigma%20=%201">, and that the dataset consists of <img src="https://latex.codecogs.com/png.latex?N=10"> independent observations of <img src="https://latex.codecogs.com/png.latex?Y"> at fixed points <img src="https://latex.codecogs.com/png.latex?X%20=%20(1,%20%5C,2,%20%5C,%5Cdots%20,%5C,%2010)">.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">m <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sigma <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># True parameters</span></span>
<span id="cb1-2">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># x covariate, assumed fixed</span></span></code></pre></div>
</div>
<p>The following function generates observations of <img src="https://latex.codecogs.com/png.latex?Y"> according to the distribution Equation&nbsp;1:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">generate_y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, m, sigma) {</span>
<span id="cb2-2">    eps <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> sigma)</span>
<span id="cb2-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(m <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> eps)</span>
<span id="cb2-4">    }</span></code></pre></div>
</div>
<p>For example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">840</span>)</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(x, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">generate_y</span>(x, m, sigma), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://vgherard.github.io/posts/2022-10-18-posi/posi_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Below we generate <img src="https://latex.codecogs.com/png.latex?B=10%5E4"> such <img src="https://latex.codecogs.com/png.latex?(X,Y)"> datasets, for each of which we fit a linear model according to the procedure specified above, and check how many times the true slope <img src="https://latex.codecogs.com/png.latex?m%20=%201"> falls in the confidence interval defined by Equation&nbsp;2.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulation parameters</span></span>
<span id="cb4-2">B <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e4</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of replications</span></span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Preallocate logical vectors to be assigned for each replica - for efficiency. </span></span>
<span id="cb4-5">q_dropped <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">logical</span>(B)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Was the intercept term 'q' dropped? </span></span>
<span id="cb4-6">m_covered <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">logical</span>(B)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Was the true parameter 'm' covered?</span></span>
<span id="cb4-7"></span>
<span id="cb4-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set seed for reproducibility</span></span>
<span id="cb4-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">841</span>)</span>
<span id="cb4-10"></span>
<span id="cb4-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Logging</span></span>
<span id="cb4-12">time_start <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.time</span>()  </span>
<span id="cb4-13"></span>
<span id="cb4-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Start the simulation</span></span>
<span id="cb4-15"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (b <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>B) {</span>
<span id="cb4-16">    y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">generate_y</span>(x, m, sigma)</span>
<span id="cb4-17">    </span>
<span id="cb4-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fit full model (including intercept 'q')</span></span>
<span id="cb4-19">    fit <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)  </span>
<span id="cb4-20">    q_pval <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(fit)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>coefficients[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span>
<span id="cb4-21">    </span>
<span id="cb4-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Is 'q' term "significant"? If not, drop 'q' and fit a simpler model</span></span>
<span id="cb4-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (q_pval <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.32</span>)  { </span>
<span id="cb4-24">        q_dropped[[b]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb4-25">        fit <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) </span>
<span id="cb4-26">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb4-27">        q_dropped[[b]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb4-28">    }</span>
<span id="cb4-29">    </span>
<span id="cb4-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct CI for 'm', using the selected model's fit</span></span>
<span id="cb4-31">    m_ci <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">confint</span>(fit, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">level =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.95</span>)</span>
<span id="cb4-32">    m_covered[[b]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> m_ci[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> m <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> m <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> m_ci[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]]</span>
<span id="cb4-33">}</span>
<span id="cb4-34"></span>
<span id="cb4-35">time_end <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.time</span>()</span>
<span id="cb4-36"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Done :) Took "</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(time_end <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> time_start), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" seconds."</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Done :) Took  10.90042  seconds.</code></pre>
</div>
</div>
<p>The variable <code>m_covered[[b]]</code> is <code>TRUE</code> if the slope <img src="https://latex.codecogs.com/png.latex?m"> fell in the naive CI <img src="https://latex.codecogs.com/png.latex?(m_-,%20m_+)"> defined by Equation&nbsp;2 in the <code>b</code>-th replica of the simulation. Hence, the actual coverage fraction of the CI is given by:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(m_covered)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Actual coverage of naive "95%" CIs.</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.9172</code></pre>
</div>
</div>
<p>92%! If this difference from the nominal 95% coverage guarantee does not strike you as enormous, think about it in these terms: the naive CIs Equation&nbsp;2 fail to cover the true parameter about 8% of the times; This is a relative +60% of failures with respect to an honest 95% CI.</p>
</section>
<section id="whats-going-on" class="level3">
<h3 class="anchored" data-anchor-id="whats-going-on">What’s going on</h3>
<p>We can understand a bit better what’s happening here by decomposing the coverage probability as follows:</p>
<p><span id="eq-coverage-decomposition"><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%20%7BPr%7D(m%20%5Cin%20%5Ctext%7BCI%7D)%20=%0A%20%20%20%20%5Ctext%20%7BPr%7D(m%20%5Cin%20%5Ctext%7BCI%7D_%7Bq%20%5Ctext%7B%20dropped%7D%7D%5C,%5Cvert%5C,q%20%5Ctext%7B%20dropped%7D)%5Ccdot%20%5Ctext%20%7BPr%7D(q%20%5Ctext%7B%20dropped%7D)%20+%5Cnewline%0A%20%20%20%20+%5Ctext%20%7BPr%7D(m%20%5Cin%20%5Ctext%7BCI%7D_%7Bq%20%20%5Ctext%7B%20kept%7D%7D%5C,%5Cvert%5C,q%20%5Ctext%7B%20kept%7D)%5Ccdot%20%5Ctext%20%7BPr%7D(q%20%5Ctext%7B%20kept%7D)%0A%5Ctag%7B3%7D"></span></p>
<p>The right hand side of this equation shows how our selective modeling procedure alters the probability <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BPr%7D(m%5Cin%20%5Ctext%7BCI%7D)">. There are two contributing factors here: the probability of dropping the intercept term, and the covering probabilities of the CIs constructed in the two cases (<img src="https://latex.codecogs.com/png.latex?%5Ctext%7BCI%7D_%7Bq%20%5Ctext%7B%20dropped%7D%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BCI%7D_%7Bq%20%5Ctext%7B%20kept%7D%7D">). We can estimate all these probabilities as:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(q_dropped)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pr(q dropped)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.6782</code></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(m_covered[q_dropped])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pr(m covered | q dropped)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.9510469</code></pre>
</div>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(m_covered[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>q_dropped])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pr(m covered | q kept)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.845867</code></pre>
</div>
</div>
<p>The first result directly follows from our procedure, which uses a hypothesis test with significance <img src="https://latex.codecogs.com/png.latex?%5Calpha%20=%2032%5C%25"> to test the (true) null hypothesis <img src="https://latex.codecogs.com/png.latex?q%20=%200">. It is a bit harder but in fact possible to prove that<sup>4</sup> <img src="https://latex.codecogs.com/png.latex?%5Ctext%20%7BPr%7D(m%20%5Cin%20%5Ctext%7BCI%7D_%7Bq%20%5Ctext%7B%20dropped%7D%7D%5C,%5Cvert%5C,q%20%5Ctext%7B%20dropped%7D)%20=%2095%5C%25">, as the second estimate would seem to suggest. The third result is finally what invalidates the naive coverage guarantee in Equation&nbsp;2.</p>
</section>
<section id="concluding-remarks" class="level3">
<h3 class="anchored" data-anchor-id="concluding-remarks">Concluding Remarks</h3>
<p>To summarize:</p>
<ol type="1">
<li>We started with two linear models for <img src="https://latex.codecogs.com/png.latex?Y"> vs.&nbsp;<img src="https://latex.codecogs.com/png.latex?X">, which were in fact <em>both well-specified</em> (that is, correct).</li>
<li>We stipulated to choose one of the two models by testing the null hypothesis <img src="https://latex.codecogs.com/png.latex?q%20=%200">.</li>
<li>After selection, we constructed <img src="https://latex.codecogs.com/png.latex?95%5C%25"> confidence intervals for the slope <img src="https://latex.codecogs.com/png.latex?%5Chat%20m"> using the selected model, <em>as if this had been fixed in advance</em>.</li>
<li>A simulation shows that such intervals have a true coverage probability of <img src="https://latex.codecogs.com/png.latex?%5Capprox%2092%5C%25">.</li>
</ol>
<p>The mathematical explanation of the last result is provided by Equation&nbsp;3, while the (hopefully) plain English one in the introductory part of this post. I will conclude with a few parenthetical remarks.</p>
<p>First, the selective procedure proposed here would likely hardly be applied in practice in such a simple situation<sup>5</sup>. However, one could easily think of a more complex scenario with multiple covariates, where eliminating redundant ones could turn out to be beneficial for interpretation (if not compulsory, if the number of covariates exceeds the sample size).</p>
<p>Second, in order to avoid cluttering the discussion with too much technicalities, I have deliberately chosen a quite special point in true-model space (<img src="https://latex.codecogs.com/png.latex?q%20=%200">). This implies that both fits with and without intercept estimate the <em>same</em> slope <img src="https://latex.codecogs.com/png.latex?m">; this is a peculiar property of <img src="https://latex.codecogs.com/png.latex?q%20=%200">, which would not be true in the general case <img src="https://latex.codecogs.com/png.latex?q%20%5Cin%20%5Cmathbb%20R">. In general, we would have to carefully define the inferential targets for the <img src="https://latex.codecogs.com/png.latex?q=0"> and <img src="https://latex.codecogs.com/png.latex?q%20%5Cin%20%5Cmathbb%20R"> cases, in a differential manner.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>That was all for today. In the next post, I will discuss some mathematical details regarding the formulation of the Selective Inference problem in model-building. For those surviving down to the bottom of the funnel, my future plan is to review some (valid) selective inference methods I found interesting, including:</p>
<ul>
<li>Benjamini-Yekutieli control of False Coverage Rate <span class="citation" data-cites="benjamini2005false">(Benjamini and Yekutieli 2005)</span>,</li>
<li>POSI bounds for marginal coverage <span class="citation" data-cites="berk2013valid">(Berk et al. 2013)</span>,</li>
<li>Data Fission, an elegant generalization of good old data splitting <span class="citation" data-cites="https://doi.org/10.48550/arxiv.2112.11079">(Leiner et al. 2021)</span>.</li>
<li>…whatever cool stuff I may discover in the meantime.</li>
</ul>
<p>Ciao!</p>



</section>


<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-benjamini2005false" class="csl-entry">
Benjamini, Yoav, and Daniel Yekutieli. 2005. <span>“False Discovery Rate–Adjusted Multiple Confidence Intervals for Selected Parameters.”</span> <em>Journal of the American Statistical Association</em> 100 (469): 71–81.
</div>
<div id="ref-berk2013valid" class="csl-entry">
Berk, Richard, Lawrence Brown, Andreas Buja, Kai Zhang, and Linda Zhao. 2013. <span>“Valid Post-Selection Inference.”</span> <em>The Annals of Statistics</em>, 802–37.
</div>
<div id="ref-isidori2021significance" class="csl-entry">
Isidori, Gino, Davide Lancierini, Patrick Owen, and Nicola Serra. 2021. <span>“On the Significance of New Physics in b→ Sℓ+ ℓ- Decays.”</span> <em>Physics Letters B</em> 822: 136644.
</div>
<div id="ref-https://doi.org/10.48550/arxiv.2112.11079" class="csl-entry">
Leiner, James, Boyan Duan, Larry Wasserman, and Aaditya Ramdas. 2021. <span>“Data Fission: Splitting a Single Data Point.”</span> arXiv. <a href="https://doi.org/10.48550/ARXIV.2112.11079">https://doi.org/10.48550/ARXIV.2112.11079</a>.
</div>
<div id="ref-Shalizi:2020pmsi" class="csl-entry">
Shalizi, C. R. 2020. <span>“Post-Model-Selection Inference.”</span> 2020. <a href="http://bactra.org/notebooks/post-model-selection-inference.html">http://bactra.org/notebooks/post-model-selection-inference.html</a>.
</div>
<div id="ref-vrbik:2020ra" class="csl-entry">
Vrbik, Jan. 2020. <span>“Regression Analysis (Lecture Notes).”</span> 2020. <a href="http://spartan.ac.brocku.ca/~jvrbik/MATH3P82/notes.pdf">http://spartan.ac.brocku.ca/~jvrbik/MATH3P82/notes.pdf</a>.
</div>
</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Here, in the “extended family of models”, I’m also implicitly accounting for the multiplicity introduced by continuous model parameters and training parameters (also known as hyper-parameters).↩︎</p></li>
<li id="fn2"><p>The preferential method according to <span class="citation" data-cites="Shalizi:2020pmsi">(Shalizi 2020)</span>, from which I borrowed the “a-theoretical” description, and which I recommend as a starting point for literature review.↩︎</p></li>
<li id="fn3"><p>This is not to say that correctly accounting for Selective Inference is the default in scientific practice. A relevant example from the field I come from (Particle Physics), is documented in this stimulating reference: <span class="citation" data-cites="isidori2021significance">(Isidori et al. 2021)</span>.↩︎</p></li>
<li id="fn4"><p>I’m always amazed by the great deal of theory one can learn by running a dumb simulation, and trying to explain a posteriori what seems to be a too perfect result. Technically, this follows from the fact that the slope estimate <img src="https://latex.codecogs.com/png.latex?%5Chat%20m"> and residual sum of squares <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BRSS%7D"> of the reduced model, and the <img src="https://latex.codecogs.com/png.latex?F">-statistic used to test <img src="https://latex.codecogs.com/png.latex?q%20=%200">, are all independent random variables under the same null hypothesis, here true by construction. All these facts are in turn consequences of general theorems from linear model theory, see for example <span class="citation" data-cites="vrbik:2020ra">(Vrbik 2020, chap. 4)</span>… and, to be sure, it took me more than a single night without sleep to figure all this out.↩︎</p></li>
<li id="fn5"><p>And I’m actually not sure that, after properly taking into account Selective Inference, it would lead to a substantial gain in estimation accuracy, compared to simply fitting the possibly redundant model with intercept.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{gherardi2022,
  author = {Gherardi, Valerio},
  title = {How to Get Away with Selection. {Part} {I:} {Introduction}},
  date = {2022-11-14},
  url = {https://vgherard.github.io/posts/2022-10-18-posi/posi.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-gherardi2022" class="csl-entry quarto-appendix-citeas">
Gherardi, Valerio. 2022. <span>“How to Get Away with Selection. Part I:
Introduction.”</span> November 14, 2022. <a href="https://vgherard.github.io/posts/2022-10-18-posi/posi.html">https://vgherard.github.io/posts/2022-10-18-posi/posi.html</a>.
</div></div></section></div> ]]></description>
  <category>Statistics</category>
  <category>Selective Inference</category>
  <category>R</category>
  <guid>https://vgherard.github.io/posts/2022-10-18-posi/posi.html</guid>
  <pubDate>Sun, 13 Nov 2022 23:00:00 GMT</pubDate>
</item>
<item>
  <title>kgrams v0.1.2 on CRAN</title>
  <dc:creator>Valerio Gherardi</dc:creator>
  <link>https://vgherard.github.io/posts/2021-11-13-kgrams-v012-released/kgrams-v012-released.html</link>
  <description><![CDATA[ 





<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>Version v0.1.2 of my R package <a href="https://github.com/vgherard/kgrams">kgrams</a> was just accepted by CRAN. This package provides tools for training and evaluating k-gram language models in R, supporting several probability smoothing techniques, perplexity computations, random text generation and more.</p>
</section>
<section id="short-demo" class="level2">
<h2 class="anchored" data-anchor-id="short-demo">Short demo</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(kgrams)</span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get k-gram frequency counts from Shakespeare's "Much Ado About Nothing"</span></span>
<span id="cb1-3">freqs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kgram_freqs</span>(kgrams<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>much_ado, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">N =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Build modified Kneser-Ney 4-gram model, with discount parameters D1, D2, D3.</span></span>
<span id="cb1-6">mkn <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">language_model</span>(freqs, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">smoother =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mkn"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">D1 =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">D2 =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">D3 =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>)</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample sentences from the language model at different temperatures</span></span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">840</span>)</span>
<span id="cb1-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_sentences</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">model =</span> mkn, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max_length =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">t =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "i have studied eight or nine truly by your office [...] (truncated output)"
[2] "ere you go : &lt;EOS&gt;"                                                        
[3] "don pedro welcome signior : &lt;EOS&gt;"                                         </code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_sentences</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">model =</span> mkn, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max_length =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">t =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "i will not be sworn but love may transform me [...] (truncated output)" 
[2] "i will not fail . &lt;EOS&gt;"                                                
[3] "i will go to benedick and counsel him to fight [...] (truncated output)"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_sentences</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">model =</span> mkn, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max_length =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">t =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "july cham's incite start ancientry effect torture tore pains endings [...] (truncated output)"   
[2] "lastly gallants happiness publish margaret what by spots commodity wake [...] (truncated output)"
[3] "born all's 'fool' nest praise hurt messina build afar dancing [...] (truncated output)"          </code></pre>
</div>
</div>
</section>
<section id="news" class="level2">
<h2 class="anchored" data-anchor-id="news">NEWS</h2>
<section id="overall-software-improvements" class="level3">
<h3 class="anchored" data-anchor-id="overall-software-improvements">Overall Software Improvements</h3>
<ul>
<li>The package’s test suite has been greatly extended.</li>
<li>Improved error/warning conditions for wrong arguments.</li>
<li>Re-enabled compiler diagnostics as per CRAN policy (#19)</li>
</ul>
</section>
<section id="api-changes" class="level3">
<h3 class="anchored" data-anchor-id="api-changes">API Changes</h3>
<ul>
<li><code>verbose</code> arguments now default to <code>FALSE</code>.</li>
<li><code>probability()</code>, <code>perplexity()</code> and <code>sample_sentences()</code> are restricted to accept only <code>language_model</code> class objects as their <code>model</code> argument.</li>
</ul>
</section>
<section id="new-features" class="level3">
<h3 class="anchored" data-anchor-id="new-features">New features</h3>
<ul>
<li><code>as_dictionary(NULL)</code> now returns an empty <code>dictionary</code>.</li>
</ul>
</section>
<section id="bug-fixes" class="level3">
<h3 class="anchored" data-anchor-id="bug-fixes">Bug Fixes</h3>
<ul>
<li>Fixed bug causing <code>.preprocess</code> and <code>.tknz_sent</code> arguments to be ignored in <code>process_sentences()</code>.</li>
<li>Fixed previously wrong defaults for <code>max_lines</code> and <code>batch_size</code> arguments in <code>kgram_freqs.connection()</code>.</li>
<li>Added print method for class <code>dictionary</code>.</li>
<li>Fixed bug causing invalid results in <code>dictionary()</code> with batch processing and non-trivial size constraints on vocabulary size.</li>
</ul>
</section>
<section id="other" class="level3">
<h3 class="anchored" data-anchor-id="other">Other</h3>
<ul>
<li>Maintainer’s email updated</li>
</ul>


</section>
</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{gherardi2021,
  author = {Gherardi, Valerio},
  title = {Kgrams V0.1.2 on {CRAN}},
  date = {2021-11-13},
  url = {https://vgherard.github.io/posts/2021-11-13-kgrams-v012-released/kgrams-v012-released.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-gherardi2021" class="csl-entry quarto-appendix-citeas">
Gherardi, Valerio. 2021. <span>“Kgrams V0.1.2 on CRAN.”</span> November
13, 2021. <a href="https://vgherard.github.io/posts/2021-11-13-kgrams-v012-released/kgrams-v012-released.html">https://vgherard.github.io/posts/2021-11-13-kgrams-v012-released/kgrams-v012-released.html</a>.
</div></div></section></div> ]]></description>
  <category>Natural Language Processing</category>
  <category>R</category>
  <guid>https://vgherard.github.io/posts/2021-11-13-kgrams-v012-released/kgrams-v012-released.html</guid>
  <pubDate>Fri, 12 Nov 2021 23:00:00 GMT</pubDate>
</item>
<item>
  <title>{r2r} now on CRAN</title>
  <dc:creator>Valerio Gherardi</dc:creator>
  <link>https://vgherard.github.io/posts/2021-07-06-r2r/r2r.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>My package <code>{r2r}</code> (v0.1.1) has been accepted by <a href="https://CRAN.R-project.org/package=r2r">CRAN</a>, and is now available for download from the public repository.</p>
<section id="r2r" class="level2">
<h2 class="anchored" data-anchor-id="r2r">r2r</h2>
<!-- badges: start -->
<p><a href="https://CRAN.R-project.org/package=r2r"><img src="https://www.r-pkg.org/badges/version/r2r.png" class="img-fluid" alt="CRAN status"></a> <a href="https://github.com/vgherard/r2r/actions"><img src="https://github.com/vgherard/r2r/workflows/R-CMD-check/badge.svg" class="img-fluid" alt="R-CMD-check"></a> <a href="https://codecov.io/gh/vgherard/r2r?branch=master"><img src="https://codecov.io/gh/vgherard/r2r/branch/master/graph/badge.svg" class="img-fluid" alt="Codecov test coverage"></a></p>
<!-- badges: end -->
<p><a href="https://vgherard.github.io/r2r/"><code>r2r</code></a> provides a flexible implementation of hash tables in R, allowing for:</p>
<ul>
<li>arbitrary R objects as keys and values,</li>
<li>arbitrary key comparison and hash functions,</li>
<li>customizable behaviour (throw or return a default value) on missing key exceptions.</li>
</ul>
</section>
<section id="installation" class="level2">
<h2 class="anchored" data-anchor-id="installation">Installation</h2>
<p>You can install the released version of <code>r2r</code> from <a href="https://CRAN.R-project.org/package=r2r">CRAN</a> with:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r2r"</span>)</span></code></pre></div>
<p>and the development version from <a href="https://vgherard.r-universe.dev/">my R-universe repository</a>, with:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r2r"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">repos =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://vgherard.r-universe.dev"</span>)</span></code></pre></div>
</section>
<section id="usage" class="level2">
<h2 class="anchored" data-anchor-id="usage">Usage</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(r2r)</span>
<span id="cb3-2">m <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hashmap</span>()</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Insert and query a single key-value pair</span></span>
<span id="cb3-5">m[[ <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span> ]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vgherard"</span></span>
<span id="cb3-6">m[[ <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span> ]]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "vgherard"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Insert and query multiple key-value pairs</span></span>
<span id="cb5-2">m[ <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) ] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"one"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"two"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"three"</span>)</span>
<span id="cb5-3">m[ <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) ]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] "one"

[[2]]
[1] "three"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Keys and values can be arbitrary R objects</span></span>
<span id="cb7-2">m[[ <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> wt, mtcars) ]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb7-3">m[[ <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> wt, mtcars) ]]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  TRUE FALSE  TRUE</code></pre>
</div>
</div>
</section>
<section id="getting-help" class="level2">
<h2 class="anchored" data-anchor-id="getting-help">Getting help</h2>
<p>For further details, including an introductory vignette illustrating the features of <code>r2r</code> hash maps, you can consult the <code>r2r</code> <a href="https://vgherard.github.io/r2r/">website</a>. If you encounter a bug, want to suggest a feature or need further help, you can <a href="https://github.com/vgherard/r2r/issues">open a GitHub issue</a>.</p>
</section>
<section id="comparison-with-hash" class="level2">
<h2 class="anchored" data-anchor-id="comparison-with-hash">Comparison with <code>hash</code></h2>
<p>CRAN package <a href="https://CRAN.R-project.org/package=hash"><code>{hash}</code></a> also offers an implementation of hash tables based on R environments. The two tables below offer a comparison between <code>{r2r}</code> and <code>{hash}</code> (for more details, see the <a href="https://vgherard.github.io/r2r/articles/benchmarks.html">benchmarks</a> Vignette)</p>
<div class="cell">
<div class="cell-output-display">
<table class="caption-top table table-sm table-striped small">
<caption>Features supported by {r2r} and {hash}.</caption>
<colgroup>
<col style="width: 57%">
<col style="width: 21%">
<col style="width: 21%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Feature</th>
<th style="text-align: center;">r2r</th>
<th style="text-align: center;">hash</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Basic data structure</td>
<td style="text-align: center;">R environment</td>
<td style="text-align: center;">R environment</td>
</tr>
<tr class="even">
<td style="text-align: center;">Arbitrary type keys</td>
<td style="text-align: center;">X</td>
<td style="text-align: center;"></td>
</tr>
<tr class="odd">
<td style="text-align: center;">Arbitrary type values</td>
<td style="text-align: center;">X</td>
<td style="text-align: center;">X</td>
</tr>
<tr class="even">
<td style="text-align: center;">Arbitrary hash function</td>
<td style="text-align: center;">X</td>
<td style="text-align: center;"></td>
</tr>
<tr class="odd">
<td style="text-align: center;">Arbitrary key comparison function</td>
<td style="text-align: center;">X</td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td style="text-align: center;">Throw or return default on missing keys</td>
<td style="text-align: center;">X</td>
<td style="text-align: center;"></td>
</tr>
<tr class="odd">
<td style="text-align: center;">Hash table inversion</td>
<td style="text-align: center;"></td>
<td style="text-align: center;">X</td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="cell">
<div class="cell-output-display">
<table class="caption-top table table-sm table-striped small">
<caption>Performances of {r2r} and {hash} for basic hash table operations.</caption>
<thead>
<tr class="header">
<th style="text-align: center;">Task</th>
<th style="text-align: center;">Comparison</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Key insertion</td>
<td style="text-align: center;">{r2r} ~ {hash}</td>
</tr>
<tr class="even">
<td style="text-align: center;">Key query</td>
<td style="text-align: center;">{r2r} &lt; {hash}</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Key deletion</td>
<td style="text-align: center;">{r2r} &lt;&lt; {hash}</td>
</tr>
</tbody>
</table>
</div>
</div>


</section>
</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{gherardi2021,
  author = {Gherardi, Valerio},
  title = {\{R2r\} Now on {CRAN}},
  date = {2021-07-06},
  url = {https://vgherard.github.io/posts/2021-07-06-r2r/r2r.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-gherardi2021" class="csl-entry quarto-appendix-citeas">
Gherardi, Valerio. 2021. <span>“{R2r} Now on CRAN.”</span> July 6, 2021.
<a href="https://vgherard.github.io/posts/2021-07-06-r2r/r2r.html">https://vgherard.github.io/posts/2021-07-06-r2r/r2r.html</a>.
</div></div></section></div> ]]></description>
  <category>Data Structures</category>
  <category>R</category>
  <guid>https://vgherard.github.io/posts/2021-07-06-r2r/r2r.html</guid>
  <pubDate>Mon, 05 Jul 2021 22:00:00 GMT</pubDate>
</item>
</channel>
</rss>
