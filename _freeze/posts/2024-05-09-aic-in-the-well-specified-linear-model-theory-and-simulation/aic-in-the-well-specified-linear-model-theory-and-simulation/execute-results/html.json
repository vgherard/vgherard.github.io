{
  "hash": "24fe739f6e7571f62d035ad40aa0a524",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"AIC in the well-specified linear model: theory and simulation\"\ndescription: |\n  Some illustrations of the Akaike Information Criterion (AIC) at work in a toy \n  example.\ndate: 2024-05-17\ncategories: \n  - Model Selection\n  - Linear Models\n  - Regression\n  - Statistics\n  - R\ndraft: false\n---\n\n\n## Theory\n\n### AIC\n\nConsider the AIC for the usual linear model $Y = X\\beta + \\varepsilon$:\n\n$$\n\\text{AIC} = \\frac{1}{2}\\ln(2\\pi e\\hat \\sigma^2)+\\frac{p+1}{N}\n$$ {#eq-aic}\n\nwhere $p$ is the dimension of the covariate vector $X$ and $\\hat \\sigma ^2$ is the ML estimate of the $Y\\vert X$ conditional variance. The expectation of @eq-aic under model assumptions can be found by using the fact that, for a $\\chi^2$ random variable with $\\nu$ degrees of freedom[^1]:\n\n[^1]: See *e.g.* [1503.06266](https://arxiv.org/pdf/1503.06266)\n\n$$\n\\mathbb E(\\ln\\chi ^2 )=\\ln2+ \\psi(\\frac{\\nu}{2})\n$$ {#eq-expec-log-X2}\n\nwhere: $$\n\\psi(x)\\equiv\\frac{\\text d}{\\text d x}\\ln \\Gamma(x) \\approx \\ln x-\\frac{1}{2x}\n$$ {#eq-psi-fun}\n\nand the second equality results from the Stirling approximation $\\Gamma(x) = \\sqrt{2\\pi}x^{x-\\frac{1}{2}}e^{-x}$. We obtain:\n\n$$\n\\mathbb E(\\text{AIC}) = \\frac{\\ln \\left[2\\pi e\\mathbb V(Y\\vert X)\\right] }{2}+\\frac{1}{2}\\ln\\left(\\frac{N-p}{2}\\right)-\\frac{1}{2}\\frac{1}{N-p}+\\frac{p+1}{N},\n$$ {#eq-expec-aic}\n\nwhere, according to standard assumptions, $\\mathbb V(Y \\vert X)$ is assumed to be constant in $X$.\n\nNow consider two such models, with different covariate vectors $X_1$ and $X_2$, of dimension $p_1$ and $p_2$ respectively, both assumed to be well specified. Denote, as before:\n\n$$\n\\text{AIC}_i =\\frac{1}{2}\\ln(2\\pi e\\hat \\sigma^2_i)+\\frac{p_i+1}{N} \n$$ {#eq-aic-i}\n\nfor $i = 1,\\,2$. @eq-expec-aic gives the unconditional expectation of $\\text{AIC}$ for both models[^2], so that:\n\n[^2]: The same equation actually gives the expectation of $\\text{AIC}$ conditional to the in-sample covariate vector $\\mathbb X$. Since this conditioning differs for the two different models involving $X_1$ and $X_2$, in our comparison of expected values we must interpret this as unconditional expectations, in general.\n\n$$\n\\mathbb E(\\text{AIC}_1 - \\text{AIC}_2) = \\frac{1}{2}\\ln\\left(\\frac{\\mathbb V(Y\\vert X_1)}{\\mathbb V(Y\\vert X_2)}\\right)+\\frac{p_1-p_2}{2N}+\\mathcal O(N^{-2}).\n$$ {#eq-delta-expec-aic}\n\nAssuming, without loss of generality, that $p_1 \\leq p_2$, we have:\n\n$$\n\\mathbb E(\\text{AIC}_1 - \\text{AIC}_2) < 0 \\iff N < \\frac{p_2-p_1}{\\ln\\left(\\frac{\\mathbb V(Y\\vert X_1)}{\\mathbb V(Y\\vert X_2)}\\right)}.\n$$ {#eq-aic-condition}\n\nTo gain some intuition, suppose that the set of variables contained in $X_1$ is a subset of those contained in $X_2$, so that the two corresponding models are nested. @eq-aic-condition tells us that, for $N$ below a certain threshold, AIC will prefer the more \"parsimonious\" model involving $X_1$ only. In particular, if $\\mathbb V(Y\\vert X_1)\\approx \\mathbb V(Y\\vert X_2)$, we can make a first-order approximation in the RHS of @eq-aic-condition, that yields:\n\n$$\nN \\lesssim \\frac{\\mathbb V(Y\\vert X_2)}{\\mathbb V(Y\\vert X_1)-\\mathbb V(Y\\vert X_2)}(p_2-p_1).\n$$ {#eq-aic-condition-approx}\n\n### Cross-entropy\n\nIn parallel to AIC, we can consider the exact \"information criterion\" provided by the model in-sample cross-entropy under the true data generating process. For a single linear model, the in-sample cross-entropy is:\n\n$$\n\\text{CE}_{\\text {in}} = \\frac{1}{2}\\ln(2\\pi e \\hat \\sigma ^2) +\\frac{1}{2}\\frac{\\sigma ^2-\\hat \\sigma ^2+\\frac{1}{N}(\\beta-\\hat{\\beta})^{T}\\mathbf{X}^{T}\\mathbf{X}(\\beta-\\hat{\\beta})}{\\hat \\sigma ^2}.\n$$ {#eq-in-sample-cross-entropy}\n\n(\"in-sample\" refers to the fact that we fix, *i.e.* condition, on the covariate vector of the training sample, $\\mathbf X$.) The $\\mathbf X$ conditional expectation of $\\text{CE}_{\\text {in}}$, again under model assumptions, can be computed by noticing two facts:\n\n-   The numerator and denominator are conditionally independent $\\chi^2$ variables with $p$ and $N-p$ degrees of freedom respectively. This can be seen by rewriting these as $\\boldsymbol \\epsilon ^T \\mathbf H \\boldsymbol \\epsilon$, and $\\boldsymbol \\epsilon ^T (1-\\mathbf H) \\boldsymbol \\epsilon$, respectively, where $\\mathbf H = \\mathbf X (\\mathbf X ^T \\mathbf X)^{-1} \\mathbf X ^T$ as usual.\n-   For a $\\chi ^2$ random variable with $\\nu$ degrees of freedom we have $\\mathbb E(\\frac{1}{\\chi ^2})=\\frac{1}{\\nu - 2}$.\n\nUsing these results, we can show that:\n\n$$\n\\mathbb E(\\text{CE}_{\\text {in}}\\vert \\mathbf X)=\\mathbb E(\\text{AIC}\\vert \\mathbf X)+\\mathcal O(N^{-2})\n$$ {#eq-aic-vs-ce}\n\n(an equation which is true by design of AIC).\n\nBefore rushing to the (wrong) conclusion that $\\text{AIC}_1 - \\text{AIC}_2$ will correspondingly estimate a difference of expected cross-entropies, let us notice that the relevant in-sample cross-entropy to be considered for model evaluation is @eq-in-sample-cross-entropy with $\\mathbf X$ *corresponding to the full covariate vector*: this is the target we should try to estimate (at least to the extent that our goal is predicting $Y$ given $X$). For this reason, strictly speaking, @eq-aic-vs-ce is exact only if our model is well specified as a model of $Y \\vert X$. Otherwise, in order to estimate consistently $\\mathbb E(\\text{CE}_{\\text {in}}\\vert \\mathbf X)$, we should use Takeuchi's Information Criterion (TIC) rather than AIC.\n\nA bit more pragmatically, in the real world we could assume the remainder of @eq-aic-vs-ce to be $\\mathcal O (N^{-1})$ (rather than $\\mathcal O (N^{-2})$), but generally small with respect the leading order AIC correction ($\\frac{p+1}{N}$). This will be the case if the models being compared are approximately well specified.\n\n## Simulation\n\n### Setup\n\nWe take the data generating process to be:\n\n$$\nY = m X + q + \\varepsilon, \n$$ {#eq-dgp-sim}\n\nwith:\n\n$$\nX \\sim \\mathcal N (0,\\,1),\\quad \\varepsilon \\sim \\mathcal N(0,\\,1),\\quad \\varepsilon \\perp X.\n$$ {#eq-dgp-sim-2}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm <- 0.1\nq <- 0\n\nrxy <- function(n) {\n\ttibble(\n\t\tx = rnorm(n, sd = 1),\n\t\ty = m * x + q + rnorm(n, sd = 1)\n\t\t)\n}\n```\n:::\n\n\nWe compare the model with *vs.* without slope term ($m = 0$ *vs.* $m \\neq 0$), which we will denote by suffixes $1$ and $1\\oplus X$, respectively. The functions below compute AIC and in-sample cross-entropy from the corresponding `lm` objects. We also define a \"Naive Information Criterion\" $\\text{NIC} \\equiv \\log(\\hat \\sigma)$.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnic <- function(fit) {\n\tp <- length(coef(fit))\n\tn <- nobs(fit)\n\tsigma_hat <- sigma(fit) * sqrt((n - p) / n)\n\t\n\tlog(sigma_hat)\n}\n\naic <- function(fit) {\n\tp <- length(coef(fit))\n\tn <- nobs(fit)\n\tsigma_hat <- sigma(fit) * sqrt((n - p) / n)\n\t\n\tlog(sigma_hat) + (p + 1) / n + 0.5 *(1 + log(2*pi))\n}\n\nce <- function(fit, data) {\n\tp <- length(coef(fit))\n\tn <- nobs(fit)\n\tsigma_hat <- sigma(fit) * sqrt((n - p) / n)\n\ty_hat <- fitted(fit)\n\tmu <- data$x * m + q\n\t\n\tres <- 0\n\tres <- res + 0.5 / (sigma_hat^2)\n\tres <- res + log(sigma_hat)\n\tres <- res + mean(0.5 * (y_hat - mu)^2 / (sigma_hat^2))\n\tres <- res + 0.5 * log(2 * pi)\n\n\treturn(res)\n}\n```\n:::\n\n\nFrom our results above, we expect:\n\n$$\n\\mathbb E(\\text{AIC}_{1\\oplus X}-\\text{AIC}_{1} )<0 \\iff N \\geq \\frac{1}{\\ln(1+m^2)}\\left(1+\\mathcal O(m^2 )\\right)\n$$ {#eq-delta-expec-aic-sim}\n\nThe expected in-sample cross-entropies cannot be computed explicitly, but for relatively small $m^2$ we expect (*cf.* @eq-aic-vs-ce):\n\n$$\n\\mathbb E((\\text{CE}_{\\text {in}})_i)=\\mathbb E(\\text{AIC}_i)+\\mathcal O(N^{-2},\\,m^2N^{-1}),\n$$ {#eq-aic-vs-ce-sim}\n\nI will use tidyverse for plotting results.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(ggplot2)\n```\n:::\n\n\nIn order to make results reproducible let's:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(840)\n```\n:::\n\n\n### Results\n\nWe simulate fitting models $1$ and $1\\oplus X$ at different sample sizes from the data generating process described above.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfits <-\ttidyr::expand_grid(\n\t\tn = 10 ^ seq(from = 1, to = 3, by = 0.5), b = 1:1e3\n\t\t) |>\n\tmutate(data = lapply(n, rxy)) |>\n\tgroup_by(n, b, data) |>\n\ttidyr::expand(model = c(y ~ 1, y ~ x)) |>\n\tungroup() |>\n\tmutate(\n\t\tfit = lapply(row_number(), \\(i) lm(model[[i]], data = data[[i]])),\n\t\tce = sapply(row_number(), \\(i) ce(fit[[i]], data[[i]])),\n\t\taic = sapply(fit, aic),\n\t\tnic = sapply(fit, nic),\n\t\tmodel = format(model)\n\t\t) |>\n\tselect(-c(fit, data))\n```\n:::\n\n\nThe plots below show the dependence from sample size of $\\mathbb E(\\Delta\\text{AIC})$ and $\\mathbb E(\\Delta\\text{CE}_\\text{in})$, as well as AIC selection frequencies. Notice that for $N = \\frac{1}{m^2}$, even though $\\mathbb E(\\Delta\\text{AIC}) = 0$, the selection frequency of the \"complex\" model $1\\oplus X$ is still below $\\text{50 %}$. This is because the distribution of $\\Delta\\text{AIC}$ is asymmetric, as seen in the second plot, and $\\mathbb E(\\Delta\\text{AIC}) < \\text {median}(\\Delta\\text{AIC})$.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfits |>\n\tmutate(\n\t\tis_baseline = model == \"y ~ 1\",\n\t\tdelta_ce = ce - ce[is_baseline], \n\t\tdelta_aic = aic - aic[is_baseline],\n\t\tdelta_nic = nic - nic[is_baseline],\n\t\t.by = c(n, b),\n\t\t) |>\n\tfilter(!is_baseline) |>\n\tsummarise(\n\t\t`E( ΔCE )` = mean(delta_ce), \n\t\t`E( ΔAIC )` = mean(delta_aic),\n\t\t`E( ΔNIC )` = mean(delta_nic),\n\t\t.by = n\n\t\t) |>\n\ttidyr::pivot_longer(\n\t\t-n, names_to = \"metric\", values_to = \"value\"\n\t) |>\n\tggplot(aes(x = n, y = value, color = metric)) +\n\t\tgeom_point() +\n\t\tgeom_line() +\n\t\tgeom_hline(yintercept = 0, linetype = \"dashed\") +\n\t\tgeom_vline(aes(xintercept = 1 / m^2), linetype = \"dotted\") +\n\t\tscale_x_log10(\"Sample Size\") +\n\t\tcoord_cartesian(ylim = c(-0.025, 0.025)) + ylab(expression(IC)) +\n\t\ttheme(legend.position = \"bottom\", legend.title = element_blank()) +\n\t\tggtitle(\"AIC vs. in-sample cross-entropy\", \"Expected values\") +\n\t\tNULL\n```\n\n::: {.cell-output-display}\n![](aic-in-the-well-specified-linear-model-theory-and-simulation_files/figure-html/aic_exp-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfits |>\n\tfilter(aic == min(aic), .by = c(n, b)) |>\n\tsummarise(count = n(), .by = c(n, model)) |>\n\tggplot(aes(fill = model, x = n, y = count)) + \n\t\tgeom_col() + \n\t\tscale_x_log10(\"Sample Size\") +\n\t\tylab(\"Count\") +\n\t\ttheme(legend.position = \"bottom\") +\n\t\tggtitle(\"AIC model selection frequencies\")\n```\n\n::: {.cell-output-display}\n![](aic-in-the-well-specified-linear-model-theory-and-simulation_files/figure-html/aic_freq-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfits |>\n\tfilter(n %in% c(10, 100, 1000)) |>\n\tmutate(delta_aic = aic - aic[model == \"y ~ 1\"], .by = c(n, b)) |>\n\tfilter(model != \"y ~ 1\") |>\n\tmutate(expec = -0.5 * log(1 + m^2) + 0.5 / n) |>\n\tggplot(aes(x = delta_aic, color = as.factor(n))) +\n\t\tgeom_density() +\n\t\tcoord_cartesian(xlim = c(-0.1, NA)) +\n\t\tlabs(x = \"ΔAIC\", y = \"Density\", color = \"Sample Size\") +\n\t\tggtitle(\"ΔAIC probability density\")\n```\n\n::: {.cell-output-display}\n![](aic-in-the-well-specified-linear-model-theory-and-simulation_files/figure-html/aic_density-1.png){width=672}\n:::\n:::\n\n\nFinally, here is something I have no idea where it comes from. The plot below shows the scatterplot of in-sample cross-entropy differences *vs.* the AIC differences. It is well known that AIC only estimates the expectation of these differences, averaged over potential training samples. One may ask whether AIC has anything to say about the actual cross-entropy difference for the estimated models, conditional on the realized training sample.\n\nAssuming I have made no errors here, the tilted-U shape of this scatterplot is a clear negative answer. What's especially interesting is that, apparently, these differences have a negative correlation. I fail to see where do the negative correlation and the U-shape come from.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfits |>\t\n\tfilter(n == 100) |>\n\tmutate(\n\t\tis_baseline = model == \"y ~ 1\",\n\t\tdelta_ce = ce - ce[is_baseline], \n\t\tdelta_aic = aic - aic[is_baseline],\n\t\t.by = c(n, b),\n\t\t) |>\n\tfilter(!is_baseline) |>\n\tggplot(aes(x = delta_aic, y = delta_ce)) +\n\t\tgeom_point(size = 1, alpha = 0.2) +\n\t\tlims(x = c(-0.02, 0.01), y = c(-0.01, 0.03)) +\n\t\tlabs(x = \"ΔAIC\", y = \"ΔCE\") +\n\t\tggtitle(\"AIC vs. in-sample cross-entropy\", \"Point values for N = 100\") +\n\t\tNULL\n```\n\n::: {.cell-output-display}\n![](aic-in-the-well-specified-linear-model-theory-and-simulation_files/figure-html/aic_vs_ce_2-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "aic-in-the-well-specified-linear-model-theory-and-simulation_files\\figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}