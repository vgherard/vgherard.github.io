{
  "hash": "b16cfe0c18af9dc22fb3eed67580238e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"{r2r} now on CRAN\"\ndescription: |\n  Introducing {r2r}, an R implementation of hash tables.\ndate: 07-06-2021\ncategories:\n  - Data Structures\n  - R\ndraft: false\n---\n\n\n\n# Introduction\n\nMy package `{r2r}` (v0.1.1) has been accepted by [CRAN](https://CRAN.R-project.org/package=r2r), and is now available for download from the public repository.\n\n## r2r\n\n<!-- badges: start -->\n\n[![CRAN status](https://www.r-pkg.org/badges/version/r2r)](https://CRAN.R-project.org/package=r2r) [![R-CMD-check](https://github.com/vgherard/r2r/workflows/R-CMD-check/badge.svg)](https://github.com/vgherard/r2r/actions) [![Codecov test coverage](https://codecov.io/gh/vgherard/r2r/branch/master/graph/badge.svg)](https://codecov.io/gh/vgherard/r2r?branch=master)\n\n<!-- badges: end -->\n\n[`r2r`](https://vgherard.github.io/r2r/) provides a flexible implementation of hash tables in R, allowing for:\n\n-   arbitrary R objects as keys and values,\n-   arbitrary key comparison and hash functions,\n-   customizable behaviour (throw or return a default value) on missing key exceptions.\n\n## Installation\n\nYou can install the released version of `r2r` from [CRAN](https://CRAN.R-project.org/package=r2r) with:\n\n``` r\ninstall.packages(\"r2r\")\n```\n\nand the development version from [my R-universe repository](https://vgherard.r-universe.dev/), with:\n\n``` r\ninstall.packages(\"r2r\", repos = \"https://vgherard.r-universe.dev\")\n```\n\n## Usage\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(r2r)\nm <- hashmap()\n\n# Insert and query a single key-value pair\nm[[ \"user\" ]] <- \"vgherard\"\nm[[ \"user\" ]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"vgherard\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# Insert and query multiple key-value pairs\nm[ c(1, 2, 3) ] <- c(\"one\", \"two\", \"three\")\nm[ c(1, 3) ]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"one\"\n\n[[2]]\n[1] \"three\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# Keys and values can be arbitrary R objects\nm[[ lm(mpg ~ wt, mtcars) ]] <- c(TRUE, FALSE, TRUE)\nm[[ lm(mpg ~ wt, mtcars) ]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE FALSE  TRUE\n```\n\n\n:::\n:::\n\n\n\n## Getting help\n\nFor further details, including an introductory vignette illustrating the features of `r2r` hash maps, you can consult the `r2r` [website](https://vgherard.github.io/r2r/). If you encounter a bug, want to suggest a feature or need further help, you can [open a GitHub issue](https://github.com/vgherard/r2r/issues).\n\n## Comparison with `hash`\n\nCRAN package [`{hash}`](https://CRAN.R-project.org/package=hash) also offers an implementation of hash tables based on R environments. The two tables below offer a comparison between `{r2r}` and `{hash}` (for more details, see the [benchmarks](https://vgherard.github.io/r2r/articles/benchmarks.html) Vignette)\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\nTable: Features supported by {r2r} and {hash}.\n\n|                 Feature                 |      r2r      |     hash      |\n|:---------------------------------------:|:-------------:|:-------------:|\n|          Basic data structure           | R environment | R environment |\n|           Arbitrary type keys           |       X       |               |\n|          Arbitrary type values          |       X       |       X       |\n|         Arbitrary hash function         |       X       |               |\n|    Arbitrary key comparison function    |       X       |               |\n| Throw or return default on missing keys |       X       |               |\n|          Hash table inversion           |               |       X       |\n\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n\nTable: Performances of {r2r} and {hash} for basic hash table operations.\n\n|     Task      |   Comparison    |\n|:-------------:|:---------------:|\n| Key insertion | {r2r} ~ {hash}  |\n|   Key query   | {r2r} < {hash}  |\n| Key deletion  | {r2r} << {hash} |\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}