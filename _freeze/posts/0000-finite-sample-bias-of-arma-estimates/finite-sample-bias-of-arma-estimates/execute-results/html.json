{
  "hash": "a90a357ab753f1bbd0d2c12ff5f5d7f5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Finite sample bias of ARMA estimates\"\ndescription: |\n  A short description of the post.\nauthor:\n  - name: vgherard\n    url: https://vgherard.github.io\ndate: 2023-06-08\noutput:\n  distill::distill_article:\n    self_contained: false\ndraft: true\n---\n\n\n\n\n## Intro\n\nFitting ARMA models on short time series datasets can be challenging from various points of view. A purely technical difficulty is the fact that, even for well specified models, coefficient estimates obtained from maximum likelihood estimation are biased. More generally, the sampling distribution of estimators can deviate substantially from their asymptotic Gaussian distribution, invalidating naive constructions like normal confidence intervals (*i.e.* $\\text{Estimate} \\pm k \\cdot \\text{SE}$)\n\nConsider, for example, a stationary $\\text{AR}(1)$ process:\n\n$$\nY_{t+1} =  \\mu + \\alpha \\cdot (Y_t-\\mu) +\\epsilon _t,\\quad \\epsilon _t\\sim \\mathcal N(0,\\sigma ^2), (\\#eq:AR1)\n$$ and denote by $\\hat \\alpha _n$ the maximum likelihood estimate of $\\alpha$ from a series of $n$ data points. It is only in the $n\\to \\infty$ limit that $\\mathbb E (\\hat \\alpha _n) \\to \\alpha$, but for small $n$, the bias can be severe. Furthermore, as I show below, the distribution of $\\hat \\alpha _n$ has a heavy left tail, which results in a decent probability of estimating a negative correlation between $Y_{t+1}$ and $Y_t$. Altogether, even with a simple model like \\@ref(eq:AR1), parameter estimation in the low sample size regime is not trivial.\n\nWith these considerations in mind, I set out myself to construct an (approximately) unbiased estimator for the $\\alpha$ parameter in Eq. \\@ref(eq:AR1), and a corresponding confidence interval. Eq. \\@ref(eq:AR1) is, of course, just a toy model, but the method I discuss below - based on a parametric bootstrap - is rather general and can be applied in realistic circumstances.\n\n## Distribution of $\\hat alpha _n$\n\nTo begin with, we study the distribution of the maximum likelihood estimate $\\hat \\alpha _n$ for small $n$. For later convenience, I define a couple of wrappers:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Simulate 'n' observations from a given AR(1) model (with unit noise variance).\nar_sim <- function(alpha, mu, n)  \n\tmu + arima.sim(list(ar = alpha), n = n)\n\n# Fit an AR(1) model to a given time series 'y'.\nar_fit <- function(y, method = \"ML\")\n\tarima(y, c(1, 0, 0), method = method)\n```\n:::\n\n\nThe plot below shows the distribution of $\\hat \\alpha _n$, for $\\mu = 1$, $\\alpha = 0.7$ and $n = 20$, which presents the features anticipated in the introduction.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmu <- 1\nalpha <- 0.7\nn <- 20\n\nset.seed(840)\nnsim <- 1e2\nfits <- replicate(nsim, \n\t\t\t\t\t\t\t\t\tar_sim(alpha = alpha, mu = mu, n = n) |> ar_fit(), \n\t\t\t\t\t\t\t\t\tsimplify = F\n\t\t\t\t\t\t\t\t\t)\n\nestimates <- sapply(fits, coef)[\"ar1\", ]\n\nhist(estimates, breaks = 100,\n\t\t xlab = \"Estimate\", \n\t\t main = \"AR(1) coefficient estimates\",  \n\t\t )\nabline(v = alpha, col = \"blue\", lwd = 3, lty = 1)\nabline(v = mean(estimates), col = \"red\", lwd = 3, lty = 1)\n```\n\n::: {.cell-output-display}\n![AR(1) coefficient estimates. The vertical blue line represents true parameter value, while the red line is the expected value of the estimator.](finite-sample-bias-of-arma-estimates_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nThe true coverage rate of the asymptotic $95 \\%$ CIs is calculated as follows (interestingly, for $\\mu = 0$ the function `ar1_confint_naive()` constructs valid confidence intervals)[^1]:\n\n[^1]:  R does not have an S3 `confint.Arima` method, and the default method treats the $t$ statistic $\\frac{\\hat \\alpha - \\alpha}{\\widehat{\\text{SE}}(\\hat \\alpha)}$ as a $Z$-score. A better approximation is obtained if this is treated as a $t$ statistic with the correct number of degrees of freedom, as in the `ar1_confint_naive()` function below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nar1_confint_naive <- function(fit, conf.level = 0.95) {\n\test <- coef(fit)[\"ar1\"]\n\tse <- sqrt(vcov(fit)[\"ar1\", \"ar1\"])\n\t\n\tdf <- nobs(fit) - length(coef(fit))\n\t\n\ta <- (1 - conf.level) / 2\n\tk <- qt(a, df, lower.tail = FALSE)\n\t\n\tres <- est + k * se * c(-1, 1)\n\tunname(res)\n\t\n\treturn(res)\n}\n\ncis <- sapply(fits, ar1_confint_naive)\n\nmean( cis[1,] < alpha & alpha < cis[2,], na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.88\n```\n\n\n:::\n:::\n\n\n## Bootstrap confidence intervals\n\nThe bias can be corrected by a bootstrap:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nar_t <- function(fit, alpha) {\n\talpha_hat <- coef(fit)[\"ar1\"]\n\talpha_hat_se <- vcov(fit)[\"ar1\", \"ar1\"]\n\tt <- (alpha_hat - alpha) / alpha_hat_se\n\tunname(t)\n}\n\nconf.level <- .95\n\nnsim_max <- 1e2\nB <- 1e2\n\ncl <- parallel::makeCluster(8)\nparallel::clusterExport(cl, c(\"ar_sim\", \"ar_fit\", \"ar_t\", \"n\", \"B\", \"conf.level\"))\nboot <- pbapply::pblapply(fits[1:nsim_max], function(fit) {\n\talpha_hat <- coef(fit)[\"ar1\"]\n\talpha_hat_se <- unname(sqrt(vcov(fit)[\"ar1\", \"ar1\"]))\n\ta <- (1 - conf.level) / 2\n\t\n\tboot_fits <- replicate(B,\n\t\t\t\t\t\t\t\t\t\t\t\t tryCatch(\n\t\t\t\t\t\t\t\t\t\t\t\t \tar_sim(alpha = alpha_hat, mu = 1, n = n) |> ar_fit(),\n\t\t\t\t\t\t\t\t\t\t\t\t \terror = function(cnd) NULL\n\t\t\t\t\t\t\t\t\t\t\t\t \t),\n\t\t\t\t\t\t\t\t\t\t\t\t simplify = F\n\t\t\t\t\t\t\t\t\t\t\t\t )\n\t\n\tboot_fits <- boot_fits[!sapply(boot_fits, is.null)]\n\t\n\talpha_hat_boot <- sapply(boot_fits, coef)[\"ar1\", ]\n\talpha_hat_t_boot <- sapply(boot_fits, ar_t, alpha = alpha_hat)\n\t\n\tmask <- is.na(alpha_hat_t_boot) | is.na(alpha_hat_t_boot)\n\t\n\talpha_hat_boot <- alpha_hat_boot[!mask]\n\talpha_hat_t_boot <- alpha_hat_t_boot[!mask]\n\t\n\tres <- data.frame(\n\t\talpha_hat = alpha_hat, \n\t\tbias = mean(alpha_hat_boot) - alpha_hat,\n\t\talpha_lo = 2 * alpha_hat - quantile(alpha_hat_boot, 1 - a), \n\t\talpha_up = 2 * alpha_hat - quantile(alpha_hat_boot, a), \n\t\talpha_lo_stud = alpha_hat - quantile(alpha_hat_t_boot, 1 - a) * alpha_hat_se, \n\t\talpha_up_stud = alpha_hat - quantile(alpha_hat_t_boot, a) * alpha_hat_se\n\t\t)\n\trow.names(res) <- NULL\n\tres\n}, cl = cl) |>\n\tReduce(rbind, x = _)\n\nboot\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      alpha_hat        bias    alpha_lo  alpha_up alpha_lo_stud alpha_up_stud\n1    0.85262414 -0.19471827  0.78317963 1.4724307  -0.482250420      2.158562\n2    0.66628947 -0.15621608  0.53560793 1.3645360  -0.792759424      2.812873\n3    0.57436849 -0.13332140  0.30846285 1.2028061  -3.259235283      2.832843\n4    0.62906071 -0.10991475  0.47134313 1.1787687  -0.938805278      2.204768\n5    0.60360711 -0.13242597  0.40324768 1.4001634  -1.197860650      3.396961\n6    0.67062183 -0.14943327  0.51272544 1.2927734  -0.987719819      2.579275\n7    0.75210110 -0.13647717  0.67137262 1.3593562   0.009224206      2.317876\n8    0.16046215 -0.04455979 -0.17353871 0.5432569  -1.816831214      1.869875\n9    0.81233199 -0.18200098  0.73551368 1.4483615  -0.279466316      2.329176\n10   0.36355095 -0.15242721  0.13624854 0.9152366  -1.051765267      2.518366\n11   0.29713893 -0.05936817 -0.03466078 0.8805209  -2.199036722      2.989749\n12   0.26425288 -0.11187616 -0.02953603 0.7259781  -1.712349956      2.447159\n13   0.50789145 -0.15750791  0.27291512 1.2033539  -1.878500315      3.058650\n14   0.85142735 -0.19583665  0.80096907 1.5190430   0.148774854      2.172486\n15   0.59190852 -0.15791535  0.39395069 1.2053933  -1.321497306      2.390578\n16   0.39342496 -0.10971556  0.17185305 0.8605055  -1.327299712      2.380012\n17   0.54744081 -0.11130512  0.34245547 1.1018479  -1.436434070      2.780692\n18   0.10752399 -0.06298042 -0.15277005 0.5317654  -1.363042161      2.306266\n19   0.34979837 -0.08546517  0.06371313 0.8748160  -1.624835562      2.398202\n20   0.46325963 -0.10725428  0.21630464 1.0039030  -1.842270362      2.497107\n21   0.70433077 -0.13786584  0.52634195 1.2329142  -2.420273983      2.361247\n22   0.41496964 -0.07557471  0.14895164 0.9603661  -1.674382437      2.349617\n23   0.40987784 -0.12617659  0.15463519 0.9581205  -1.154231675      2.617124\n24   0.55714393 -0.11092063  0.33415249 1.1903456  -1.191095688      2.893653\n25   0.45314423 -0.09063173  0.17161838 0.9522383  -1.394019565      2.430099\n26   0.51005789 -0.16422006  0.25793916 1.1393604  -2.552280656      3.020786\n27   0.38553312 -0.13351401  0.16676072 0.9779680  -1.013028606      2.649040\n28   0.73782363 -0.15386862  0.61045039 1.3448509  -1.191471095      2.433239\n29   0.52267279 -0.11033761  0.31525266 1.0263009  -1.249208208      2.318849\n30   0.48848169 -0.08387920  0.20981910 0.9769579  -1.888472762      2.318612\n31   0.51379162 -0.14903918  0.27559253 1.2050550  -2.311306639      3.123561\n32   0.56608776 -0.09369968  0.33961302 1.1552899  -1.633482858      2.677815\n33  -0.01753534 -0.04111768 -0.38738407 0.4578689  -1.879219437      3.315321\n34   0.71791990 -0.17930896  0.61116801 1.2521249  -0.389964463      2.327301\n35   0.61045493 -0.12702400  0.42661365 1.1328285  -1.103795102      2.365588\n36   0.44740531 -0.10936089  0.25717549 1.0416674  -0.747851254      2.786186\n37   0.68617268 -0.17153787  0.54499109 1.3288828  -0.922604847      2.588534\n38   0.71803962 -0.15937936  0.60724377 1.3975636  -0.636706322      2.733110\n39   0.31808418 -0.12764951  0.08883308 0.9053579  -0.983953789      2.770461\n40   0.79310447 -0.18347651  0.70054419 1.4263197  -0.710815049      2.652400\n41   0.65867195 -0.13248060  0.48844755 1.1967031  -1.342907084      2.361939\n42   0.67945356 -0.12482508  0.46420364 1.1992905  -2.693504264      2.128994\n43   0.19549629 -0.06366365 -0.18313921 0.7080945  -2.163478767      2.491973\n44   0.07830885 -0.06399745 -0.25665512 0.6514152  -1.525867355      3.569281\n45   0.77519597 -0.18387503  0.70912894 1.4802599   0.152299163      2.611609\n46   0.80175979 -0.15438335  0.69105649 1.3817290  -1.604552656      2.169509\n47   0.63916175 -0.12976447  0.45619857 1.2625065  -1.416561138      2.522151\n48   0.06779585 -0.03446745 -0.23516226 0.5714702  -1.373828133      2.787143\n49   0.59938189 -0.14169834  0.44214387 1.2333531  -0.982798232      2.878695\n50   0.63782228 -0.18850532  0.48531030 1.3175636  -0.656666292      3.129732\n51   0.83334116 -0.20569975  0.77248424 1.4459520   0.023794531      2.188105\n52   0.74327722 -0.22606983  0.64253932 1.4994640  -0.084768547      2.723206\n53   0.68939115 -0.15812077  0.56061708 1.2886219  -0.642378633      2.585319\n54   0.39312221 -0.16551680  0.13826267 1.0197682  -1.268520997      2.792366\n55   0.40948845 -0.11978509  0.18374740 0.9883514  -1.239245351      2.677087\n56   0.65288471 -0.14101144  0.47338137 1.2738886  -0.901955103      2.645664\n57   0.42414153 -0.09834479  0.20283224 0.9876691  -1.003375180      2.614382\n58   0.30344529 -0.09119138  0.01356535 0.8008138  -1.586242049      2.464963\n59   0.13624832 -0.08024122 -0.18078233 0.6784194  -1.404411199      3.137748\n60   0.22754856 -0.04783318 -0.09760437 0.6177185  -1.731704687      1.955579\n61   0.49708780 -0.12057963  0.31784992 1.0996668  -0.728232258      2.743082\n62   0.65771333 -0.12130009  0.47126482 1.1594894  -1.936573332      2.104510\n63   0.31430301 -0.11954446  0.01069875 0.9395178  -2.005403626      3.144999\n64   0.43749528 -0.10905396  0.21710557 0.9763669  -0.986910259      2.396438\n65   0.63626199 -0.13626466  0.45569806 1.2291391  -1.527663711      2.312144\n66   0.74264520 -0.13353204  0.57412662 1.2747960  -3.034452063      2.335511\n67   0.29031800 -0.10471975  0.01523936 0.7702780  -1.443042929      2.258451\n68   0.45178130 -0.13463268  0.24421517 1.0267099  -1.158287195      2.803573\n69   0.71887968 -0.15686936  0.54841223 1.3868130  -2.342720519      2.669137\n70   0.23160918 -0.08437364 -0.09260990 0.6772414  -1.748058802      2.147935\n71   0.43019010 -0.10113292  0.13955049 0.9957797  -1.907308385      2.272326\n72   0.38783777 -0.09634882  0.12882501 0.8420649  -1.361530681      2.197321\n73   0.71021675 -0.18345169  0.60538857 1.4016977  -0.484619386      2.816519\n74   0.51693247 -0.11822475  0.29138233 1.1008922  -1.566484563      3.057912\n75   0.22051175 -0.08283519 -0.10843233 0.6863265  -2.000949185      2.072704\n76   0.57205860 -0.15001735  0.36579862 1.2279526  -1.316902387      2.936378\n77   0.33530914 -0.07414050  0.01249299 0.8246508  -2.488528671      2.446624\n78   0.61309541 -0.18853458  0.42229320 1.2799346  -1.268295234      2.853073\n79   0.76787237 -0.19733827  0.66558795 1.3166381  -0.466796313      2.204568\n80   0.78058262 -0.16598991  0.68833041 1.4046873  -0.350279318      2.129078\n81   0.59210294 -0.11979931  0.44220368 1.0942063  -0.812121852      2.547734\n82   0.75507632 -0.15727493  0.65041272 1.2681618  -0.339927495      2.264316\n83   0.27567597 -0.08074155  0.05427314 0.8033099  -0.987539742      2.352361\n84   0.59677406 -0.12002860  0.39097958 1.1480126  -1.673366438      2.404165\n85   0.36208119 -0.13491300  0.13184575 0.9430481  -0.937380323      2.719181\n86   0.66060440 -0.15888918  0.52648444 1.1885135  -1.072470179      2.657904\n87   0.46530689 -0.10911012  0.21475654 0.9426376  -1.584383196      2.215091\n88   0.69680152 -0.17173946  0.56871437 1.4142317  -0.988899554      2.975063\n89   0.54511798 -0.14676917  0.35379856 1.1309507  -1.040711723      2.729976\n90   0.36206390 -0.10190927  0.07888704 0.9636140  -2.061322230      3.356421\n91   0.86058557 -0.20878458  0.82409060 1.5400184   0.447632877      2.212424\n92   0.63211010 -0.14337355  0.49371598 1.2596972  -0.630148363      2.687069\n93   0.46105065 -0.13328930  0.24867475 1.0479571  -1.079952741      2.572198\n94   0.24476797 -0.10087163 -0.08197911 0.7641049  -1.722395102      2.287332\n95   0.36880897 -0.08318503  0.12538381 0.9020347  -1.415731369      2.467274\n96   0.44798597 -0.15002233  0.27326876 0.9756806  -0.622068816      2.385524\n97  -0.02740938 -0.03944684 -0.36586456 0.4574357  -1.410721819      3.068170\n98   0.68126994 -0.15658912  0.56863219 1.2278599  -0.237270233      2.294164\n99   0.53455586 -0.14418669  0.34881946 1.0796632  -0.784089504      2.270468\n100  0.62976701 -0.16512668  0.50613755 1.1919585  -0.471638527      2.513895\n```\n\n\n:::\n\n```{.r .cell-code}\nmean(boot$bias)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -0.1283571\n```\n\n\n:::\n\n```{.r .cell-code}\nsd(boot$bias)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.04117127\n```\n\n\n:::\n\n```{.r .cell-code}\nmean(boot$alpha_lo < alpha & alpha < boot$alpha_up)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.83\n```\n\n\n:::\n\n```{.r .cell-code}\nmean(boot$alpha_lo_stud < alpha & alpha < boot$alpha_up_stud)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n",
    "supporting": [
      "finite-sample-bias-of-arma-estimates_files\\figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}